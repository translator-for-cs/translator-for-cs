kurs
förkunskapskrav
dator
organisation
design
grund
grundläggande
arkitektur
princip
minne
mål
komponent
teknisk
system
funktionell
exekvera
snabb
snabb
kraft
effektiv
prestanda
framgång
ingenjörskonst
omvandla
rå
hastighet
transistor
applikation
mjukvara
struktur
parallelism
hög
utfall
komplettering
mästare
koncept
modern
ordning
forskning
framsteg
fält
mikroprocessor
avancerad
teknik
instruktion
parallel
parallel
etablera
hierarki
bedöma
skicklighet
kvantitiv
etablera
verkan
arkitekturell
tillstånd
simulering
verktyg
innehåll
essentiell
uppnå
basera
analys
metod
bedömning
konsumption
del
påverka
evolution
teknologi
inkludera
lag
exekvering
tid
genomströmning
fundamental
lokalitet
referens
evaluera
nivå
definera
gräns
kategori
dynamisk
dynamik
statisk
algoritm
gren
förutsägelse
spekulering
loop
annorlunda
källa
flaskhals
minska
miss
bestraffning
träff
exempel
fri
virtuell
adressera
kunskap
linjär
algebra
sannolikhet
teori
program
önskvärd
bild
översikt
praktisk
applikation
mått
utveckla
lösa
problem
derivera
vetenskap
geometri
optimering
statistik
betyg
kamera
modellering
stereo
struktur
matematisk
central
algoritm
kvadrat
applicera
terminologi
struktur
logik
lösning
geometrisk
kamera
klass
övning
session
par
projekt
inlämning
rapport
resultat
föreläsning
artikel
universitet
element
programmering
modell
processor
kärna
chip
dela
tråd
resurs
projekt
dokumentera
vetenskaplig
litteratur
session
sekvens
labb
metodologi
systematisk
assembly
språk
hållbarhet
beräkna
nivå
hållbar
elektrisk
mekanism
krets
lagring
energi
operera
enhet
komponent
konfiguration
klass
evaluera
optimisera
interpretera
krav
elektronisk
data
instans
mäta
estimera
spara
föreläsning
resultat
framtida
generation
optimisering
teori
praktiken
diskret
linjär
vetenskap
komplexitet
sort
kontext
transportering
telekommunikation
industriell
linjär
algebra
sannolikhet
teori
program
önskvärd
bild
översikt
praktisk
applikation
mått
utveckla
lösa
problem
derivera
vetenskap
geometri
optimering
statistik
betyg
kamera
modellering
stereo
struktur
matematisk
central
algoritm
kvadrat
applicera
terminologi
struktur
logik
lösning
geometrisk
kamera
klass
övning
session
par
projekt
inlämning
rapport
resultat
föreläsning
artikel
universitet
element
fysik
numerisk
appliciera
utveckla
modellera
integrera
struktur
ekvation
molekylär
dynamik
integration
applicera
planering
hårdvara
egenskap
algoritmisk
optimal
domän
formulera
modellera
hanterlig
relatera
generisk
ytterligare
heuristik
dubbel
erhålla
programmera
heltal
särskild
graf
åtskilja
lista
skala
nätverk
kommunikation
protokoll
stack
internet
distribuera
tjänst
summera
introducera
utveckling
inställning
länk
gräns
bandbredd
skalbarhet
imperativ
vektor
dimension
grafik
implementera
process
funktionalitet
strikt
matris
kandidat
dimensionell
hårdvara
bild
modell
rendera
skugga
matematisk
design
funktion
mekanisk
säkerhet
multimedia
exekvera
abstraktion
implementera
synkronisering
implementera
språk
kärna
distribuera
protokoll
nod
topologi
matematisk
kurs
maskin
orientera
inbädda
utföra
funktion
mekanisk
säkerhet
beteende
exempel
spel
multimedia
gränssnitt
köra
verifiera
set
bra
under
arbetsuppgift
implementera
bryta-ned
bibliotek
synkronisering
språk
allmän
implementera
kärna
distribuera
tillgänglig
kapacitet
cyklisk
prioritet
protokoll
nod
topologi
åtkomst
respons
konjunktion
konto
maximum
teori
låg
fördröjning
exekvera
korrekthet
abstraktion
filosofi
komplex
underhålla
miljö
semafor
syntax
träd
semantik
kompilator
induktion
bevis
läsa
ändlig
formell
bibliotek
typ
algebraisk
monad
transformator
specifikation
egenskaper
konstruktion
konstruera
snabb
undantag
kryptografi
säkerhet
implementering
sårbarhet
permutation
skiffer
kryptanalys
symmetrisk
hårdvaruacceleration
hårdvaru
adressrymd
adress
buss
kortläsare
null
datorchassi
dator
formfaktor
kärnminne
datorminne
display
expansionskort
expansions
brandvägg
brand
firmware
_
flashminne
flash
diskett
grafikprocessor
grafik
hårddisk
maskinvara
instruktionsuppsättning
instruktions
tangentbord
stordator
minnesadress
minnes
minneskort
minnes
mikroprogram
mikro
modem
moderkort
datornätverk
dator
nätverkskort
nätverks
operativsystem
kod
kringutrustning
persondator
nätaggregat
nät
skrivare
server
programvara
ljudkort
ljud
bandstation
datorterminal
dator
styrplatta
styr
kort
grafikkort
grafik
webbkamera
drive
aritmetik
artificiellt
artificiell
maskininlärning
maskin
fläkt
bildskärm
lysdiodskärm
lysdiod
logisk
operator
lagringsmedium
lagrings
kommunikationsprotokoll
kommunikations
mönsterkort
mönster
video
signalprocessor
signal
halvledare
parallelldator
parallell
grafiskt
grafisk
användargränssnitt
användar
skrivbordsdator
skrivbords
datorprogram
laser
elektromagnetisk
elektromagnetiskt
elektromagnetisk
optisk
skiva
latens
datorkluster
dator
megabyte
magnetband
behörighet
grundnivå
utbildningsprogram
behörighetskrav
programplanen
program
kursspecifika
förkunskaper
syfte
grundprinciperna
för
kurser
kurs
på
inom
chalmers
utbildningsprogram
gäller
samma
behörighetskrav
behörighets
som
till
de
(
t
)
där
kursen
kurs
ingår
i
programplanen
program
.
kursspecifika
kurs
förkunskaper
för
ett
objektorienterat
objekt
programmeringsspråk
,
inklusive
rekursiva
rekursiv
funktioner
funktion
och
metoder
metod
matematiska
matematisk
begrepp
såsom
mängder
mängd
grafer
graf
logaritmer
logaritm
syfte
datastrukturer
data
algoritmer
algoritm
utgör
fundamentala
fundamental
nästan
alla
programvaror
programvara
om
dataabstraktion
data
är
nödvändig
vid
användning
underhåll
av
förändringsbara
återanvändbara
effektiva
programkomponenter
program
ger
kunskaper
kunskap
färdigheter
färdighet
samt
en
introduktion
algoritmanalys
algoritm
efter
fullgjord
ska
studenten
student
kunna
förståelse
redogöra
några
abstrakta
abstrakt
datatyper
data
bland
annat
listor
köer
kö
hashtabeller
hash
används
att
effektivt
hantera
dessa
förklara
varför
korrekta
relaterade
använda
klasser
klass
standardbibliotek
standard
analysera
effektivitet
hos
vissa
söknings
-
sorteringsalgoritmer
sorterings
göra
välgrundade
välgrundad
val
mellan
olika
tillämpningar
tillämpning
täcker
följande
ämnen
enkel
komplexitetsanalys
komplexitets
vanliga
hur
kan
användas
stackar
stack
prioritetsköer
prioritets
standardalgoritmer
standard
deras
resurskravsöknings
resurskrav
algoritmdesigntekniker
algoritmdesign
består
föreläsningar
föreläsning
övningar
övning
laborationer
laboration
med
handledning
se
kursens
kurs
hemsida
examination
obligatoriska
obligatorisk
moment
genom
individuell
skriftlig
salstentamen
sals
4
5
hp
3
0
laborationerna
laboration
genomförs
normalt
relationer
byggstenar
lärandemål
förståelseredogöra
graferredogöra
korrektafärdigheter
förmågatillämpa
dessaimplementera
programmeringsspråkanvända
algoritmervärderingsförmåga
förhållningssättanalysera
sorteringsalgoritmergöra
datatyperasymptotisk
kodvanliga
hashtabellerhur
graferstandardalgoritmer
sorteringsalgoritmerstandardbibliotek
algoritmervanliga
brute
force
divide
and
conquer
"
upp
erövra
undervisningen
examineras

lära
ut
det
objektorienterade
objekt
synsättet
man
konstruerar
konstruera
har
idag
mycket
stark
ställning
när
programutveckling
program
uppbyggda
enligt
principer
antal
samverkande
objekten
objekt
in
erbjuder
avläsa
uppdatera
dem
beskrivs
s
k
självständigt
både
använder
sig
egenhändigt
konstruerade
färdiga
standardklasser
standard
händelsestyrda
bl
a
datasamlingar
data
strömmar
ström
filer
fil
söka
information
java
api
vanligt
förekommande
kodutvecklingsverktyg
kodutvecklings
beskriva
enkla
modeller
modell
modelleringsspråk
modellerings
programspråket
programspråk
behandlas
vad
skiljer
från
andra
synsätt
datainkapsling
data
konstruktorer
instansvariabler
instans
klassvariabler
klass
modularisering
ring
dokumentation
kodningsstandard
kodnings
namnsättning
testning
arv
bindning
polymorfism
polym
grafiska
grafisk
händelser
lyssnare
model
view
controller
arkitekturen
arkitektur
felhantering
fel
något
aktiva
aktiv
trådar
tråd
orientering
uml
ges
form
aktuell
samband
kursstart
kurs
tentamen
inlämningsuppgifter
inlämnings
baseras
tentamensbetyget
särskilda
kursägande
men
ägs
grundnivåprogram
dock
tillträdeskrav
tillträdeskraven
tillträdes
sökande
programregistrering
program
undantas
ovan
kravet
ha
framgångsrikt
slutfört
två
år
ämnet
datavetenskap
data
eller
motsvarande
särskilt
relevant
matematik
/
senaste
åren
kraftfulla
verifikation
programvaru
hårdvarusystem
hårdvaru
utvecklats
utveckla
förlitar
avgörande
sätt
logiska
logisk
tekniker
teknik
god
ramverk
specificera
datorsystem
programverifiering
program
formella
intelligens
studenterna
student
förstå
kontroll
sat
lösare
checking
tools
programvaruteknik
programvaru
skall
också
innebörden
sundhet
fullständighet
logiker
predikat
temporal
skriva
härledningar
naturlig
deduktion
predikatlogik
vi
satslogik
sats
avsnitt
1
2
6
avsnitten
ord
grundlig
konjunktiv
normalform
normal
horn
klausuler
oavgörbarhet
uttrycksfullhet
existentiella
universella
ordningens
undervisning
huth
ryan
logic
computer
science
http
www
cs
bham
ac
uk
research
lics
bli
godkänd
krävs
frivillig
veckovis
inlämningsuppgift
inlämnings
bonus
poäng
akademisk
erbjuds
gång
slut
betyget
baserat
tentamensresultatet
programmet
program
hittat
lärare
villig
agera
handledare
projektet
läst
vilka
handledaren
bedömmer
nödvändiga
klara
skriftligt
projektförslag
måste
vara
godkänt
examinatorer
innan
registreras
denna
genomföra
projektarbete
begränsad
fritt
valt
datateknik
data
antingen
föreslaget
potentiell
själv
icke
trivialt
göras
liten
grupp
samtliga
medlemmar
bidrar
substansiellt
individuellt
redovisas
slutrapport
muntlig
presentation
sker
djup
tydligehet
arbeta
komplext
klart
inget
fördefinierat
resultatintegrera
områden
behövstillämpa
stärka
förmågor
ex
känna
igen
problemmodellering
problemtillämpning
anpassning
kända
metoderoberoende
litteratursökningimplementering
användande
existerande
mjukvarupakettestning
mjukvaraatt
dra
slutsatser
experimentella
planera
arbete
sätta
delmål
hålla
igång
realistiska
bedömningar
möjliga
revision
hitta
angreppssätt
nödvändigt
kommunicera
presentera
resultaten
muntligdokumentera
arbetet
så
bygga
vidare
resultatet
projektets
ämne
väljas
områdena
föreslås
utföras
grupper
studenter
grupparbeten
bidra
väsentlig
avslutas
studieperiod
finns
inga
schemalagda
aktiviteter
utan
bestämmer
schemat
beror
skriftliga
speciellt
vetenskapliga
djupet
klarhet
rekomenderar
slutbetyg
vilket
sedan
godkännas
examinator
datorsystemteknik
introducerar
begreppen
datorarkitektur
dator
pipelining
cacheminne
cache
chalmerskursen
eda332
eda331
datorer
dator
viktig
tekniska
funktionella
funktionell
flexibilitet
förmåga
beräkningar
snabbt
energieffektivt
själva
verket
beräkningshastigheten
fördubblats
ca
var
18
månad
decennierna
viktigt
skäl
ingenjörsvetenskapen
kring
datorkonstruktion
dator
studerar
uppbyggnad
typiskt
miljard
ultrasnabba
uttrycks
utnyttja
den
inneboende
parallellismen
beräkningshastighet
programvaran
strukturer
struktur
moderna
datorarkitekturer
dator
följa
forskningsframsteg
detta
område
principerna
bakom
;
avancerade
baserade
utför
flera
instruktioner
samtidigt
flerkärniga
processorer
processor
multicores
beräkningsuppgifter
minneshierarkier
minnes
utnyttjar
finna
begärda
operander
tillämpa
kvantitativ
konstruktionsbeslut
påverkar
utnyttjande
datorindustrin
metodval
rapportering
prestandaegenskaper
värdera
utifrån
samhälleliga
etiska
aspekter
tolka
omvärldens
datorers
utformning
möta
behov
lägre
energianvändning
omfattar
arkitekturella
exekverande
exekvera
även
simuleringsbaserade
analysmetoder
konsekvenserna
strömförbrukning
ström
kursinnehållet
indelat
delar
första
delen
trender
utvecklingen
datorteknik
dator
moores
responstid
amdahls
referenslokalitet
kvantitativt
kvantitativ
utvärdera
effekten
parallellism
instruktionsnivå
ilp
definiera
nyckelbegrepp
begränsar
omfattas
delas
huvudkategorier
dynamiska
statiska
viktigaste
tomasulos
branch
prediction
spekulation
software
predicated
execution
tredje
handlar
angripa
prestandaflaskhalsar
prestanda
minneshierarkin
antalet
missar
tiden
inklusiva
exkusiva
hierarkier
hierarki
lockup
free
cachar
virtuellt
fjärde
behandlar
flertrådade
processorarkitekturer
processor
systemnivå
programmeringsmodeller
processorkärnor
processor
varandra
via
gemensamt
adressrum
mikroarkitekturnivå
mikroarkitektur
resurser
fine
grain
coarse
simultaneous
minneshierarkinivå
minneshierarki
introduceras
coherence
organiserad
fallstudier
miniprojekt
föreläsningarna
övningarna
övning
djupgående
fokuserar
problemlösning
problem
fallstudierna
kommersiella
dokumenterade
dokumentera
litteraturen
genomför
presenterar
plenum
kurskamrater
instruktörer
slutligen
får
bekanta
simuleringsmetoder
simulerings
industrin
effekterna
understöds
projektuppgift
projektuppgiften
träning
sina
föreslagna
lösningar
sammanhang
avvägningar
kollegor
avnämare
specifikt
tränas
förmågan
systematiskt
systematisk
m
dubois
annavaram
p
stenström
organization
cambridge
press
2012
godkända
projektrapport
förutsätter
kandidatexamen
genomgått
majoritet
kurserna
mpcsn
programmets
årskurs
studentens
medvetenhet
underliggande
strukturerna
struktur
ingenjörsmässiga
uppsatser
öka
författa
granska
såväl
offentligt
sådana
exempelvis
översiktsuppsatser
översiktligt
belysa
sitt
fördjupa
forskningsområde
undersöka
utvalt
sin
tillägnade
visa
uppsats
självständig
litteraturstudie
litteratur
utgående
vetenskapligt
vetenskaplig
studerade
området
fram
mest
relevanta
artiklarna
granskningens
analyserande
översiktsuppsats
annan
strukturera
valda
vetenskapsområdet
uppsatsen
baserad
publicerade
artiklar
välja
försvara
generellt
akademiskt
skrivande
relaterat
plagiering
författarskap
tillämpbart
diskutera
ekonomiska
undersöker
gör
över
aktuella
kunskapsläget
sammanfattar
arbeten
fältet
varje
presenteras
introduktionsföreläsningar
bildar
arbetsgrupper
tilldelas
gruppen
muntligt
seminarium
publikationer
gruppers
seminarier
workshoppar
uppsatsmetodik
granskning
etik
organiseras
hemuppgifter
uppsatsskrivning
separat
litteraturförteckning
givet
studenters
delta
presentationsteknik
eventuella
specifika
uppgifter
etikområdet
kräver
goda
programmeringskunskaper
programmerings
haskell
c
+
kännedom
programspråken
programspråk
unix
shell
algoritmerföljande
rekommenderas
booleska
_
operatorer
inferensregler
assemblerprogrammering
assembler
syftet
skapa
utformas
dokumenteras
implementeras
behövs
interpretatorer
tolkar
dessutom
kompilatorer
kompilator
reguljära
uttryck
programmeringsspråks
programmeringsspråk
lexikala
ändliga
automata
fungerar
analysverktyg
syntaxen
syntax
hjälp
kontextfria
kontext
grammatiker
ll
lr
parsning
standardverktyg
behärska
tekniken
översättning
implementerar
implementera
valfritt
typinferensregler
typkontrollerare
utforma
regler
operativ
semantisk
interpreters
implementationsproblematik
implementations
imperativa
polymorfa
polymorf
typkontroll
unifiering
closures
lär
du
dig
praktiska
implementationsproblem
implementations
kommer
programspråkens
grammatik
syntaxanalys
typsystem
experimentera
språkutvidgningar
språk
inblick
dåliga
före
betygen
u
tda548
programvaruutveckling
programvaru
människor
innebär
inte
bara
programmen
erfarenhet
grupprojekt
fördjupning
delmomentet
komponenter
objektorienterad
specifik
användargrupp
låta
testa
iterativt
iterativ
förbättra
motivera
skisser
användargruppkänna
identifiera
gränssnittsdesignkunna
utvärdering
expansion
gränssnittvälja
gränssnittsdesign
gränssnitts
designproblemarbeta
lättanvända
växelverkan
implementation
användartest
användar
värderingsförmåga
förhållningssätt
uppdelning
koordinering
arbetsuppgifter
behövsutveckla
projektmål
successivt
allteftersom
innehåller
genomgång
standardklasserna
välutvecklat
riktlinjer
stor
grupparbete
prototyp
utvecklas
anges
momenten
benämns
ingående
informationsteknik
därutöver
etablerat
etablera
kontakt
examinatorn
beslutar
antas
ej
behandla
aktuellt
intresse
ge
möjlighet
doktorandkurs
föreläsningsserie
gästforskare
institutionen
tillhandahålla
djupare
avseende
förståelseförstå
kopplade
forskningsområdet
forskningsmetoder
förmågavisa
kritiskt
komplexa
frågor
förhållningssättsöka
extrahera
lämpligheten
presenterade
tillvägagångssätt
forskningsinriktad
innehållet
bestäms
inför
nytt
kurstillfälle
kurshemsidan
innehålla
tutorials
kurslitteratur
varierar
beroende
salstenta
hemtenta
genomfört
kombination
former
mer
detaljerad
behörig
minst
syftar
mjukvaruutveckling
mjukvaru
ramarna
praktiskt
besitta
ingenjörsdisciplin
terminologibeskriva
relationen
intressent
produkt
processfärdigheter
intressenter
anser
värdefulltlära
tillsammans
övriga
laget
apier
projekttillämpa
strukturerad
mjukvaruutvecklingsprocess
mjukvaruutvecklings
medlem
lagomdöme
reflektera
processen
genomförts
projektreflektera
egna
gruppens
lärandestrategier
öppet
definieras
utanför
studenternas
arbetslag
alltså
bestämma
inriktning
utmaningen
arbetespecificering
samarbete
levereras
anses
värdefulltnya
teknologier
teknologi
lämpliga
realisera
värdeerbjudande
organisera
nå
gemensamma
begränsade
resurserreflektera
lärande
möjliggöra
kontinuerlig
förbättring
arbetssätt
arbetar
sex
vanligtvis
realistisk
mjukvaruutvecklingsuppgift
mjukvaruutvecklings
lagen
veckovisa
handledningsmöten
supplement
serie
fördjupad
insikt
uppgiften
stort
kontinuerligt
vecka
rapporten
gemensam
lagdel
lagmedlem
framskridande
slutbetyget
sätts
sista
versionen
exakt
blir
specificerat
pm
rapportens
lärandemålen
uppdelad
bearbetas
dat105
starkt
funktionen
funktion
processors
processor
assemblerkod
_
medvetna
vikten
energieffektiva
nivån
reducera
energianvändningen
energiförbrukning
beträffar
datorns
kretsstrukturer
krets
energikonsumtion
optimeringar
optimering
datorarkitekturers
dator
leder
allt
elektroniska
kretsar
krets
batteridrivna
enheter
superdatorer
superdator
datacenter
uppskatta
effektförbrukning
inuti
kombinerade
kompilatortekniker
kompilator
datorsystemets
datorsystem
muntliga
presentationer
bestå
oberoende
instuderingsuppgifter
därför
täta
dels
instuderingsuppgifterna
diskussioner
presentationerna
leda
korta
elevator
pitches
längre
utförda
rolig
avslappnad
omgivning
diskussionerna
fokusera
världens
koldioxidutsläpp
just
nu
sannolikt
inverka
samhället
kommande
generationer
forskningslitteratur
facktidskrifter
kaxiras
martonosi
architecture
techniques
for
power
efficiency
utvalda
ur
boken
john
eeckhout
performance
evaluation
fastställas
prestation
uppgifterna
40
%
hemtentamen
öppen
bok
20
engelska
bedrivs
betygslutbetyget
beräknas
individuella
tre
typerna
vikter
nämns
eleverna
databehandling
nivåerna
förståelsebeskriva
ämnebeskriva
elektriska
mekanismerna
orsakar
strömavbrottbeskriva
strömförlust
påverkan
prestandabeskriva
sekundära
lagringstekniker
lagrings
energiförbrukningenbeskriva
applikationer
applikation
energiförbrukningenredogöra
arkitekturfärdighet
förmågaanvända
direkt
energiförbrukningen
hela
systemetanvända
inbyggt
stöd
monitorering
simuleringsverktyg
systemkonfigurationervärderingsförmåga
förhållningssättidentifiera
styrkor
svagheter
datorsystemkomponenter
datorsystem
energieffektivitetutvärdera
jämföra
energieffektivitetredogöra
optimeringarvärdera
aspektertolka
överblick
