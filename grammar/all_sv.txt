Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kandidatarbetet får påbörjas tidigast under programtermin 6. Programansvarig beslutar vilka kandidatarbeten som är tillåtna för programmets studenter. För att säkerställa ett minimum av förkunskaper ska studenten uppfylla minst 105 hp av de tre första åren utifrån aktuell programtillhörighet. Avstämning sker efter att läsperiod 1 i årskurs 3 har inrapporterats till LADOK.
	
                Syfte
	I kandidatarbetet ska studenten integrera, fördjupa och utveckla sina kunskaper och färdigheter inom ett begränsat område av det som behandlats inom tidigare genomförda kurser inom programmet. Kandidatarbetet syftar också till att ge kunskaper och färdigheter i ingenjörsmässigt och vetenskapligt arbetssätt.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap, förståelse, färdighet och förmågaformulera och avgränsa en problemställning inom det valda ämnetplanera arbetet för att lösa och avrapportera problemet med givna resursersöka, inhämta och värdera tillgänglig litteratur och annan bakgrundsinformationintegrera och utveckla kunskap inom den valda problemställningendokumentera projektets genomförande i projektdagbokenreflektera över hur gruppen samverkat för att uppfylla gemensamma målpresentera kandidatarbetet i relation till den valda problemställningen i skriftlig och muntlig formVärderingsförmåga och förhållningssättkritiskt granska, värdera och konstruktivt ifrågasätta ett annat kandidatarbete avseende frågeställning, genomförande och resultatbedöma om samhälleliga och etiska aspekter behöver beaktas för vald problemställning och där det är relevant, analysera dessa aspekter i uppsatsen/rapportenreflektera kring behovet av ytterligare kunskap och ge förslag till framtida problemställningar i ämnet
	
                Innehåll
	Kandidatarbetets huvuddel utgörs av ett projektarbete. Studenten väljer själv ämnesområde genom sitt val bland de projekt som erbjuds. För att underlätta och stödja kandidatarbetet behandlas även ett antal generella kompetenser, som omsätts i praktisk tillämpning inom projektet. Särskild vikt läggs vid träning i att rapportera ett eget arbete, både muntligt och genom att självständigt författa en del av en uppsats/rapport som ska vara läsvärd för en tänkt läsekrets.
        	  
                Organisation
	Kandidatarbetet genomförs till största delen som ett projektarbete och arbetet bedrivs i en projektgrupp om max sex personer. Vid fastställda tider ges handledning inom projektets ämnesområde samt inom de generella kompetenserna. I kandidatarbetet ingår delrapporteringar som ska lämnas in av projektgruppen för kontinuerlig kontroll och återkoppling av arbetets fortskridande.
	
                           Examination inklusive obligatoriska moment
       	Kandidatarbetet redovisas i en skriftlig uppsats/rapport enligt gällande normer för vetenskaplig och teknisk rapportering samt presenteras muntligt och försvaras vid ett seminarium. Den enskilda studenten ska skriva en tydligt identifierbar del av en gemensam uppsats/rapport vilket ska beskrivas i projektdagboken. Studenten ska även kritiskt granska ett annat kandidatarbete, dels i en skriftlig opposition, dels genom att vara opponent under det seminarium då detta presenteras. Vid examination fästs vikt vid kvalitet på projektrapport, projektdagbok, muntlig presentation och opposition, kopplat till kandidatarbetets lärandemål.Examinator ansvarar för att uppsatsen/rapporten kontrolleras i ett plagiatverktyg.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas.Studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas.Förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade. Examinator formulerar och kontrollerar sådana förkunskapskrav.
	
                Syfte
	Examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper, förståelse, förmågor och förhållningssätt inom utbildningens sammanhang. Examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper. I examensarbetet på ett civilingenjörs-/arkitekt eller teknologie masterprogram betonas det tekniska/naturvetenskapliga/ konstnärliga innehållet. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs-, arkitekt- respektive teknologie masterexamen som formulerats i Chalmers lokala examensordning. (Dnr C2007/723).
Specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna:använda väsentligt fördjupade kunskaper inom huvudområdet/ inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete,välja och motivera sitt val av metod i projektet, inom huvudområdet/ inriktningen för utbildningen,bidra till forsknings- och utvecklingsarbete, och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt/industriellt/arkitektoniskt sammanhang.med helhetssyn kritiskt, självständigt och kreativt identifiera, formulera och hantera komplexa frågeställningar,planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar, samt kunna utvärdera detta arbete,skapa, analysera och kritiskt utvärdera olika tekniska/arkitektoniska lösningar,kritiskt och systematiskt integrera kunskap,på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser, samt den kunskap och de argument som ligger till grund för dessa,inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga, etiska och ekologiska aspekter skall beaktas, samtbeakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete, såväl vad avser hur arbetet genomförs, som vad som undersöks/utvecklas.identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande, där så är relevant.
Vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt/civilingenjör/teknologie master
	
                Innehåll
	Arbetsuppgiften består av ett självständigt arbete, som kan utföras individuellt eller i grupp. I uppgiften ingår ämnesval, problemformulering och problemavgränsning, litteraturstudier, empirisk datainsamling, utveckling, utarbetande av en rapport samt presentation och försvar av rapporten på ett seminarium. Rapporten skall uppfylla vissa vetenskapliga kriterier. I kursen ingår även opposition på annan grupps examensarbetesrapport.
        	  
                Organisation
	InitieringExamensarbetet kan genomföras av en student eller två studenter tillsammans.Studenten/studenterna kontaktar examinator. Alternativt kan masterprogramansvarig ge förslag på examinator.Studenterna utarbetar en kortfattad skriftlig beskrivning av arbetet. Denna beskrivning skall bifogas registreringsunderlaget. Beskrivningen bör innehålla bakgrund, syfte, mål och eventuellt metod.Examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete, och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete. Examinator signerar registreringsunderlaget.Masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget. MPA skickar in registreringsunderlaget till Studentcentrum.Studentcentrum genomför registrering i Ladok.
PlaneringStudenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen/uppgiften. Planeringsrapporten skall innehålla bakgrund, syfte, mål, avgränsningar, metod och tidsplan för examensarbetets genomförande. Planeringsrapporten lämnas till examinator för godkännande.
HandledningUnder arbetets gång har studenten/erna rätt till regelbunden handledning.
DelredovisningFör 60 hp examensarbeten skall studenten/studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig (MPA). Godkänd delredovisning innebär att 30 hp inrapporteras i Ladok.
Skriftlig redovisningExamensarbetsrapporten skall skrivas på engelska.Utformning av examensarbetets framsida mm skall ske enligt mall "Utformning av examensarbete" vid Chalmers. Se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/Sidor/utformning-rapporter-exjobb-kand.aspx.Examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg.Chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten. Se Chalmers arbetsordning: C2008/271.Examensarbetsrapporten skall publiceras elektroniskt i Chalmers Publication Library (CPL) enligt de regler som gäller för elektronisk publicering av examensarbeten vid Chalmers.När två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten.
Muntlig redovisningDen muntliga redovisningen inleds med att studenterna presenterar sitt arbete. Därefter följer opposition och diskussion.Den muntliga presentationen skall utföras på engelska. Redovisningen skall ta maximalt 60 minuter i anspråk varav ungefär 1/3 av tiden bör ägnas åt opposition och diskussion.Vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven, men ej publicerad. Detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten.Muntlig redovisning inklusive opposition skall genomföras på Chalmers. Ytterligare redovisning kan vid behov genomföras på företag. I undantagsfall, till exempel då examensarbetet genomförts utomlands, kan examinator medge undantag från kravet på muntlig redovisning, opposition och närvaro på andra redovisningar vid Chalmers.Presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum. Presentationen skall ske inom perioden 15 augusti till 15 juni, under normal arbetstid.
	
                           Examination inklusive obligatoriska moment
       	För att examensarbetet skall godkännas krävs att följande delmoment genomförts:Godkänd planeringsrapportGodkänd rapportGodkänd presentation och försvar vid examensarbetsredovisningenGodkänd opposition på ett annat masterexamensarbeteNärvaro vid två andra examensarbetsredovisningarFör examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden. Examinator beslutar om form för delredovisning. Godkänd delredovisning leder till att 30 hp inrapporteras i Ladok.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas.Studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas.Förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade. Examinator formulerar och kontrollerar sådana förkunskapskrav.
	
                Syfte
	Examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper, förståelse, förmågor och förhållningssätt inom utbildningens sammanhang. Examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper. I examensarbetet på ett civilingenjörs-/arkitekt eller teknologie masterprogram betonas det tekniska/naturvetenskapliga/ konstnärliga innehållet. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs-, arkitekt- respektive teknologie masterexamen som formulerats i Chalmers lokala examensordning. (Dnr C2007/723).
Specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna:använda väsentligt fördjupade kunskaper inom huvudområdet/ inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete,välja och motivera sitt val av metod i projektet, inom huvudområdet/ inriktningen för utbildningen,bidra till forsknings- och utvecklingsarbete, och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt/industriellt/arkitektoniskt sammanhang.med helhetssyn kritiskt, självständigt och kreativt identifiera, formulera och hantera komplexa frågeställningar,planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar, samt kunna utvärdera detta arbete,skapa, analysera och kritiskt utvärdera olika tekniska/arkitektoniska lösningar,kritiskt och systematiskt integrera kunskap,på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser, samt den kunskap och de argument som ligger till grund för dessa,inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga, etiska och ekologiska aspekter skall beaktas, samtbeakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete, såväl vad avser hur arbetet genomförs, som vad som undersöks/utvecklas.identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande, där så är relevant.
Vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt/civilingenjör/teknologie master
	
                    Organisation
	InitieringExamensarbetet kan genomföras av en student eller två studenter tillsammans.Studenten/studenterna kontaktar examinator. Alternativt kan masterprogramansvarig ge förslag på examinator.Studenterna utarbetar en kortfattad skriftlig beskrivning av arbetet. Denna beskrivning skall bifogas registreringsunderlaget. Beskrivningen bör innehålla bakgrund, syfte, mål och eventuellt metod.Examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete, och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete. Examinator signerar registreringsunderlaget.Masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget. MPA skickar in registreringsunderlaget till Studentcentrum.Studentcentrum genomför registrering i Ladok.
PlaneringStudenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen/uppgiften. Planeringsrapporten skall innehålla bakgrund, syfte, mål, avgränsningar, metod och tidsplan för examensarbetets genomförande. Planeringsrapporten lämnas till examinator för godkännande.
HandledningUnder arbetets gång har studenten/erna rätt till regelbunden handledning.
DelredovisningFör 60 hp examensarbeten skall studenten/studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig (MPA). Godkänd delredovisning innebär att 30 hp inrapporteras i Ladok.
Skriftlig redovisningExamensarbetsrapporten skall skrivas på engelska.Utformning av examensarbetets framsida mm skall ske enligt mall "Utformning av examensarbete" vid Chalmers. Se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/Sidor/utformning-rapporter-exjobb-kand.aspx.Examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg.Chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten. Se Chalmers arbetsordning: C2008/271.Examensarbetsrapporten skall publiceras elektroniskt i Chalmers Publication Library (CPL) enligt de regler som gäller för elektronisk publicering av examensarbeten vid Chalmers.När två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten.
Muntlig redovisningDen muntliga redovisningen inleds med att studenterna presenterar sitt arbete. Därefter följer opposition och diskussion.Den muntliga presentationen skall utföras på engelska. Redovisningen skall ta maximalt 60 minuter i anspråk varav ungefär 1/3 av tiden bör ägnas åt opposition och diskussion.Vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven, men ej publicerad. Detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten.Muntlig redovisning inklusive opposition skall genomföras på Chalmers. Ytterligare redovisning kan vid behov genomföras på företag. I undantagsfall, till exempel då examensarbetet genomförts utomlands, kan examinator medge undantag från kravet på muntlig redovisning, opposition och närvaro på andra redovisningar vid Chalmers.Presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum. Presentationen skall ske inom perioden 15 augusti till 15 juni, under normal arbetstid.
	
                           Examination inklusive obligatoriska moment
       	För att examensarbetet skall godkännas krävs att följande delmoment genomförts:Godkänd planeringsrapportGodkänd rapportGodkänd presentation och försvar vid examensarbetsredovisningenGodkänd opposition på ett annat masterexamensarbeteNärvaro vid två andra examensarbetsredovisningarFör examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden. Examinator beslutar om form för delredovisning. Godkänd delredovisning leder till att 30 hp inrapporteras i Ladok.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen skall vara en fördjupning av tidigare kunskaper varför studenterna bör tillhöra minst årskurs tre på respektive program. Studierna eller projektarbetet ska göras före eventuellt examensarbete på programmet.
	
                Syfte
	Syftet med kursen är att ge studenten tillfälle att individuellt eller i en grupp fördjupa sig inom ämnesområdet data- och informationsteknik utanför de inom programmen erbjudna kurserna.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- I projektform genomföra utveckling av ett mindre system bestående av hård- och eller mjukvara enligt en fastställd utvecklingsprocess och tidsplan.

- Dokumentera projektarbetet i form av t ex kravspecifikation, användarmanual samt en projektrapport. 
	
                    Organisation
	Antingen kan en läskurs erbjudas inom något område där kurser saknas, alternativt genomförs ett tillämpningsinriktat projekt. Initiativet kan komma från studenten själv eller från lärare som har förslag på projekt och kan erbjuda handledning. 
	
                           Examination inklusive obligatoriska moment
       	Kursen examineras i form av en skriftlig rapport
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	En kurs i grundläggande imperativ programmering och en kurs i grundläggande datorteknik. 
	
                Syfte
	Kursens syfte är att vara en introduktion till konstruktion av små inbyggda system och att ge en förståelse för hur imperativa styrstrukturer översätts till assembler samt för de svårigheter som uppstår vid programmering av händelsestyrda system med flera indatakällor.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning. skriva enkla maskinorienterade C-program med användande av programspråkets datatyper och styrstrukturer. beskriva motsvarigheten i assembler till typiska programstrukturer i C. utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt. medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter. konstruera system innefattande olika typer av undantag (interna undantag, avbrott, återstart). beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning. 
	
                Innehåll
	Programutveckling i C och assemblerspråk, test och felsökning. Strukturerad assemblerprogrammering, grunder för kodgenerering. Första nivåns systemprogrammering, dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel, händelser och avbrott. Programmering av kretsar för parallell in- och utmatning, tidshantering och programmering av räknarkretsar. Grunderna för datorkommunikation och programmering av kretsar för seriekommunikation. Dessutom implementeras ett enkelt tidsdelningssystem ( i C och assemblerspråk) med speciell tonvikt på användning av periferikretsar. 
        	  
                Organisation
	Schemalagd undervisning består av föreläsningar, demonstrationer och handledda simulerings- och kodningsövningar. Dessutom utförs handledda obligatoriska laborationer. Under kursen konstruerar eleven större och större programblock i assembler och C. Teorin inhämtas genom föreläsningar och demonstrationer. Eleven konstruerar sina programoch testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier. Inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara.
	
                Litteratur
	            Se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U, 3, 4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	De obligatoriska matematikkurserna på IT-programmet eller motsvarande (dvs. diskret matematik, linjär algebra, analys och matematisk statistik). En kurs i algoritmer och datastrukturer kompletterar denna kurs på ett bra sätt, men är inte förkunskapskrav.
	
                Syfte
	Matematiska modeller används inom vetenskap och ingenjörskonst för att beskriva och representera olika slags objekt och system, för att analysera, förstå och förutsäga, samt för att hitta den bästa konstruktionen eller strategin. Matematisk modellering är därför en grundläggande ingenjörsfärdighet.
Med noggrant utvalda övningsuppgifter lär denna kurs ut matematisk modellering som ett verktyg för att lösa verkliga problem. Problemen är tagna från datavetenskap och traditionella ingenjörsämnen, liksom från ekonomi, medicin och spel.
Kursen är främst avsedd som en introduktion till matematisk modellering för studenter med begränsad erfarenhet av hur matematiken används inom olika ingenjörsområden, men som kan komma att arbeta inom olika områden där matematisk modellering är användbart. Med tillämpningsorienterade uppgifter, och genom att lära ut modellering och problemlösning, fyller då kursen igen luckan mellan de teoretiska matematikkurserna och relevanta tillämpningar.
För den mest aktuella informationen om kursen, se kursens hemsida.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Beskriva olika slags modelltyper och deras egenskaper, liksom modellerings- och problemlösningsprocesserna. Beskriva huvudsakliga aspekter av matematiskt tänkande.Förklara matematikens roll inom olika tillämpningsområden.Matematisk modellering: undersöka verkliga problem, på lämpligt sätt översätta till en matematisk modell, samt dra slutsatser med hjälp av modellen. I modelleringen ingår att precisera, förenkla, göra lämpliga antaganden samt välja hur problemet kan beskrivas t.ex. med ekvationer eller på andra matematiska sätt.Matematisk problemlösning: Lösa komplexa och okända problem med ett undersökande och strukturerat arbetssätt, bland annat genom att analysera och förstå, arbeta i mindre steg och att pröva sig fram.Kommunicera om och med hjälp av matematik. Använda olika matematiska beräkningsverktyg som en naturlig del av att arbeta  matematiskt. Visa förmåga att balansera eget tänkande och känd kunskap.Visa ett reflekterande förhållningssätt till kursens innehåll och det egna tänkandet. Visa noggrannhet och kvalitet i allt arbete. 
	
                Innehåll
	Kursens kärna är ett antal realistiska och tillämpningsorienterade övningsproblem, som används som utgångspunkt för det egna lärandet. Problemen är noggrannt utvalda och formulerade för att utveckla studentens förmåga att modellera och lösa problem med ett undersökande arbetssätt. Problemen belyser många olika tillämpningsområden och grupperas efter huvudsakliga modelltyper. I listan nedan kan man hitta exempel på konkret innehåll:Funktioner och ekvationer, exempelvis hur olika matematiska påståenden kan motiveras och hur man kan skapa funktioner utifrån experimentella data.Optimeringsmodeller, exempelvis matematisk programmering inom ekonomi och beslutsstöd. Dynamiska modeller, exempelvis simulering inom biologi, fysik och teknik.Probabilistiska modeller, exempelvis stokastisk simulering, markovmodeller för texter, Bayesiansk inferens.Diskreta modeller, exempelvis grafer och nät för modellering av olika aktiviteter, modellering med diskreta standardproblem och satslogik, planering.En eller två ytterligare moduler med blandade och/eller aktuella ämnen.Det egna lärandet stöds av en handledningsstil som utvecklar studentens självständiga förmåga. Under föreläsningar diskuterar vi också olika problemlösningsstrategier, reflekterar över lösningar och jämför olika sätt att lösa samma problem.Kursen orienterar även om matematikens roll inom olika tillämpningar och framhåller betydelsen av matematiska datormodeller.
        	  
                Organisation
	Kursen är huvudsakligen organiserad i veckomoduler efter modelltyp. För varje veckomodul ges en inledande föreläsning, inlämningsuppgifter att lösa under veckan, samt en uppföljande obligatorisk föreläsning som ger återkoppling på de lösta uppgifterna. Kursens lärande stöds av en interaktiv undervisningsstil med mycket kontakt mellan studenter och lärare. Detta sker under handledningstimmar där studenter löser uppgifterna och regelbundet diskuterar med lärarna. Studenterna får då individuell återkoppling och vägledning i sin egen problemlösning, och utvecklar sin självständiga förmåga.Som uppföljning till varje modul får studenterna reflektera över sina egna och alternativa lösningar, och över sin egen problemlösning.
	
                Litteratur
	            Då övningsproblemen är det viktigaste i kursen finns ingen kurslitteratur i traditionell mening. För utdelat material och bredvidläsning, se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom skriftliga inlämningssuppgifter och en slutligt uppsats, där studenterna uppmuntras att sammanfatta och reflektera över kursen på ett personligt sätt. Däreutöver innehåller kursen obligatoriska uppfölningsföreläsningar för varje module, samt ett obligatoriskt slutmöte där uppsatsen diskuteras. Både inlämningsuppgifterna och uppsatsen genomförs normalt  i grupper om två personer.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Programmering i ett objektorienterat programmeringsspråk, inklusive rekursiva funktioner och metoder. Grundläggande matematiska begrepp, såsom mängder, funktioner, relationer, grafer, logaritmer och induktionsbevis.
	
                Syfte
	Datastrukturer och algoritmer utgör fundamentala byggstenar i nästan alla programvaror. Kunskap om  dataabstraktion, datastrukturer och algoritmer är nödvändig vid konstruktion, användning och underhåll av förändringsbara, återanvändbara och effektiva programkomponenter.
Kursen ger kunskaper och färdigheter i konstruktion och användning av algoritmer och datastrukturer, samt en introduktion till algoritmanalys och dataabstraktion.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelseredogöra för några grundläggande abstrakta datatyper och datastrukturer, bland annat listor, köer, hashtabeller, träd och graferredogöra för några av de algoritmer som används för att effektivt hantera dessa datastrukturer, och förklara varför de är korrektaFärdigheter och förmågatillämpa grundläggande abstrakta datatyper och datastrukturer, samt algoritmer relaterade till dessaimplementera och använda abstrakta datatyper som gränssnitt och datastrukturer som klasser, i ett objektorienterat programmeringsspråkanvända ett standardbibliotek för datastrukturer och algoritmerVärderingsförmåga och förhållningssättanalysera effektivitet hos vissa algoritmer, till exempel söknings- och sorteringsalgoritmergöra välgrundade val mellan olika datastrukturer och algoritmer för olika tillämpningar
	
                Innehåll
	Kursen täcker följande ämnen:abstrakta datatyperasymptotisk effektivitet och enkel komplexitetsanalys av imperativ kodvanliga datastrukturer såsom fält, listor, träd och hashtabellerhur dessa kan användas för att implementera abstrakta datatyper såsom stackar, köer, prioritetsköer, avbildningar, mängder och graferstandardalgoritmer för dessa datastrukturer, inklusive deras resurskravsöknings- och sorteringsalgoritmerstandardbibliotek för datastrukturer och algoritmervanliga algoritmdesigntekniker, såsom brute force, divide and conquer ("dela upp och erövra"), och randomisering
        	  
                Organisation
	Undervisningen består av föreläsningar, övningar och laborationer med handledning.
	
                Litteratur
	            Se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen (4,5 hp) samt laborationer (3,0 hp). Laborationerna genomförs normalt i par. 
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	 
	
                Syfte
	Kursens syfte är att lära ut grundprinciperna för det objektorienterade synsättet och hur man konstruerar objektorienterade program. Det objektorienterade synsättet har idag en mycket stark ställning när det gäller programutveckling. Program som är uppbyggda enligt objektorienterade principer består av ett antal samverkande objekt. Objekten kapslar in data och erbjuder metoder för att avläsa och uppdatera dem. Objekten beskrivs av s.k. klasser.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	
självständigt konstruera objektorienterade program som både använder sig av egenhändigt konstruerade klasser och av färdiga standardklasser.
konstruera händelsestyrda program med grafiska användargränssnitt.
använda standardklasser för bl.a. datasamlingar, strömmar och filer.
söka information om standardklasser i Java API.
använda några vanligt förekommande kodutvecklingsverktyg.
beskriva enkla objektorienterade modeller i ett objektorienterat modelleringsspråk.

	
                Innehåll
	I kursen används programspråket Java. Följande moment behandlas:

Grundläggande begrepp i objektorienterad programutveckling. Vad som skiljer det objektorienterade synsättet från andra synsätt.
Objekt och klass. datainkapsling.
Konstruktorer, metoder, instansvariabler, klassvariabler.
Modularisering av program.
Användning av dokumentation för standardbibliotek.
Användning av standardklasser för datasamlingar.
Kodningsstandard, namnsättning och kommentering.
Testning av program.
Arv, dynamisk bindning och polymorfism.
Abstrakta klasser och gränssnitt.
Grafiska användargränssnitt. Händelser och lyssnare.
Model-View-Controller-arkitekturen för program med grafiska användargränssnitt.
Felhantering.
Strömmar och filer.
Något om aktiva objekt och trådar.
Orientering om modellering i UML.

        	  
                Organisation
	Undervisningen ges i form av föreläsningar och handledda övningar.
	
                Litteratur
	            Information om aktuell litteratur ges i samband med kursstart på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Slutbetyg i skala 3-5 ges efter godkända inlämningsuppgifter (laborationer) och baseras på tentamensbetyget.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kravet för kursen är att ha framgångsrikt slutfört två år med ämnet datavetenskap eller motsvarande. Särskilt relevant är matematik (inklusive diskret matematik), programmering, algoritmer och/eller datastrukturer.
	
                Syfte
	Under de senaste åren har kraftfulla verktyg för verifikation av programvaru- och hårdvarusystem utvecklats. Dessa verktyg förlitar sig på ett avgörande sätt i logiska tekniker. Kursen ger en god grund i logik och en kort introduktion till några logiska ramverk som används för att modellera, specificera och modellera datorsystem. Grundläggande kunskaper i logik är en god grund för kurser i programverifiering, formella metoder och artificiell intelligens.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Studenterna ska kunna förstå och använda formella verktyg för kontroll av mjukvara och hårdvara, såsom SAT-lösare och "model checking tools" (som används i programvaruteknik). De  skall också kunna förklara innebörden av sundhet och fullständighet för olika logiker (sats-, predikat- och temporal logik) och skriva härledningar i naturlig deduktion i predikatlogik.
	
                Innehåll
	Vi täcker: satslogik (avsnitt 1,1-1,5), predikatlogik (avsnitt 2,1-2,6) och model-checking (avsnitten 3.2 och 3.4). Med andra ord, en grundlig introduktion till grundläggande begrepp och metoder i logik: naturlig deduktion, semantik för både sats- och predikatlogik, sundhet och fullständighet, konjunktiv normalform, Horn klausuler, oavgörbarhet av predikatlogik, uttrycksfullhet av predikatlogik, existentiella och universella andra- ordningens logiker.
        	  
                Organisation
	Undervisning ges i form av föreläsningar och övningar.

	
                Litteratur
	            Huth, Ryan. Logic in Computer Science, se http://www.cs.bham.ac.uk/research/lics/
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen. Frivillig veckovis inlämningsuppgift som ger bonus poäng på alla tentamen under samma akademisk år erbjuds under kursens gång. Slut betyget är baserat på tentamensresultatet.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att söka kursen ska studenten ha hittat en lärare som är villig att agera som handledare för projektet. Studenten ska ha läst kurser vilka handledaren bedömmer är nödvändiga för att kunna klara av projektet. Ett skriftligt projektförslag måste vara godkänt av en av kursens examinatorer innan studenten registreras på kursen.
	
                Syfte
	I denna kurs ska studenten genomföra ett projektarbete inom en begränsad tid. Ämnet är fritt valt inom datavetenskap eller datateknik, och kan antingen vara föreslaget av en potentiell handledare eller av studenten själv. Projektet skall vara icke-trivialt. Projektet kan göras i en liten grupp där samtliga medlemmar bidrar substansiellt, eller individuellt. Projektet redovisas genom en slutrapport samt en muntlig presentation. Bedömning sker efter innehåll, djup och tydligehet.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	    arbeta med ett komplext problem som har ett klart mål men inget fördefinierat resultatintegrera kunskap från olika områden om det behövstillämpa och stärka förmågor som t.ex.att känna igen och lösa ett problemmodellering av problemtillämpning och anpassning av kända metoderoberoende litteratursökningimplementering av mjukvara och användande av existerande mjukvarupakettestning av mjukvaraatt dra slutsatser från experimentella resultat.planera ett komplext arbete, sätta upp delmål och hålla projektet igång, göra realistiska bedömningar om resurskrav och möjliga resultat, revision av mål och att hitta andra angreppssätt om nödvändigt.kommunicera och presentera resultaten effektivt, både skriftligt och muntligdokumentera arbetet så att andra kan bygga vidare på resultatet
	
                Innehåll
	Projektets ämne kan väljas fritt inom områdena datavetenskap och datateknik. Projektet kan antingen föreslås av studenten själv eller av en handledare. 
        	  
                Organisation
	Projektet kan utföras i grupper om 2-3 studenter eller individuellt. Vid grupparbeten ska samtliga studenter inom projektet bidra med en väsentlig del av arbetet. Projektet skall avslutas inom en studieperiod. Studenten måste själv hitta en handledare. Det finns inga schemalagda aktiviteter utan studenten och handledaren bestämmer om schemat.
	
                Litteratur
	            Litteratur beror på projektet.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig rapport och muntlig presentation. Betyget baseras på det skriftliga arbetet, speciellt på det vetenskapliga djupet, teknisk skicklighet, korrekthet och klarhet. Handledaren rekomenderar ett slutbetyg för projektet, vilket sedan ska godkännas av kursens examinator.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Datorsystemteknik som introducerar de fundamentala begreppen inom datorarkitektur såsom pipelining och cacheminne motsvarande Chalmerskursen EDA332/EDA331.
	
                Syfte
	Datorer utgör en viktig komponent i nästan alla tekniska system idag på grund av deras funktionella flexibilitet och förmåga att utföra beräkningar snabbt och energieffektivt. I själva verket har beräkningshastigheten för datorer fördubblats ca var 18 månad under de senaste decennierna. Ett viktigt skäl är framsteg inom datorarkitektur - ingenjörsvetenskapen kring datorkonstruktion.Inom datorarkitektur studerar vi principer för uppbyggnad av beräkningsstrukturer som idag typiskt använder en miljard ultrasnabba datorer för att snabbt utföra de beräkningar som uttrycks i programmeringsspråk genom att utnyttja den inneboende parallellismen. Kursen täcker fundamentala principer för hur man konstruerar datorer som erbjuder hög beräkningshastighet för programvaran.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs ska studenten kunna 
redogöra för begrepp och strukturer i moderna datorarkitekturer för att kunna följa forskningsframsteg inom detta område,
redogöra för principerna bakom en modern mikroprocessor; speciellt avancerade tekniker baserade på pipelining som typiskt utför flera instruktioner samtidigt samt grundläggande principer kring flerkärniga processorer (multicores) som kan utföra flera beräkningsuppgifter samtidigt,redogöra för principerna bakom moderna minneshierarkier som typiskt utnyttjar lokalitet för att finna begärda instruktioner och operander snabbt, och
redogöra för och kunna tillämpa kvantitativ analys av hur konstruktionsbeslut påverkar beräkningshastighet genom utnyttjande av moderna verktyg som används i datorindustrin.
redogöra för metodval, vid rapportering av prestandaegenskaper för datorer och värdera prestandaegenskaper utifrån samhälleliga och etiska aspekter
tolka omvärldens krav på datorers utformning, för att möta samhälleliga behov, såsom lägre energianvändning.

	
                Innehåll
	Kursen omfattar arkitekturella tekniker nödvändiga för att uppnå hög prestanda för exekverande program. Detta omfattar även simuleringsbaserade analysmetoder för kvantitativ analys av konsekvenserna av ett konstruktionsbeslut på prestanda och strömförbrukning.

Kursinnehållet är indelat i följande delar:

1 . Den första delen omfattar trender som påverkar utvecklingen av datorteknik inklusive Moores lag, mått på beräkningshastighet (responstid och kapacitet), strömförbrukning, benchmarking, Amdahls lag samt referenslokalitet. Den täcker också hur simuleringsbaserade tekniker kan användas för att kvantitativt utvärdera effekten av konstruktionsbeslut på beräkningshastigheten. 
2 . Den andra delen omfattar olika tekniker för utnyttjande av parallellism på instruktionsnivå (ILP) genom att definiera nyckelbegrepp ILP och vad som begränsar det. De tekniker som omfattas delas in i två huvudkategorier: dynamiska och statiska tekniker. De viktigaste dynamiska tekniker som omfattas är Tomasulos algoritm, branch prediction och spekulation. De viktigaste statiska tekniker är loop unrolling, software pipelining, trace scheduling samt predicated execution.
3 . Den tredje delen handlar om minneshierarkier. Denna del omfattar tekniker för att angripa olika prestandaflaskhalsar i minneshierarkin såsom tekniker för att minska antalet cache missar, samt minska tiden att hantera en cache träff/miss. Exempel på tekniker som behandlas är inklusiva/exkusiva hierarkier, lockup-free cachar och prefetching. Virtuellt minne behandlas också.
4 . Den fjärde delen behandlar flerkärniga/flertrådade processorarkitekturer (multicores). På systemnivå behandlas programmeringsmodeller och hur processorkärnor på ett chip kan kommunicera med varandra via ett gemensamt adressrum. På mikroarkitekturnivå behandlas olika metoder för hur flera trådar kan dela arkitekturella resurser: fine-grain/coarse-grain och simultaneous multithreading. På minneshierarkinivå introduceras cache coherence.

        	  
                Organisation
	Kursen är organiserad i föreläsningar, övningar, fallstudier, laborationer och ett miniprojekt. Föreläsningarna behandlar grundläggande begrepp och strukturer. Övningarna ger djupgående analys av begrepp och strukturer och fokuserar på problemlösning. Fallstudierna är baserade på moderna kommersiella datorer som är dokumenterade i den vetenskapliga litteraturen. Studenter genomför fallstudier och presenterar dem i plenum för kurskamrater och instruktörer. Slutligen får studenterna bekanta sig med och använda simuleringsmetoder och verktyg som används inom industrin för att analysera effekterna av konstruktionsbeslut på beräkningshastigheten. Detta moment understöds av en sekvens av laborationer och i en projektuppgift. Projektuppgiften ger studenterna träning i att sätta in sina föreslagna lösningar inklusive sina metodval i ett vidare sammanhang, och i att redogöra för sina avvägningar för kollegor och avnämare. Specifikt tränas förmågan att på ett systematiskt sätt konstruera datorer för att uppnå samhälleliga krav på energieffektivitet.

	
                Litteratur
	            M. Dubois, M. Annavaram, P. Stenström. Parallel Computer Organization and Design. Cambridge Press, 2012.
		
                       Examination inklusive obligatoriska moment
       	Godkända laborationer, skriftlig projektrapport samt skriftlig tentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Denna kurs förutsätter att studenten har en kandidatexamen i Datavetenskap eller motsvarande samt har genomgått en majoritet av kurserna i MPCSN-programmets årskurs 1 eller har motsvarande kunskaper. 
	
                Syfte
	Kursens syfte är att utveckla studentens medvetenhet om de underliggande strukturerna i vetenskapliga och ingenjörsmässiga uppsatser samt att öka studentens färdighet i att författa och granska, såväl som att offentligt presentera, sådana uppsatser, exempelvis översiktsuppsatser. Ett ytterligare syfte är att studenten översiktligt skall kunna belysa de etiska konsekvenserna av sitt arbete.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Fördjupa sig i ett forskningsområde: Studenten skall kunna undersöka ett utvalt forskningsområde och fördjupa sin kunskap inom detta område. Denna tillägnade kunskap skall studenten visa genom att skriva en uppsats.Genomföra en självständig litteraturstudie: Utgående från ett vetenskapligt problem inom det studerade området skall studenten kunna söka fram de mest relevanta artiklarna i den vetenskapliga litteraturen, kunna granska dem och kommunicera granskningens resultat.Författa en analyserande översiktsuppsats eller annan vetenskaplig uppsats: Studenten skall kunna planera, strukturera och författa en vetenskaplig uppsats inom det valda vetenskapsområdet. Uppsatsen skall vara baserad på publicerade vetenskapliga artiklar och studenten skall självständigt kunna välja ut relevanta artiklar.Göra etiska bedömningar: Studenten skall kunna göra och försvara etiska bedömningar generellt, och särskilt inom området akademiskt skrivande, t ex relaterat till plagiering och författarskap. Studenten skall, där så är tillämpbart, kunna diskutera och värdera de samhälleliga, etiska och ekonomiska konsekvenserna av sitt arbete.
	
                Innehåll
	Studenten undersöker och gör en översikt över det aktuella kunskapsläget inom ett specifikt forskningsområde och sammanfattar det i en analyserande översiktsuppsats eller annan vetenskaplig uppsats. Denna skall vara baserad på publicerade arbeten inom ett valt forskningsområde relaterat till fältet Datorer, Nätverk och System. Varje forskningsområde och ett antal relaterade ämnen presenteras för studenten i introduktionsföreläsningar. Studenterna bildar arbetsgrupper och varje grupp tilldelas ett ämne för vilket gruppen skall skriva en uppsats. Uppsatsen skall presenteras muntligt vid ett seminarium. Studenten skall också granska publikationer och andra gruppers uppsatser. Undervisningen sker i form av föreläsningar, seminarier och workshoppar inom uppsatsmetodik, granskning och presentation såväl som etik.
        	  
                Organisation
	Kursen organiseras i form av föreläsningar, seminarier, workshoppar, hemuppgifter, uppsatsskrivning och muntlig presentation.
	
                Litteratur
	            Se separat litteraturförteckning.
		
                       Examination inklusive obligatoriska moment
       	För betyget godkänd på kursen skall studenten: (1) Författa en analyserande översiktsuppsats eller annan vetenskaplig uppsats för ett givet ämne inom ett specifikt forskningsområde, (2) Granska publikationer och andra studenters arbeten, (3) Presentera sin uppsats muntligt, (4) Delta i föreläsningar, seminarier och workshoppar inom områdena uppsatsmetodik och presentationsteknik, (5) Delta i kursens etiska moment och genomföra eventuella specifika uppgifter inom etikområdet.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen kräver:- Goda programmeringskunskaper i Haskell, Java, C eller C ++- God kännedom om något av programspråken Java, C eller C ++- Grundläggande färdigheter i Unix programmering (Shell-programmering)- Grundläggande kunskaper i datastrukturer och algoritmerFöljande rekommenderas också:- Grundläggande kunskaper i logik (booleska operatorer, inferensregler)- Kännedom om funktionell programmering- Grundläggande kunskaper i assemblerprogrammering
	
                Syfte
	Syftet med kursen är att skapa förståelse för hur programmeringsspråk utformas, dokumenteras och implementeras. Kursen behandlar grundläggande tekniker och verktyg som behövs för att implementera interpretatorer (tolkar), och ger dessutom en introduktion till kompilatorer.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Använda reguljära uttryck för att definiera ett programmeringsspråks lexikala struktur, förklara hur ändliga automata fungerar, och implementera lexikala analysverktyg;definiera syntaxen för programmeringsspråk med hjälp av kontextfria grammatiker, förklara principerna för LL och LR-parsning, samt implementera parsers med hjälp av standardverktyg;definiera och implementera abstrakt syntax;behärska tekniken för syntaxstyrd översättning och hur man implementerar för ett valfritt programmeringsspråk;formulera typinferensregler och implementera typkontrollerare;utforma regler för operativ semantisk och implementera interpreters (tolkar);skriva enkla kodgeneratorer;känna till grundläggande implementationsproblematik för både imperativa och funktionella språk;Implementera polymorfa typkontroll med hjälp av unifiering;Använda "closures" för att implementera funktionella programmeringsspråk.
	
                Innehåll
	Genom att implementera interpretatorer och kompilatorer lär du dig lösa praktiska implementationsproblem men även teori för formell semantik. Du kommer att lära dig om programspråkens grammatik när du implementerar syntaxanalys och om typsystem vid implementering av typkontrollerare. Genom att experimentera med språkutvidgningar får du en inblick i bra och dåliga sätt att konstruera programmeringsspråk.
        	  
                Organisation
	Undervisning ges i form av föreläsningar, övningar och laborationer med individuell handledning.
	
                Litteratur
	            Information om litteratur ges på kursens hemsida före kursstart.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U,3,4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen TDA548 Grundläggande programvaruutveckling eller motsvarande.
	
                Syfte
	I princip alla datorprogram som ska användas av människor använder sig idag av grafiska gränssnitt. Att utveckla dessa innebär inte bara en förståelse av hur dessa kan implementeras utan även att man har en förståelse för de som ska använda programmen. Kursen ger praktisk erfarenhet i dessa två aspekter genom ett grupprojekt som ger en fördjupning av delmomentet kring grafiska komponenter från kursen Objektorienterad programvaruutveckling. Projektets mål är att utveckla en applikation för en specifik användargrupp och att genom att låta dessa testa programmet iterativt förbättra det.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse
Skapa och motivera skisser på ett grafiskt gränssnitt baserat på en specifik användning och användargruppKänna igen och kunna identifiera vanliga mönster inom gränssnittsdesignKunna beskriva vanliga metoder för utvärdering av användargränssnitt
Färdighet och förmåga
Implementera ett gränssnitt genom tillämpning eller expansion av ett standardbibliotek för grafiska gränssnittVälja och tillämpa vanliga mönster inom gränssnittsdesign på ett designproblemArbeta iterativt för att skapa lättanvända gränssnitt genom en växelverkan mellan implementation och användartest
Värderingsförmåga och förhållningssätt
Genomföra projekt där uppdelning och koordinering av arbetsuppgifter mellan medlemmar behövsUtveckla och specificera projektmål successivt allteftersom ett projekt genomförs.
	
                Innehåll
	Kursen innehåller en genomgång av standardklasserna i ett välutvecklat 
grafiskt bibliotek, en översikt över vilka riktlinjer som krävs för att 
skapa lättanvända gränssnitt samt metoder för att iterativt utveckla och
 förbättra ett gränssnitt.
        	  
                Organisation
	Undervisningen består av föreläsningar, övningar, handledning och 
inlämningsuppgifter. En stor del av arbetet är självständigt grupparbete
 där en prototyp utvecklas. Projektets mål är att utveckla en 
applikation för en specifik användargrupp och att genom att låta dessa 
testa programmet iterativt förbättra det.
	
                Litteratur
	            Anges på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Bedömning sker i form av två moment. Momenten benämns Tentamen 4 hp, som
 examineras i form av skriftlig salstentamen, och Projekt 3,5 hp, som 
examineras i form av projektrapport. Vidare krävs att samtliga i kursen ingående uppgifter skall redovisas med godkänt resultat.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenten ska ha en kandidatexamen inom data- och informationsteknik.Därutöver är det ett förkunskapskrav att studenten har etablerat kontakt med kursens examinator; det är examinatorn som beslutar om studenten ska antas till kursen eller ej.
	
                Syfte
	Kursen kommer att behandla ett område av aktuellt intresse inom data- och informationsteknik.Kursens syfte är att ge studenten möjlighet att följa, till exempel, en doktorandkurs eller en föreläsningsserie som ges av en gästforskare vid institutionen.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kursen skall tillhandahålla studenten djupare kunskaper avseende ett forskningsområde relevant för ämnet data- och informationsteknik.Kunskap och förståelseFörstå och förklara terminologi, koncept och teori kopplade till valt forskningsområde;Redogöra för och förklara forskningsområdet, samt visa förståelse för aktuell forskning och utveckling i det valda forskningsområdet;Redogöra för och förklara forskningsmetoder inom valt forskningsområde;Färdighet och förmågaVisa på en förmåga att kritiskt och systematiskt integrera kunskaper, och att analysera, bedöma och hantera komplexa frågor i valt forskningsområde;Värderingsförmåga och förhållningssättSöka efter, samt extrahera, nödvändig information från vetenskapliga publikationer inom valt forskningsområde, i syfte att bedöma lämpligheten av presenterade lösningar, tillvägagångssätt och metoder.
	
                Innehåll
	Forskningsinriktad kurs inom ett område relevant för data- och informationsteknik.
Det specifika innehållet bestäms inför varje nytt kurstillfälle och kommer att presenteras på kurshemsidan.
        	  
                Organisation
	Kursen kan innehålla föreläsningar, tutorials, seminarier, och/eller laborationer, och handledning i samband med dessa.
	
                Litteratur
	            Information om kurslitteratur kommer att presenteras på kurshemsidan.
		
                       Examination inklusive obligatoriska moment
       	Examination i denna kurs varierar beroende på kurstillfälle. Examination kan innehålla salstenta eller hemtenta, uppgifter, presentation av genomfört arbete i ett seminarium, eller en kombination av dessa former.Mer detaljerad information om hur kursen examineras ska presenteras på kurshemsidan.

	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	För att vara behörig till kursen ska studenten vara godkänd på minst två kurser i programmering.
	
                Syfte
	Kursen syftar till att ge studenterna grundläggande kunskap i, och första erfarenhet av, mjukvaruutveckling inom ramarna av ett praktiskt projektarbete.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs skall studenten besitta följande kunskaper, färdigheter och förmågor:Kunskap och förståelse, studenten skall kunna:beskriva mjukvaruutveckling som en ingenjörsdisciplin genom att använda relevant terminologibeskriva relationen mellan intressent, produkt och processFärdigheter och förmågor, studenten skall kunna:specificera, implementera och utvärdera ett system utifrån vad olika intressenter anser vara värdefulltlära sig tillsammans med övriga medlemmar i laget de verktyg och APIer som är relevanta för ett projekttillämpa en strukturerad mjukvaruutvecklingsprocess som medlem i ett lagOmdöme och tillvägagångssätt, studenten skall kunna:reflektera över hur processen genomförts i ett projektreflektera över sina egna och gruppens lärandestrategier
	
                Innehåll
	Kursen ger en praktisk introduktion till mjukvaruutveckling. Studenterna kommer att arbeta med ett öppet problem som definieras av en eller flera intressenter utanför studenternas arbetslag. Studenter får alltså inte själva bestämma projektets inriktning. För att hantera den utmaningen lär sig studenterna:en mjukvaruutvecklingsprocess för att strukturera arbetespecificering och utvärdering av krav och samarbete med intressenter för att det som levereras ska anses värdefulltnya teknologier och verktyg och lämpliga sätt att använda de på för att realisera sitt värdeerbjudande genom att utforma egna lärandestrategier organisera sig själva i lag för att nå gemensamma mål med begränsade resurserreflektera över sitt egna arbete och lärande för att möjliggöra kontinuerlig förbättring av sitt egna arbetssätt
        	  
                Organisation
	Kursen organiseras som ett projekt där studenterna arbetar i lag om sex studenter (vanligtvis) för att lösa en realistisk mjukvaruutvecklingsuppgift. Lagen har veckovisa handledningsmöten. Som supplement till projektet ges en serie övningar och föreläsningar som ger fördjupad insikt i uppgiften samt mjukvaruutveckling i stort.
	
                Litteratur
	            Anges på kurshemsidan.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras kontinuerligt varje vecka med en rapport. Rapporten innehåller både en gemensam lagdel och en individuell del för varje lagmedlem för att dokumentera projektets framskridande. Slutbetyget sätts utifrån den sista versionen av rapporten. Exakt hur slutbetyget sätts utifrån rapporten blir specificerat i kurs-PM. Rapportens innehåll är relaterat till lärandemålen och kursens innehåll. Vidare är den uppdelad i olika avsnitt enligt kurs-PM där varje avsnitt måste bearbetas varje vecka för att bli godkänd.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Datorarkitektur (DAT105) eller motsvarande rekommenderas starkt. Studenterna måste förstå funktionen hos en processors pipeline och cachar och måste kunna läsa assemblerkod.
	
                Syfte
	Syftet med kursen är att göra studenterna medvetna om vikten av energieffektiva datorsystem och introducera metoder och tekniker, på nivån datorarkitektur och systemprogram, för att kunna analysera och reducera energianvändningen.  
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- redogöra för vad som påverkar energiförbrukning i datorsystem vad beträffar datorns arkitektur- redogöra för vad som påverkar energiförbrukning i datorsystem vad beträffar kretsstrukturer som är vanligt förekommande i datorsystem- redogöra för metoder för utvärdering av energikonsumtion i datorsystem och hur dessa kan användas för att finna optimeringar- redogöra för metodval vid rapportering av energiförbrukning hos datorsystem och värdera energiförbrukning utifrån samhälleliga och etiska aspekter- tolka omvärldens krav på datorarkitekturers utformning, för att möta samhälleliga behov, såsom lägre energianvändning.
	
                Innehåll
	Kursen syftar till att ge en översikt över de aspekter av datorer som leder till energiförbrukning, allt från elektroniska kretsar till operativsystem och från batteridrivna enheter till superdatorer och datacenter. Till exempel kommer studenterna att lära sig om metoder för att mäta och/eller uppskatta effektförbrukning i olika komponenter inuti en datorarkitektur och de kommer att lära sig om kombinerade arkitektur/kompilatortekniker för att spara ström i datorsystemets minneshierarki.
        	  
                Organisation
	Kursen består av en föreläsningsserie, hemuppgifter, muntliga och skriftliga presentationer och laborationer. En stor del av arbetet för denna kurs kommer att bestå av oberoende instuderingsuppgifter. Studenterna kommer därför att ge täta muntliga presentationer dels för att visa sin förståelse av instuderingsuppgifterna och dels för att skapa diskussioner. Presentationerna kommer också att leda till träning på allt från korta "elevator pitches" till längre föreläsningar (utförda i en grupp) i en rolig, avslappnad och samverkande omgivning. Diskussionerna kommer inte bara att fokusera på teknik, men också på hur tekniken dels påverkar världens koldioxidutsläpp just nu och dels på hur den sannolikt kommer att inverka på samhället i kommande generationer.
	
                Litteratur
	            Artiklar från forskningslitteratur och facktidskrifter.Kaxiras and Martonosi: Computer Architecture Techniques for Power-Efficiency.Utvalda avsnitt ur boken John and Eeckhout: Performance Evaluation and Benchmarking.
		
                       Examination inklusive obligatoriska moment
       	Betyg kommer att fastställas baserat på prestation på de skriftliga och muntliga uppgifterna (40%), laborationer (40%), och hemtentamen (öppen bok) (20%)Kursen ges på engelska. Undervisningen bedrivs genom föreläsningar, övningar och laborationer (vilka vi kommer att använda för att arbeta på presentationsteknik).BetygSlutbetyget beräknas utifrån individuella betyg på de tre typerna tillsammans med sina vikter som nämns ovan.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Datorarkitektur (DAT105) eller motsvarande rekommenderas starkt. Studenterna måste förstå funktionen hos en processors pipeline och cachar och måste kunna läsa assemblerkod.
	
                Syfte
	Syftet med kursen är att göra eleverna medvetna om vikten av hållbarhet inom databehandling och att visa tekniker för att uppnå det på de olika nivåerna i ett datorsystem.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelsebeskriva varför hållbar databehandling är ett viktigt aktuellt ämnebeskriva de elektriska mekanismerna som orsakar strömavbrottbeskriva kretstekniker för att minska strömförlust och påverkan på prestandabeskriva datorarkitektur, minne och sekundära lagringstekniker för att minska energiförbrukningenbeskriva tekniker för operativsystem, runtime-system och applikationer för att minska energiförbrukningenredogöra för vad som påverkar energiförbrukning i datorsystem vad beträffar datorns arkitekturFärdighet och förmågaanvända specifika enheter för att direkt mäta energiförbrukningen i hela systemetanvända inbyggt stöd för monitorering av prestanda för att mäta energiförbrukningen för vissa komponenter i systemetanvända simuleringsverktyg för att uppskatta energiförbrukningen för olika systemkonfigurationerVärderingsförmåga och förhållningssättidentifiera styrkor och svagheter hos olika klasser av datorsystemkomponenter (t ex processor, minne) med avseende på energieffektivitetutvärdera och jämföra olika arkitektur- och systemtekniker med avseende på energieffektivitetredogöra för metoder för utvärdering och rapportering av energiförbrukning i datorsystem och hur dessa kan användas för att finna optimeringarvärdera energiförbrukning utifrån samhälleliga och etiska aspektertolka omvärldens krav på datorarkitekturers utformning, för att möta samhälleliga behov av hållbarhet
	
                Innehåll
	Kursen syftar till att ge en överblick över energieffektivitetsaspekterna i datorsystem och databehandling, allt från elektroniska kretsar till applikationer för system som sträcker sig från små IoT-enheter till stora datacenter. Exempelvis kommer eleverna att lära sig metoder för att mäta och uppskatta energiförbrukningen för olika arkitekturella komponenter, samt arkitektur- och mjukvarutekniker för att spara energi i systemet.
        	  
                Organisation
	Kursen består av en föreläsningsserie, hemuppgifter, muntliga och laborationer inklusive ett projekt utfört i grupp. Studenterna kommer att bli ombedda att presentera resultaten av sina hemuppgifter genom korta muntliga presentationer för att demonstrera sin förståelse och underlätta diskussionen. Diskussionerna kommer inte bara att fokusera på teknik, men också på hur tekniken dels påverkar världens koldioxidutsläpp just nu och dels på hur den sannolikt kommer att inverka på samhället i kommande generationer.
	
                Litteratur
	            Stefanos Kaxiras and Margaret Martonosi. 2008. Computer Architecture Techniques for Power-Efficiency (1st ed.). Morgan and Claypool Publishers.Magnus Själander, Margaret Martonosi, Stefanos Kaxiras. 2014. Power-efficient Computer Architectures: Recent Advances. Morgan and Claypool Publishers.Artiklar från forskningslitteratur och facktidskrifter.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen samt godkända laborationer. Laborationerna utförs i grupper om normalt 2-3 studenter.BetygDen slutliga betyget baseras på resultatet av den skriftliga tentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenter skall ha fullföljt två års studier inom datavetenskap, datateknik eller jämförbar utbildning. Kursdeltagare skall ha genomgått en introduktionskurs i funktionell programmering, företrädesvis användande Haskell eller Erlang. (Kursexempel på Chalmers är TDA452 och TDA555.)
	
                Syfte
	Syftet med kursen är att introducera principer och praktiska tekniker för parallell programmering i ett funktionellt programmeringsspråk. Med parallell programmering menas användning av flera hårdvaruenheter (kärnor eller processorer) för att öka beräkningskapaciteten. Kursen belyser metoder för parallell funktionell programmering i både Haskell och Erlang. Akutell forskning inom ämnet presenteras, och kursen använder vetenskapliga artiklar som kursmaterial.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse1. Förstå betydelsen av skillnad mellan samtidighet (concurrency) och parallellism2. Kunna beskriva metoder för parallellism inom funktionella programspråk i den vetenskapliga litteraturen.Färdigheter1. Skriva, modifiera och testa parallella funktionella program, avsedda för olika datorsystemarkitekturer inklusive multiprocessorer med delat minne, nätverk av servrar, och grafikprocessorer (GPU).2. Tolka exekveringsprofiler av parallella program och åtgärda flaskhalsar.Värderingsförmåga och förhållningssätt1. Identifiera under vilka omständigheter ett funktionellt språk är lämpligt för att läsa ett parallellt programmeringsproblem.2. Välja den form av parallell funktionell programmering som passar för ett givet problem, och förklara valet.
	
                Innehåll
	Kursen behandlar principer och praktiska tekniker för parallell programmering i Haskell och Erlang.Fördelar med parallell funktionell programmering: oföränderlighet (immutability), avsaknad av synkroniseringsfel, (determinism).Att profilera parallella funktionella program: kornighet, flaskhalsar, lokalitet, databeroenden Parallella funktionella algoritmer: "söndra-och-härska".Metoder för att uttrycka parallellism i Haskell: "Eval-monaden", "Par-monaden", parallella strategier, skelett och dataparallellism.Funktionell GPU programmering.Parallellisering och distribuering i Erlang. Skalbarhet. Felhantering i ett massivt parallellt system.Fallstudier av applikationer för parallell funktionell programmering inom industrin, så som "map-reduce" och skalbara "no-SQL" databaser.
        	  
                Organisation
	Kursen ges i form av föreläsningar och obligatoriska laborationer. Gästföreläsningar hålls av externa experter och ledande forskare.
	
                Litteratur
	            Utvalda vetenskapliga artiklar, se kurshemsidan.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U, 3, 4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen bygger på kunskaper inhämtade i tidigare kurser inom digitalteknik- och mikrodatorområdet. För att vara behörig till kursen krävs avslutade kurser i Grundläggande datorteknik och Programmering av inbyggda system
	
                Syfte
	Kursen ska ge studenten grundläggande och allmänna färdigheter i att driva respektive medverka i tekniska utvecklingsprojekt, vilket innebär att arbeta koordinerat i en projektgrupp för planering, genomförande och uppföljning, med stor vikt lagd på skriftlig kommunikation. Kursen ska också ge studenten tekniska färdigheter i att konstruera, integrera och verifiera hård- och mjukvara för processorbaserade system.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	1. konstruera, verifiera och demonstrera ett mikrodatorsystem som består av en mikroprocessor och lämpliga periferienheter (eventuellt också viss elektronik för gränssnitt och ett grafiskt gränssnitt) för att uppfylla specificerad funktionalitet och prestanda.2. skriva ett C-program för en mikroprocessor med fokus på hantering av periferienheter.3. visa basfärdigheter i att driva och följa upp ett tekniskt utvecklingsprojekt som drivs i en grupp om en handfull utvecklare.4. med stöd av grundläggande funktioner hos ett versionshanteringssystem, organisera löpande dokumentation, rapporter samt programkod.5. skriva en grundläggande projektplan inför ett tekniskt utvecklingsprojekt.6. skriva en projektrapport som avslutning på ett tekniskt utvecklingsprojekt samt kritiskt granska ytterligare ett projekt.7. resonera om ställningstaganden och slutsatser, deras bakgrund och deras följder, i det egna projektet samt för ytterligare ett projekt.
	
                Innehåll
	Konstruktion och verifiering av ett mikrodatorsystem, inklusive mikroprocessor och periferienheter, som tas fram för en viss funktionalitet och viss prestanda. Metodik för projektarbete, inklusive planering, drift, uppföljning och versionshantering. Skriftlig framställning i form av dokumentation, protokoll och slutrapport.
        	  
                Organisation
	Initialt introducerar föreläsningarna den mikrodatorteknik som krävs för att göra tekniska bedömningar och val vid konstruktion av systemet. Dessutom belyser de tidiga föreläsningarna hur man driver och dokumenterar tekniska utvecklingsprojekt, till exempel aspekter som rapportskrivning, gruppdynamik och versionshantering.Projektgruppen, som sätts samman av lärarlaget, väljer projekt från ett begränsat antal erbjudna projekt. I samband med valet tilldelas varje projektgrupp en mentor som ger stöd under projektarbetet. De första två läsveckorna ägnar projektgruppen sig främst åt att läsa in sig på teknisk dokumentation och åt att utarbeta en projektplan.Konstruktionsarbetet påbörjas i läsvecka 3 och löper, med stöd av veckovisa projektgruppsmöten och kontinuerlig dokumentation, fram till de avslutande två läsveckorna då arbetet med systemverifiering, demonstrationsförberedelser och slutdokumentation intensifieras.
	
                Litteratur
	            Manualer och datablad.
		
                       Examination inklusive obligatoriska moment
       	Kursen, som drivs på projektform i grupper om 6-8 studenter, leder till individuella betyg (U, 3, 4 respektive 5). Betyget baseras på olika samverkande parametrar, nämligen kvalitet i projektdrift (planering, konstruktionsarbete), teknisk kvalitet (uppfyllande av plan, kvalitet hos slutprodukt) samt kvalitet i skriftlig kommunikation (disciplinärt språk, informationsstruktur, retorik, publikanpassad argumentation). Betygsgrundande bedömning sker för fyra speciella leveranser: 1) projektplan, 2) oppositionskommentar på annan grupps utkast på slutrapport, 3) demonstration av slutprodukt samt 4) slutrapport. Dessutom sker betygsgrundande bedömning vid flera tillfällen under kursens gång med avseende på projektmöteshantering och versionshantering. Resultatet av dessa bedömningar är ett gruppbetyg. Baserat på respektive students bidrag till projektgruppens arbete sätts ett individuellt betyg som kan vara högre eller lägre än gruppbetyget.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Du ska ha klarat av minst en kurs i programmering och trivas med utmanande programmeringsuppgifter (C eller C ++). Du förväntas också ha kunskaper motsvarande en grundläggande kurs från något av områdena: datakommunikation, datanät, operativsystem, algoritmer och datastrukturer eller styrteknik
	
                Syfte
	I den här kursen kommer du att lära dig hur man konstruerar autonoma (förarlösa) fordon som rör sig självständigt och kommunicerar med andra fordon för att koordinera beslut och handlingar. Kursen bygger på lagarbete och projekt där du kommer att simulera fordonssystem och bygga sådana system av miniatyrfordonsmodeller (robotar).
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse
Förvärvat kunskaper inom robotik, inbyggda styrsystem och/eller kommunikationssystem med betoning på praktisk erfarenhet av konstruktion, programmering samt insikter i aktuell forskning och utveckling inom området.
Färdighet och förmåga
Visa förmåga att utveckla och konstruera datoriserade styrsystem, distribuerade algoritmer, program och nätverksprotokoll, anpassade efter användande trafikanters behov, och som möter samhälleliga krav på hållbar utveckling i sociala och ekologiska termer. Visa förmåga att arbeta i team och att samarbeta i grupper med olika konstitutioner och bakgrunder. Visa förmåga att planera en ingenjörs uppgift och att rapportera om framsteg och prestationer inom projekt.
Värderingsförmåga och förhållningssätt
Visa förmåga att planera en ingenjörsuppgift, redogöra för individuella och gruppens prestationer, formulera slutsatser, både muntligt och skriftligt, på ett sätt som kan förstås och delas av ingenjörer med andra specialinriktningar.

	
                Innehåll
	Kursen omfattar  en rad tvärvetenskapliga föreläsningar avsedda att förbereda studenterna och skapa en större gemensam bakgrund hos projektgrupperna.
Dessutom presenterar studenterna (veckovis) lägesrapporter av projekten, vilka åtföljs av diskussioner. Dessa diskussioner, som leds av en expert på området, fokuserar kring lösningar på de problem som eleverna möter.

        	  
                Organisation
	Föreläsningar, projektmöten, rapporter och projektresultat.
	
                Litteratur
	            Relevanta vetenskapliga artiklar kommer att ges på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	För godkänt krävs aktiv närvaro, godkänd rapportering och godkänt projektresultat.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kandidatexamen inom Datavetenskap, eller motsvarande, är ett krav.Studenten vara godkänd på dessa kurser (eller  motsvarande):Grundläggade datorteknik, 7,5hp,Algoritmer, 7,5hp, Datastrukturer 7,5 hp, minst ha 7,5hp programmering.Studenten ska ha avklarade 7,5 hp inom en av dessa  fyra områden: Datorkommunikation, Operativsystem, Datorsäkerhet eller Distribuerade system.
	
                Syfte
	Kursen ger en introduktion till nya typer av cyberfysiska system, som smarta elnät, där data har blivit viktig för anpassningsförmågan och därmed det ökande beroendet av informations- och kommunikationsteknik (IKT). Ämnen i kursen fokuserar på nya metoder i skärningspunkten mellan datavetenskap och andra områden, för att stödja distribuerade system, databehandling och säkerhet.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter godkänd kurs ska studenten kunna:1.	Kunskap och förståelse:lista cyberfysiska system, och i synnerhet kompletterande IKT metoder däri för att stödja anpassningsförmåga och cybersäkerhet baserat på studentens valda område, till exempel design av protokoll eller algoritmer, säkerhetsfrågor, databehandling och utvärderingsmetodik.diskutera aktuell forskning och utveckling av sådana cyberfysiska system, speciellt med hänsyn till krav på hållbar utveckling i termer av säkerhet, ekonomi och ekologi.2.	Färdighet och förmåga:utforma och analysera metoder, algoritmer och protokoll för adaptiva och säkra cyberfysiska system, såsom nätverk i smarta kraftnät.förklara komplexa algoritmer och koncept.planera och organisera ett projekt som ska lösas i grupp och dokumentera arbetet och resultatet i en rapport.3.	Värderingsförmåga och förhållningssätt:presentera ämnesspecifika komplexa begrepp och terminologi för en liten publik.förbättra färdigheter i att arbeta i grupp och driva ett mindre gemensamt projekt, förbättra färdigheter i teknisk rapportskrivning.bedöma relevans och kvalite av specifik ämnesliteratur

	
                Innehåll
	Innehållet fokuserar på metoder för att hantera stora datamängder, distribuerad databehandling och system, informations- och systemsäkerhet, nätverk och datorkommunikation i sammanhanget av nya typer av cyberfysiska system. Lärare ger översiktsföreläsningar för att presentera de områden som ingår i kursen, och industrirepresentanter beskriver sedan faktiska system och associerade problem med dessa. Studenterna kommer själva att ge mer ämnesspecifika presentationer som rör deras valda projekt för att beskriva på djupet ett urval av forskningsrelaterade frågor.Vanligtvis inkluderar föreläsningarna en introduktion och överblick av nya typer av cyberfysiska system, t.ex. smarta elnät. Öppna forskningsproblem i samband med distribuerade och effektiv databehandling och IT-säkerhet diskuteras, t.ex. genom föreläsningar om kommunikation, ¿streaming,¿ säkerhet och frågor med bäring på personlig integritet anpassade för detta område. Exempel på samhällskritiska cyberfysiska system presenteras, t.ex. smarta elnät från både transmissions och distributionsperspektiv. Kursen inleds med en introduktion till kraftsystem, för att ge eleverna tillräckliga kunskaper om terminologi i vetenskapliga artiklar rörande smarta elnät.
        	  
                Organisation
	Denna projektkurs inkluderar en kort sekvens av inledande föreläsningar av lärare och inbjudna industrirepresentanter, för att förbereda studenterna och ge projektgrupperna en bredare gemensam bakgrund. Studenterna ska välja avancerade ämnen relaterade till en projektidé för att studera en rad problem på djupet. Koncept och frågeställningar med potentiella lösningar presenteras sedan av studenterna för sina kurskamrater med en gemensam diskussion i klassrummet. Studenterna ska dessutom skriva en individuell rapport om sitt valda ämne, samt en gemensam projektrapport inom gruppen
	
                Litteratur
	            Övergripande kurslitteratur kommer att publiceras senast 8 veckor innan kursstart, medan den detaljerade listan för att stödja studentens projekt bestäms under första kursveckan.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en skriftlig projektrapport, och muntlig presentation och demonstration av resultatet. Den skriftliga rapporten utförs normalt i grupper om 2-3 studenter. Studenterna måste också skriva en kortare individuell rapport där de reflekterar över innehållet i de vetenskapliga artiklar som valts som grund för projektstöd och för den muntliga presentationen.För att bli godkänd på kursen förväntas studenten också delta aktivt i seminarier, inklusive presentationer och diskussioner rörande andra studenters projekt.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kunskaper motsvarande sammanlagt minst två års studier i datatekniska och datavetenskapliga ämnen. Kursen är endast öppen för studenter inskrivna på MPALG.
	
                Syfte
	Kursens syfte är att komplettera den datatekniska/datavetenskapliga läroplanen med allmänna kunskaper som är relevanta i studenternas framtida yrkesroller. Studenten skautveckla sitt vetenskapliga skrivande genom att studera, kritiskt analysera och sammanfatta utvalda, välskrivna vetenskapliga artiklar,öva på teknisk kommunikation i skrift för olika målgrupper,diskutera etiska frågor som rör ämnen inom datavetenskap,lära sig om forsknings- och publiceringsetik. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	* extrahera (ta fram) och summera rådande kunskaper inom ett specifikt område inom Datavetenskap från original artiklar, beskriva ett vetenskapligt eller tekniskt problem som behandlas inom ett specifikt ämnesområde i Datavetenskap, identifiera det väsentliga i en artikel,* skriva välstrukturerad och välformulerad text med ordentlig vetenskaplig argumentation,* förklara och kommunicera en teknisk frågeställning till läsare som inte nödvändigtvis är experter i området,* planera ett forskningsprojekt (masteruppsats), baserat på analys av ett problem och med ett väl avgränsat mål, samt förutspå dess genomförbarhet,* kritiskt värdera vetenskapliga källor,* analysera och värdera valet av lösningsmetod,* identifiera möjliga etiska och samhälleliga effekter av en metod, konstruktion eller ett system,* värdera möjliga beslut, baserat på generella etiska värden,* tillämpa etiska principer för vetenskapligt skrivande, inklusive korrekt citat och användning av statistik.
	
                Innehåll
	* tekniskt skrivande inom Datavetenskap, vilket praktiseras på ett fritt valt ämnesområde och på ett forskningsförslag* strukturering av en vetenskaplig text* kommunicering av ett ämnesområde till olika målgrupper* teorier om etik, med exempel från det datavetenskapliga området* identifiering och analys av etiska och samhälleliga frågeställningar* etik i forskning och publicering
        	  
                Organisation
	Inledande föreläsningar om vetenskapligt skrivande och etik, flera skrivövningar med handledning.
	
                Litteratur
	            Se separat litteraturlista. 
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom ett skriftligt förslag (exjobbsförslag eller ett forskningsförslag) som genomförs normalt i par, och individuella skriftliga inlämningsuppgifter. På kursen ges något av betygen Godkänd (G) och Underkänd (U). För att bli godkänd på kursen krävs att studenten är godkänd på både förslaget och de individuella skriftliga inlämningsuppgifterna.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Studenten ska ha klaraten kurs i diskret matematiktvå andra kurser i matematik (exampelvis Linjär algebra och Analys)två kurser i datateknik (exemeplvis två kurser i programmering)ytterligare tre kurser (22.5hp) inom matematik, data eller IT
	
                Syfte
	Kursen presenterar klassiska matematiska ämnen från ett datavetenskaligt perspektiv: genom att specificera de introducerade begreppen, vara uppmärksam på syntax och typer, och slutligen genom att bygga domänspecifika språk för vissa av de matematiska områden som nämns nedan.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelsedesigna och implementera ett domänspecifikt språk (DSL) för en ny domänstrukturera delområden inom matematik i termer av DSLförklara de centrala begreppen i grudläggande reell och complex anays, algebra och linjör algebraFärdighet och förmågautveckla lämplig notation för matematiska konceptgenomföra och kalkylera bevisanvända potensserier för att lösa differentialekvationeranvända Laplace-transformer för att lösa differentialekvationerVärderingsförmåga och förhållningssättdiskutera och jämföra olika implementationer av matematiska begrepp
	
                Innehåll
	Föreläsningarna kommer att behandla:Introduktion till funktionell programmering, programkalkyl och bevisIntroduktion till domänspecifika språk (DSL) med linjär algebra som exempelDSL och matematik: kategoriteori som exempelReell analys: medelvärdessatser, Taylors formulerReell analys: ett DSL för potensserierMer linjär algebra: egenvärden och optimering
        	  
                Organisation
	Kursens upplägg inkluderar föreläsningar, seminarier, fallstudier (övningar) och grupparbete.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras i form av en individuellt genomförd skriftlig tentamen vid slutet av kursen och genom skriftliga inlämningar som genomförs av grupper med (normalt 3-4) studenter.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	120 hp i datavetenskap eller matematik eller
motsvarande samt grundläggande kunskaper i logik och funktionell programmering.
	
                Syfte
	Kraftfulla och flexibla typsystem är en viktig aspekt för moderna programmeringsspråk. Denna kurs ger en introduktion till detta område. Bland annat introducerar vi begreppet "beroende typ", dvs. en typ som kan bero på värden av en annan typ. Beroende typer har många användningsområden. Genom att identifiera påståenden och typer (Curry-Howard identifieringen) kan man uttrycka i stort sett vilken egenskap som helst hos ett program. I kursen får studenten lära sig använda ett interaktivt programmeringssystem för beoende typer. Kursen ska ge breda och gedigna kunskaper om hur typsystem för programspråk är uppbyggda, och dessutom ge exempel på typbaserade tekniker inom datavetenskapen. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	hur man programmerar i ett funktionellt programmeringsspråk med beroende typerhur man bevisar teorem i ett funktionellt programmeringsspråk med beroende typerförstå hur man använder deduktionssystem för att presentera typsystem och beräkningsregler för programmeringsspråk
	
                Innehåll
	Introduktion till operationell semantik och typsystemBeroende typerCurry-Howard identifieringen av påståenden och typerProgrammering i Agda, en bevisassistentPresentation av forskningsartiklar om typsystem
        	  
                Organisation
	Undervisning ges i form av föreläsningar, övningar och handledning.
	
                Litteratur
	            Types and Programming Languages by Benjamin Pierce, MIT PressVerified Functional Programming in Agda by Aaron Stump, Association for Computing Machinery and Morgan & Claypool
		
                       Examination inklusive obligatoriska moment
       	Hemtentamen för betyg 3, utöver detta muntlig tentamen för betyg 4 eller 5Presentation av avancerat ämne eller forskningsresultat om typsystem eller av programmeringsprojekt i det beroende typade språket Agda
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen DAT256 Software Engineering Project, kursen DAT355 Kravhantering och användarupplevelse, eller motsvarande.
	
                Syfte
	Syftet med kursen är att utrusta studenter med grundläggande kunskaper och färdigheter kring mjukvaruarkitektur och dess roll i utveckling och underhåll av mjukvarusystem.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelsebeskriva rollen som en arkitekt i ett mjukvaruutvecklingsprojekt, och vad som kan förväntas från en sådan personförklara gemensamma kvalitetskrav, såsom prestanda, säkerhet och modifierbarhetbeskriva olika arkitekturstilar och hur de relaterar till arkitekturens specifika kvalitetsegenskaperFärdigheter och förmågadokumentera arkitekturer med hjälp av etablerade metoderinhämta intressenters krav och beskriva dessa som kvalitetskravuttrycka kvalitetskrav med hjälp av kvalitetsscenarierskapa en arkitekturdesign av ett system baserat på en fallbeskrivning i naturligt språkVärderingsförmåga och förhållningssättresonera om hur olika arkitekturstilar, taktiker eller designalternativ uppfyller kvalitetsmålen för ett system
	
                Innehåll
	Kursen behandlar olika definitioner av mjukvaruarkitektur. Vi diskuterar rollen och relevansen av programvaruarkitektur vid olika stadier hos utvecklingsprojekt; vi diskuterar förhållandet mellan arkitektur, systemkrav och systemimplementering; vi diskuterar kvalitetsegenskaper hos mjukvaruarkitektur; vi diskuterar olika arkitekturstilar och -taktiker; vi diskuterar allmänna principer för programdesign; vi diskuterar hur man dokumenterar och utvärderar mjukvaruarkitektur.
        	  
                Organisation
	Undervisningen består av föreläsningar, övningar och examinationer, liksom handledning i samband med övningarna. Undervisningen ges på Campus Lindholmen.
	
                Litteratur
	            Course literature to be announced the latest 8 weeks prior to the start of the course.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen, samt obligatoriska skriftliga inlämningsuppgifter. Delmomentet inlämningsuppgifter examineras baserat på lösningsförslag på obligatoriska problem som lämnas in under kursens gång samt utifrån studentens individuella bidrag till gruppens arbete. Studenten ska lämna in själv- och kamratbedömningar under kursens gång vilka kommer vara del av underlaget för bedömningen av studentens individuella bidrag i projektet.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen DAT017 - Machine oriented programming eller liknande kurs är ett krav. Kursen TDA384 - Principer för parallell programmering är rekommenderad.
	
                Syfte
	Kursen behandlar parallella programmeringsmodeller, effektiva programmeringsmetoder och verktyg för prestandaoptimering med målet att utveckla högeffektiva parallella program.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- Lista de olika typerna av parallella datorarkitekturer, programmeringsmodeller och paradigm, samt olika system för synkronisering och kommunikation.
- Lista de typiska stegen för att parallellisera en sekventiell algoritm
- Ange olika metoder för analysmetoder av parallella programsystem

- Använda metoder för prestandaanalys för att bestämma flaskhalsarna vid exekverandet av ett parallellt program
- Bestämma den övre gränsen för prestanda för ett parallellt program

- För en specifik programvara, specificera de resultat flaskhalsar som begränsar effektiviteten hos parallellkoden och välj lämpliga strategier för att övervinna dessa 
- Utforma energibesparande parallelliseringsstrategier baserade på en specifik algoritm struktur och datorsystemsorganisation
- Argumentera för vilka metoder för prestandaanalys som är viktiga, givet en specifik kontext
	
                Innehåll
	Kursen består av ett antal föreläsningar och laborationer. Föreläsningarna börjar med en översikt över parallella datorarkitekturer och parallella programmeringsmodeller och paradigmer. En viktig del av diskussionen är mekanismer för synkronisering och datautbyte. Därefter behandlas prestandaanalys av parallella program. Kursen fortsätter med en diskussion om verktyg och tekniker för att utveckla parallella program enligt modellen för ett delat adressutrymme. Detta avsnitt behandlar populära programmeringsmiljöer som pthreads och OpenMP. Därefter diskuterar kursen parallella program för distribuerat adressutrymme. Fokus i denna del ligger på Message Passing Interface (MPI). Slutligen diskuterar vi programmeringsmetoder för att exekvera applikationer på acceleratorer såsom GPUer. Den här delen introducerar programmeringsmiljön CUDA (Compute Unified Device Architecture).Föreläsningarna kompletteras med en uppsättning laborationer där deltagarna fördjupar sig i ämnesområden som har tagits upp under föreläsningar. Under laborationerna parallelliserar deltagarna exempelprogram över en rad parallella arkitekturer, och använder verktyg för prestandaanalys för att upptäcka och ta bort flaskhalsar i parallella implementeringar av programmen.

        	  
                Organisation
	Undervisningen består av teoriinriktade föreläsningar och laborationer där deltagarna utvecklar kod för olika typer av parallella datorsystem
	
                Litteratur
	            Parallel Programming for Multicore and Cluster Systems, Thomas Rauber, Gudula Rünger (2nd edition, 2013) https://www.springer.com/gp/book/9783642378003
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom individuell skriftligt tentamen som kommer att hållas i en tentamen sal samt ett skriftlig laboration rapport som skall lämnas in i grupper av tvåDet slutliga betyget för kursen är baserat på det vägda medelvärdet av betygen på delkurserna.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	7,5 hp diskret matematik (till exempel TMV200 eller TMV210).7,5 hp funktionell programmering (till exempel TDA452 eller TDA555). 
	
                Syfte
	Kursen handlar om beräkningar: hur de kan modelleras, och vad som kan beräknas.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter godkänd kurs ska studenten kunna definiera begreppet beräkningsbar funktion,förklara Church-Turings hypotes,förklara sambandet mellan induktivt definierade mängder, primitiv rekursion, och bevismetoden strukturell induktion,bevisa att mängder är uppräkneliga eller ouppräkneliga, till exempel genom att använda diagonalisering,koda induktivt definierade mängder på ett sådant sätt att element i dessa mängder kan användas som indata eller utdata för program i en eller flera beräkningsmodeller,implementera program, i synnerhet interpretatorer, korrekt i en eller flera beräkningsmodeller,bevisa att funktioner är eller inte är beräkningsbara i några beräkningsmodeller,analysera program hörandes till några beräkningsmodeller, ochmanipulera och analysera beräkningsmodeller.
	
                Innehåll
	För att undvika onödiga komplikationer väljer man ofta att studera beräkningar via förenklade, men kraftfulla, modeller. De här modellerna kan till exempel vara enkla programmeringsspråk (som λ-kalkyl), eller idealiserade datorer (som Turingmaskiner). Kursen behandlar flera sådana modeller, både "imperativa" och "funktionella".En eller flera modeller kommer att användas för att utforska gränserna för vad som kan beräknas: problem som inte kan lösas (inom en viss modells ramar), och program som kan köra godtyckliga program (modellerade på ett visst sätt).Kursen innehåller också en diskussion av Church-Turings hypotes, en förmodan om att en funktion är beräkningsbar på ett visst intuitivt sätt endast om den kan definieras i en av flera beräkningsmodeller.
        	  
                Organisation
	Föreläsningar och övningar.
	
                Litteratur
	            Kurslitteratur kommer att publiceras senast 8 veckor innan kursstart.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen samt individuella inlämningsuppgifter.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Förkunskapskravet för kursen är att ha avklarat en programmeringskurs, 7,5hp.
	
                Syfte
	Kursens syfte är att ge studenter grundläggande kunskap i metoder för design och evaluering av gränssnitt.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse    Beskriva faser i designprocessenBeskriva metoder för att arbeta med människa-datorinteraktionBeskriv likheter och skillnader i design för olika användargrupperBeskriva överväganden för att involvera användare i designprocessenFärdigheter och förmågor    Designa speciellt anpassat för vissa användargrupperDesigna med avseende på användareÄndra designmetoder för att passa användarnas kontext och behovIdentifiera användarnas behov och kravVärderingsförmåga och förhållningssätt    Analysera design utifrån användarnas behovGöra en välgrundat utvärdering av de etiska och samhälleliga konsekvenserna av en designKritisera design och designprocesser med avseende på användarnas behov

	
                Innehåll
	Människa-datorinteraktion (HCI) är ett område som
arbetar med konstruktion, utvärdering och implementering av interaktiva
datorsystem för mänskliga användare och samt studier av de fenomen som uppstår
i denna kontext. I människa-datorinteraktion är det huvudsakliga målet att göra
analyser, fastställa krav, design och utvärdera interaktiva datorbaserade
system och produkter med avseende på användaren. Syftet med kursen är att ge
studenten grundläggande kunskaper om människans kognition och relevant metodik.
Kursen kommer att omfatta en bred kunskap om utformningen av interaktiva
datorsystem och gränssnittsdesign.
        	  
                Organisation
	Kursen bygger på föreläsningar, övningar, projekt och en individuell tentamen.
	
                Litteratur
	            Se kurshemsida
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom två
moduler, nämligen:Övningar och projekt, 3 credits (godkänd/underkänd)En inlämningsuppgift bestående av två delar: en del som fokuserar på
litteratur och en del som fokuserar på reflektioner angående projektarbetet,
4,5 credits (underkänd,3,4,5)I fall studenten inte blir godkänd på inlämningsuppgiften måste den skriva en ny inlämningsuppgift. Slutbetyget för kursen baseras på betyget för inlämningsuppgiften.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kandidatarbetet får påbörjas tidigast under programtermin 6. Programansvarig beslutar vilka kandidatarbeten som är tillåtna för programmets studenter. För att säkerställa ett minimum av förkunskaper ska studenten uppfylla minst 105 hp av de tre första åren utifrån aktuell programtillhörighet. Avstämning sker efter att läsperiod 1 i årskurs 3 har inrapporterats till LADOK.
	
                Syfte
	I kandidatarbetet ska studenten integrera, fördjupa och utveckla sina kunskaper och färdigheter inom ett begränsat område av det som behandlats inom tidigare genomförda kurser inom programmet. Kandidatarbetet syftar också till att ge kunskaper och färdigheter i ingenjörsmässigt och vetenskapligt arbetssätt.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap, förståelse, färdighet och förmågaformulera och avgränsa en problemställning inom det valda ämnetplanera arbetet för att lösa och avrapportera problemet med givna resursersöka, inhämta och värdera tillgänglig litteratur och annan bakgrundsinformationintegrera och utveckla kunskap inom den valda problemställningendokumentera projektets genomförande i projektdagbokenreflektera över hur gruppen samverkat för att uppfylla gemensamma målpresentera kandidatarbetet i relation till den valda problemställningen i skriftlig och muntlig formVärderingsförmåga och förhållningssättkritiskt granska, värdera och konstruktivt ifrågasätta ett annat kandidatarbete avseende frågeställning, genomförande och resultatbedöma om samhälleliga och etiska aspekter behöver beaktas för vald problemställning och där det är relevant, analysera dessa aspekter i uppsatsen/rapportenreflektera kring behovet av ytterligare kunskap och ge förslag till framtida problemställningar i ämnet
	
                Innehåll
	Kandidatarbetets huvuddel utgörs av ett projektarbete. Studenten väljer själv ämnesområde genom sitt val bland de projekt som erbjuds. För att underlätta och stödja kandidatarbetet behandlas även ett antal generella kompetenser, som omsätts i praktisk tillämpning inom projektet. Särskild vikt läggs vid träning i att rapportera ett eget arbete, både muntligt och genom att självständigt författa en del av en uppsats/rapport som ska vara läsvärd för en tänkt läsekrets.
        	  
                Organisation
	Kandidatarbetet genomförs till största delen som ett projektarbete och arbetet bedrivs i en projektgrupp om max sex personer. Vid fastställda tider ges handledning inom projektets ämnesområde samt inom de generella kompetenserna. I kandidatarbetet ingår delrapporteringar som ska lämnas in av projektgruppen för kontinuerlig kontroll och återkoppling av arbetets fortskridande.
	
                           Examination inklusive obligatoriska moment
       	Kandidatarbetet redovisas i en skriftlig uppsats/rapport enligt gällande normer för vetenskaplig och teknisk rapportering samt presenteras muntligt och försvaras vid ett seminarium. Den enskilda studenten ska skriva en tydligt identifierbar del av en gemensam uppsats/rapport vilket ska beskrivas i projektdagboken. Studenten ska även kritiskt granska ett annat kandidatarbete, dels i en skriftlig opposition, dels genom att vara opponent under det seminarium då detta presenteras. Vid examination fästs vikt vid kvalitet på projektrapport, projektdagbok, muntlig presentation och opposition, kopplat till kandidatarbetets lärandemål.Examinator ansvarar för att uppsatsen/rapporten kontrolleras i ett plagiatverktyg.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas.Studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas.Förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade. Examinator formulerar och kontrollerar sådana förkunskapskrav.
	
                Syfte
	Examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper, förståelse, förmågor och förhållningssätt inom utbildningens sammanhang. Examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper. I examensarbetet på ett civilingenjörs-/arkitekt eller teknologie masterprogram betonas det tekniska/naturvetenskapliga/ konstnärliga innehållet. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs-, arkitekt- respektive teknologie masterexamen som formulerats i Chalmers lokala examensordning. (Dnr C2007/723).
Specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna:använda väsentligt fördjupade kunskaper inom huvudområdet/ inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete,välja och motivera sitt val av metod i projektet, inom huvudområdet/ inriktningen för utbildningen,bidra till forsknings- och utvecklingsarbete, och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt/industriellt/arkitektoniskt sammanhang.med helhetssyn kritiskt, självständigt och kreativt identifiera, formulera och hantera komplexa frågeställningar,planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar, samt kunna utvärdera detta arbete,skapa, analysera och kritiskt utvärdera olika tekniska/arkitektoniska lösningar,kritiskt och systematiskt integrera kunskap,på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser, samt den kunskap och de argument som ligger till grund för dessa,inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga, etiska och ekologiska aspekter skall beaktas, samtbeakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete, såväl vad avser hur arbetet genomförs, som vad som undersöks/utvecklas.identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande, där så är relevant.
Vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt/civilingenjör/teknologie master
	
                    Organisation
	InitieringExamensarbetet kan genomföras av en student eller två studenter tillsammans.Studenten/studenterna kontaktar examinator. Alternativt kan masterprogramansvarig ge förslag på examinator.Studenterna utarbetar en kortfattad skriftlig beskrivning av arbetet. Denna beskrivning skall bifogas registreringsunderlaget. Beskrivningen bör innehålla bakgrund, syfte, mål och eventuellt metod.Examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete, och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete. Examinator signerar registreringsunderlaget.Masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget. MPA skickar in registreringsunderlaget till Studentcentrum.Studentcentrum genomför registrering i Ladok.
PlaneringStudenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen/uppgiften. Planeringsrapporten skall innehålla bakgrund, syfte, mål, avgränsningar, metod och tidsplan för examensarbetets genomförande. Planeringsrapporten lämnas till examinator för godkännande.
HandledningUnder arbetets gång har studenten/erna rätt till regelbunden handledning.
DelredovisningFör 60 hp examensarbeten skall studenten/studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig (MPA). Godkänd delredovisning innebär att 30 hp inrapporteras i Ladok.
Skriftlig redovisningExamensarbetsrapporten skall skrivas på engelska.Utformning av examensarbetets framsida mm skall ske enligt mall "Utformning av examensarbete" vid Chalmers. Se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/Sidor/utformning-rapporter-exjobb-kand.aspx.Examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg.Chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten. Se Chalmers arbetsordning: C2008/271.Examensarbetsrapporten skall publiceras elektroniskt i Chalmers Publication Library (CPL) enligt de regler som gäller för elektronisk publicering av examensarbeten vid Chalmers.När två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten.
Muntlig redovisningDen muntliga redovisningen inleds med att studenterna presenterar sitt arbete. Därefter följer opposition och diskussion.Den muntliga presentationen skall utföras på engelska. Redovisningen skall ta maximalt 60 minuter i anspråk varav ungefär 1/3 av tiden bör ägnas åt opposition och diskussion.Vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven, men ej publicerad. Detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten.Muntlig redovisning inklusive opposition skall genomföras på Chalmers. Ytterligare redovisning kan vid behov genomföras på företag. I undantagsfall, till exempel då examensarbetet genomförts utomlands, kan examinator medge undantag från kravet på muntlig redovisning, opposition och närvaro på andra redovisningar vid Chalmers.Presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum. Presentationen skall ske inom perioden 15 augusti till 15 juni, under normal arbetstid.
	
                           Examination inklusive obligatoriska moment
       	För att examensarbetet skall godkännas krävs att följande delmoment genomförts:Godkänd planeringsrapportGodkänd rapportGodkänd presentation och försvar vid examensarbetsredovisningenGodkänd opposition på ett annat masterexamensarbeteNärvaro vid två andra examensarbetsredovisningarFör examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden. Examinator beslutar om form för delredovisning. Godkänd delredovisning leder till att 30 hp inrapporteras i Ladok.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenter i de femåriga civilingenjörs- och arkitektutbildningarna skall ha uppnått minst 225 hp innan examensarbetet påbörjas.Studenter som enbart läser ett masterprogram skall ha uppnått minst 45 hp inom masterprogrammet innan examensarbetet påbörjas.Förutom de generella poängkraven skall för det specifika examensarbetets genomförande nödvändiga förkunskapsgrundande kurser vara avklarade. Examinator formulerar och kontrollerar sådana förkunskapskrav.
	
                Syfte
	Examensarbetet syftar till att studenten skall utveckla fördjupade kunskaper, förståelse, förmågor och förhållningssätt inom utbildningens sammanhang. Examensarbetet skall ligga i slutet av utbildningen och innebära en fördjupning och syntes av tidigare förvärvade kunskaper. I examensarbetet på ett civilingenjörs-/arkitekt eller teknologie masterprogram betonas det tekniska/naturvetenskapliga/ konstnärliga innehållet. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Lärandemålen för masterexamensarbetet utgår från de mål för civilingenjörs-, arkitekt- respektive teknologie masterexamen som formulerats i Chalmers lokala examensordning. (Dnr C2007/723).
Specifika lärandemål som ska fullföljas i masterexamensarbetet är att studenten skall kunna:använda väsentligt fördjupade kunskaper inom huvudområdet/ inriktningen för utbildningen i sitt projekt och på ett vetenskapligt korrekt sätt relatera till aktuellt forsknings- och utvecklingsarbete,välja och motivera sitt val av metod i projektet, inom huvudområdet/ inriktningen för utbildningen,bidra till forsknings- och utvecklingsarbete, och kunna relatera sitt arbete till relevant vetenskapligt respektive tekniskt/industriellt/arkitektoniskt sammanhang.med helhetssyn kritiskt, självständigt och kreativt identifiera, formulera och hantera komplexa frågeställningar,planera och med adekvata metoder genomföra kvalificerade uppgifter inom givna ramar, samt kunna utvärdera detta arbete,skapa, analysera och kritiskt utvärdera olika tekniska/arkitektoniska lösningar,kritiskt och systematiskt integrera kunskap,på engelska muntligt och skriftligt klart redogöra för och diskutera sina slutsatser, samt den kunskap och de argument som ligger till grund för dessa,inom ramen för det specifika projektet identifiera vilka frågeställningar som behöver besvaras för att relevanta samhälleliga, etiska och ekologiska aspekter skall beaktas, samtbeakta och diskutera etiska aspekter på forsknings- och utvecklingsarbete, såväl vad avser hur arbetet genomförs, som vad som undersöks/utvecklas.identifiera och diskutera behov av ytterligare belysning av olika aspekter av projektet före beslut eller genomförande, där så är relevant.
Vid genomfört examensarbete ska studenten ha visat sådan kunskap och förmåga som krävs för att självständigt arbeta som arkitekt/civilingenjör/teknologie master
	
                    Organisation
	InitieringExamensarbetet kan genomföras av en student eller två studenter tillsammans.Studenten/studenterna kontaktar examinator. Alternativt kan masterprogramansvarig ge förslag på examinator.Studenterna utarbetar en kortfattad skriftlig beskrivning av arbetet. Denna beskrivning skall bifogas registreringsunderlaget. Beskrivningen bör innehålla bakgrund, syfte, mål och eventuellt metod.Examinator kontrollerar att studenterna uppfyller de generella och specifika förkunskapskraven för examensarbete, och att det föreslagna examensarbetet motsvarar lärandemålen för examensarbete. Examinator signerar registreringsunderlaget.Masterprogramansvarig kontrollerar att examensarbetet faller inom masterprogrammets huvudområde och signerar registreringsunderlaget. MPA skickar in registreringsunderlaget till Studentcentrum.Studentcentrum genomför registrering i Ladok.
PlaneringStudenterna skall skriva en planeringsrapport som skall precisera problembeskrivningen/uppgiften. Planeringsrapporten skall innehålla bakgrund, syfte, mål, avgränsningar, metod och tidsplan för examensarbetets genomförande. Planeringsrapporten lämnas till examinator för godkännande.
HandledningUnder arbetets gång har studenten/erna rätt till regelbunden handledning.
DelredovisningFör 60 hp examensarbeten skall studenten/studenterna efter tjugo arbetsveckor avrapportera arbetets status till examinator och masterprogramansvarig (MPA). Godkänd delredovisning innebär att 30 hp inrapporteras i Ladok.
Skriftlig redovisningExamensarbetsrapporten skall skrivas på engelska.Utformning av examensarbetets framsida mm skall ske enligt mall "Utformning av examensarbete" vid Chalmers. Se https://student.portal.chalmers.se/sv/chalmersstudier/kandidat-och-examensarbete/examensarbete/Sidor/utformning-rapporter-exjobb-kand.aspx.Examensarbetsrapporten skall kontrolleras mot ett plagiatverktyg.Chalmers policyer för offentlighet och sekretess gäller för examensarbetets genomförande samt för publicering av rapporten. Se Chalmers arbetsordning: C2008/271.Examensarbetsrapporten skall publiceras elektroniskt i Chalmers Publication Library (CPL) enligt de regler som gäller för elektronisk publicering av examensarbeten vid Chalmers.När två studenter utför examensarbetet tillsammans skall arbetsfördelningen tydligt framgå av examensarbetsrapporten.
Muntlig redovisningDen muntliga redovisningen inleds med att studenterna presenterar sitt arbete. Därefter följer opposition och diskussion.Den muntliga presentationen skall utföras på engelska. Redovisningen skall ta maximalt 60 minuter i anspråk varav ungefär 1/3 av tiden bör ägnas åt opposition och diskussion.Vid tidpunkten för den muntliga redovisningen skall rapporten vara färdigskriven, men ej publicerad. Detta för att medge att synpunkter som framkommer vid redovisningen inarbetas i rapporten.Muntlig redovisning inklusive opposition skall genomföras på Chalmers. Ytterligare redovisning kan vid behov genomföras på företag. I undantagsfall, till exempel då examensarbetet genomförts utomlands, kan examinator medge undantag från kravet på muntlig redovisning, opposition och närvaro på andra redovisningar vid Chalmers.Presentationen av examensarbetet skall annonseras vid den aktuella institutionen minst två veckor före presentationsdatum. Presentationen skall ske inom perioden 15 augusti till 15 juni, under normal arbetstid.
	
                           Examination inklusive obligatoriska moment
       	För att examensarbetet skall godkännas krävs att följande delmoment genomförts:Godkänd planeringsrapportGodkänd rapportGodkänd presentation och försvar vid examensarbetsredovisningenGodkänd opposition på ett annat masterexamensarbeteNärvaro vid två andra examensarbetsredovisningarFör examensarbeten omfattande 60 hp skall en delredovisning göras efter halva tiden. Examinator beslutar om form för delredovisning. Godkänd delredovisning leder till att 30 hp inrapporteras i Ladok.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenten skall ha god förståelse av en dators konstruktion och grundläggande kunskaper i maskinnära programmering samt ha kännedom om begrepp som assembler och avbrott etc, dvs innehållet i någon kurs i maskinorienterad programmering. Studenten behöver också ha kunskaper om datastrukturer t ex träd, länkade listor, hashtabeller, dvs innehållet i en kurs i datastrukturer samt programmeringskunskaper (minst 7,5 kurspoäng i dataprogrammering). Kunskap om grundläggande sannolikhetslära kan vara en fördel, men kan också inhämtas parallellt med denna kurs.
	
                Syfte
	Operativsystem finns överallt där datorsystem finns; inte bara i stationära datorer och servrar utan också i fordon, telefoner och inbyggda industriella system. Kursen ger en introduktion till design och implementering av operativsystem. I synnerhet är syftet: att förklara strukturen och funktionen i ett operativsystem och dess samarbete med datorsystem det stöder; att belysa viktiga operativsystemaspekter och algoritmer i operativsystemets implementationer; att åtfölja med konkreta exempel och att förbereda studenterna för kommande kurser.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter kursen skall studenterna kunna visa att de har kunskaper om och förståelse för: 1. Grundläggande funktioner i moderna operativsystem 2. Grundläggande begrepp och algoritmer rörande operativsystems implementering. 3. Implementeringen av enklare delar av ett operativsystem Studenterna skall också kunna: * uppskatta design utrymme och kompromisser involverade i genomförandet av ett operativsystem. * Skriva C-program som anropar operativsystemet på systemanropsnivå. * Implementera någon enklare rutin i ett operativsystem i programspråket C. * en del programmering med konstruktioner multitrådsprogrammering synkronisering (t.ex. miljö språk: C + +, Java).
	
                Innehåll
	Kursen ger en introduktion till design och implementering av operativsystem. Exempel på avsnitt som behandlas är: Processbegreppet, Parallella processer, resurshantering, hantering av låsningssituationer (deadlock), hantering av primärminne, virtuellt minne, CPU schemaläggning, skivminnen, filsystem, distribuerade filsystem och mikrokärnor, virtual machines, säkerhet- och skyddsmekanismer. Kursen presenterar viktiga komponenter i operativsystem, och kompletterar denna diskussion med hur deras slutliga utformning och implementering utvecklades från historiska till moderna mobila OS. De olika begreppen illustreras med exempel från Unix, Linux, Windows och operativsystem for mobila apparater. 
        	  
                Organisation
	Undervisningen bedrivs i from av föreläsningar, lektionsövningar och laborationer. Laborationerna avser att ge erfarenhet av program som anropar operativsystemet på systemanropsnivå samt programmering av enklare interna rutiner i ett operativsystem. Exempel på laborationer är en kommandotolk för unix samt att programmera vissa interna delar av ett operativsystem som t.ex. en schemaläggare och delar av ett virtuellt minne. I labmomentet kommer systemet Pintos att användas. Detta är ett pedagogiskt operativsystem som stöder trådar, laddning och körning av användarprogram och ett filsystem. Pintos är internationellt renommerat som en väletablerad plattform av högsta kvalité för praktiskt labbande för operativsystem.
	
                Litteratur
	            Andrew S. Tanenbaum, Herbert Bos: Modern Operating Systems (4th ed.). Prentice Hall Press, 2015.eller A. Silberschatz, P. Galvin, G. Gagne: Operating System Concepts, Ninth Edition, Wiley 2010;   Tidskriftsartiklar.
		
                       Examination inklusive obligatoriska moment
       	Genomförande av laboration och skriftlig tentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Grundläggande kunskaper i datorteknik, programmering och sannolikhetsteori.
	
                Syfte
	Datorer används i allt större utsträckning i tillämpningar med höga krav på tillgänglighet och säkerhet.   I sådana system används feltoleranta datorer för att minska risken för kostsamma haverier och allvarliga olyckor.  Kursen ger grundläggande kunskaper i  konstruktion och analys av feltoleranta datorsystem, samt en översikt av utvecklingsprocesser  för  säkerhetskritiska system.   Feltoleranta datorer används i ett brett spektrum av tillämpningar från inbyggda system i bilar och flygplan till stora serverdatorer för molntjänster och websidor.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	* Formulera pålitlighetskrav för datorsystem som används i affärskritiska, säkerhetskritiska och missionskritiska tillämpningar.* Beskriva och jämföra grundläggande principer och arkitekturer för feltoleranta datorsystem.* Genomföra sannolikhetsteoretiska analyser av datorsystemarkitekturer med hjälp av felträd, tillförlitlighetsblockschema, tidskontinuerliga Markovkedjor och stokastiska Petrinät.* Beskriva principer och egenskaper hos vanligt förekommande metoder för feldetektering, felmaskering och återhämtning. * Behärska den grundläggande terminologin inom området pålitliga datorsystem.* Beskriva grundläggande livscykelsmodeller och standarder som används vid utveckling av säkerhetskritiska system.
	
                Innehåll
	Kursen behandlar konstruktion och analys av feltoleranta datorsystem. Innehållet kan delas in i fem delområden:Terminologi och definitioner: Omfattar termer som pålitlighet, tillförlitlighet, funktionssannolikhet, underhållsgodhet, tillgänglighet och säkerhet. Vidare behandlas taxonomier för feltoleranta system och modeller för fel och felyttringar.Konstruktionsmetoder för feldetektering och feltolerans: Maskinvaruredundans: Trippelmodulär redundans (TMR), Dubbelmodulär redundans (DMR), aktiv redundans, varmt och kallt beredskapssystem, hybridredundans, m.m. Programvaruredundans: N-versionsprogrammering, Recovery blocks. Tidsredundans: Metoder för detektering av transienta fel. Feltolerans i distribuerade system: tidsstyrda system, byzantinska fel.Analys av feltoleranta datorsystem: Tillförlitlighetsblockschema, felträd, Markovkedjemodeller, felmodsanalys (FMEA), felträdsanalys (FTA), stokastiska Petrinät. Två laborationer ingår där feltoleranta datorsystem analyseras med Markovkedjemodeller och stokastiska Petrinät.. Beräkningarna görs med ett speciellt datorprogram. Resultaten från en av laborationerna skall dokumenteras i en teknisk rapport.Systemexempel: Feltoleranta system från tillämpningsområden som rymd, flyg, fordon, telekommunikation och transaktionssystem. En del av dessa presenteras av gästföreläsare från industrin. 
        	  
                Organisation
	Föreläsningar, övningar och två laborationer. 
	
                Litteratur
	            "Fault-Tolerant Systems", Koren, Krishna, ISBN 978-0-12-088525-1. Kompendium, särtryck av artiklar, övningskompendium.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Obligatoriskt deltagande i två laborationer. 
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Förberedande kurser i parallellprogrammering och operativsystem. Kunskaper motsvarande en kurs i maskinorienterad programmering i högnivåspråket C.
	
                Syfte
	Ett inbyggt system är ett datorsystem som är konstruerat för att utföra en eller ett fåtal specifika funktioner. Det är inbyggt i den mening att det är en del av en komplett enhet, ofta omfattande elektrisk hårdvara och mekaniska delar. Av säkerhets- och användbarhetsskäl har vissa inbyggda system strikta krav på icke-funktionella beteenden såsom fördröjning och periodicitet hos datorberäkningarna. Sådana datorsystem kallas realtidssystem.Exempel på realtidssystem är styrsystem för bilar, flygplan och rymdfarkoster, samt datorspel och multimediatillämpningar. Denna kurs syftar till att ge grundläggande kunskaper om metoder för konstruktion och analys av realtidssystem.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter kursen skall studenten kunna:Formulera krav för inbyggda datorsystem med strikta önskemål på fördröjning och periodicitet hos datorberäkningarna.Konstruera parallellt exekverande processer (programvarumoduler) för realtidstillämpningar med gränssnitt mot hårdvaruenheter (sensorer/ställdon).Beskriva de principer och mekanismer som används för att konstruera run-time system och kommunikationsnätverk för realtidstillämpningar.Tillämpa de grundläggande analysmetoder som används för att verifiera den tidsmässiga korrektheten hos en uppsättning processer.
	
                Innehåll
	På grund av de extremt höga kostnader som följer av en sen upptäckt av problem i inbyggda system är det viktigt att god designmetodik används under utvecklingen av mjuk- och hårdvaran. En sådan metod är att använda en systemarkitektur som tillhandahåller bra abstraktioner av mjukvarukomponenter och som understödjer enkel sammankoppling av sådana komponenter. Filosofin bakom systemarkitekturer dikterar att mjukvaran i ett inbyggt system organiseras i multipla parallellt exekverande processer, där varje process (eller grupp av processer) implementerar en specifik funktionalitet i systemet. Uppdelningen i processer gör det möjligt att på ett naturligt sätt bryta ner ett komplext system i mindre delar som är enkla att förstå, implementera och underhålla. I kursen används programspråket C, utökat med ett mjukvarubibliotek som tillhandahåller stöd för programmering av parallella processer med tidskrav. Ett viktigt syfte med kursen är att demonstrera hur det utökade programspråket C används för att realisera kommunikation och synkronisering mellan processer, resurshantering och ömsesidig uteslutning. Eftersom andra programspråk använder monitorer och semaforer för att realisera dessa funktioner, innehåller kursen också en genomgång av sådana tekniker. Dessutom demonstreras det i kursen hur man använder lågnivåprogrammering i C för att realisera avbrottsstyrd interaktion med hårdvaruenheter. För att demonstrera de generella principerna bakom programmering av realtidssystem ger kursen också exempel på hur dessa principer realiseras i andra programspråk, som Ada och Java. För att möjliggöra exekvering av ett program som innehåller parallella processer används ett runtime-system (realtidskärna) som fördelar den totala tillgängliga beräkningskapaciteten hos systemets mikroprocessor(er) mellan processerna. Kursen beskriver hur ett enkelt runtime-system är organiserat. Exekveringsordningen mellan processerna bestämmer runtime-systemet med hjälp av en schemaläggningsalgoritm. Kursen presenterar tekniker baserat på såväl cykliska tidtabeller som statiska eller dynamiska processprioriteter. Dessutom presenteras protokoll för hantering av delade hård- och mjukvaruresurser. Eftersom många av dagens realtidstillämpningar är distribuerade över multipla datornoder innehåller kursen också en introduktion till topologier och mediumaccesstekniker för några vanligt använda kommunikationsnätverk. I realtidssystem, där processer har strikta tidskrav, är det nödvändigt att göra a priori analys av systemets schemaläggningsbarhet. Kursen presenterar tre olika analysmetoder för system som schemalägger processer med statiska eller dynamiska prioriteter: utnyttjandegradsbaserad analys, svarstidsanalys och beräkningsbehovsanalys. I samband med detta ges också en insikt i hur det maximala resursbehovet (värsta-fallets exekveringstid) för en process beräknas.
        	  
                Organisation
	Kursen utgörs av en föreläsningsserie samt ett antal salsövningar där programmeringmetoder och teorier från föreläsningarna praktiseras. Kursen examineras medelst en skriftlig tentamen. Dessutom ingår en obligatorisk laborationsuppgift som syftar till att eleverna skall ta fram programvara för en inbyggd realtidstillämpning som exekveras på ett hårdvarusystem bestående av multipla datornoder som kommunicerar via ett bussnätverk. Uppgiften omfattar, förutom programmering av samverkande parallella processer, även maskinnära programmering av hårdvaruenheter som realtidsklockor och nätverkskontrollers.
	
                Litteratur
	            Föreläsningsanteckningar. Utvalda texter från tidskrifter, konferenser och böcker. Exempelsamling.
		
                       Examination inklusive obligatoriska moment
       	En skriftlig tentamen och en laborationsuppgift. Slutbetyg, enligt skalan underkänd (U) eller godkänd (3, 4, 5), ges baserat på betygen på den skriftliga tentamen och laborationsuppgiften.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Undervisningen förutsätter kunskaper motsvarande en kandidatexamen. Dessutom krävs kunskaper i ett programmeringsspråk, till exempel C. Kursen EDA093 Operativsystem eller motsvarande rekommenderas.
	
                Syfte
	Denna kurs ger grundläggande kunskaper inom området datasäkerhet (eng. "security"), dvs hur man skyddar sitt system mot avsiktliga intrång. Intrång kan göras med avsikt att ändra eller förstöra resurser (data, programvara, maskinvara, osv.), för att skaffa tillgång till konfidentiell information eller för att orättmätigt utnyttja systemet och dess tjänster. Kursen behandlar de hot som finns, svagheter i datorsystemen och kommunikationsnäten samt de regelverk och mekanismer som kan användas för att skydda systemen. Kursen behandlar säkerhet som en del av det överordnade begreppet pålitlighet (eng. dependability). Säkerhetstänkandet sätts även in i ett vidare sammanhang, genom att organisatoriska, affärsmässiga, sociala, juridiska, mänskliga och etiska aspekter berörs.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs skall studenten ha tillgodogjort sig följande lärandemål. Studenten skall: * ha en övergripande och grundläggande förståelse för datasäkerhet och vad otillräcklig datasäkerhet innebär för de betraktade systemen* ha en generell förståelse för olika skyddsmekanismer* kunna analysera olika typer av system ur datasäkerhetssynpunkt, samt kunna föreslå åtgärder för att säkra systemen* ha förståelse för några metoder för att modellera säkerhet* förstå vanliga metoder för säkerhetsbedömning, utvärdering och svårigheterna i hur säkerhet kan mätas* ha förbättrat sin förmåga att uttrycka sig skriftligt genom att författa en teknisk rapport* föra ett välunderbyggt resonemang kring etiska och sociala aspekter av datasäkerhet.
	
                Innehåll
	Introduktion till datasäkerhet: definitioner, terminologi, standarder. Några praktikfall. Koppling till tillförlitlighet, tillgänglighet och katastrofsäkerhet.Säkerhet i UNIX: filsystem, systemadministration, lösenord och konton, behörighet.Säkerhetshot: systematik, fysisk säkerhet, röjande strålning, virus, maskar, trojanska hästar, och logiska bomber.Steganografi och hemliga kanaler.Introduktion till kryptoteknik.Säkra operativsystem. Säkerhetsmekanismer: autentisering, behörighet, åtkomstkontroll, filskydd, referensmonitorkonceptet, kryptering och separation.Intrångsdetekteringssystem. Vilseledande system.Säkerhetsmodeller: Bell-LaPadula, Biba, m. fl.Introduktion till säkerhet i nätverk och brandväggar.Säkerhet för databaser, defensiv programmeringsteknik.  Mätning av säkerhet. Säkerhetsplanering och organisation. Säkerhetspolicy och riskanalys. Social Engineering och datakriminalitet. Lagar och etik.
        	  
                Organisation
	Kursen utgörs av en föreläsningsserie, vissa övningsmoment och laborationer. Normalt ges någon föreläsning av föreläsare från industrin, som belyser säkerhet ur tillämpningssynpunkt. Vid laborationerna får man praktiskt sätta sig in i hur några vanliga säkerhetsmekanismer fungerar.Denna kurs är en grundkurs i datasäkerhet och är en del av den föreslagna säkerhetsfördjupningen på Chalmers och Göteborg universitet. Med denna kurs får studenterna en bred överblick över datasäkerhetsfältet. För mer detaljerade kunskaper inom några områden hänvisas till fortsättningskurserna i kryptoteknik (TDA 351), Nätverkssäkerhet (EDA491) och Språkbaserad säkerhet (TDA601). Etiska och sociala aspekter utvecklas ytterligare i kursen DAT147.
	
                Litteratur
	            Information om litteratur ges på kursens hemsida före kursstart.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen och godkända laborationer.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen DAT105 Datorarkitektur eller motsvarande krävs. Kursen TDA383 Principer förparallell programmering rekommenderas.
	
                Syfte
	Under perioden 1975 till 2005 åstadkom datorindustrin en fenomenal bedrift: på trettio år placerade vi en en personlig dator på varje skrivbord och i varje ficka.  År 2005 hejdades den utvecklingen abrupt, varvid industrin satte nya mål: att placera en personlig parallell superdator på varje skrivbord, i varje hem och i varje ficka.  År 2011 var övergången komplett genom att även surfplattor och mobiltelefoner fick multicore-processorer.  Snart kommer denna process att leda till fyra- och åttakärniga processorer även i ordinära surfplattor, och de sista spelkonsolerna kommer att gå från en till flera kärnor.  För första gången i historien kommer därmed ¿vanliga¿ datorplattformar inte längre att utgöras av von-Neumann-maskiner med en processorkärna.  Effekt och temperatur är numera lika viktiga designmål som prestanda.  Högprestanda-datorer konstrueras nu för bästa prestanda per watt.  Denna kurs behandlar hur dagens multicore-system är konstruerade, med blicken på hur framtida system kan komma att byggas under det närmaste decenniet.  Vi går också igenom de historiska ursprungen till många designstrategier som har återuppstått i nutida system men i andra former och sammanhang (till exempel dataparallellism, VLIW-parallellism och parallellism på trådnivå). 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter godkänd kurs ska studenten kunna:Kunskap och förståelsebeskriva aktuella metoder för parallell databehandlingförklara designprinciperna för hårdvarustödet för att stödja programmeringsmodellerna shared memory och message passingbeskriva implementeringen av olika modeller av parallellitet på trådnivå, såsom multitrådade kärnor, chip-multiprocessorer, multipla kärnor eller GPGPUFärdigheter och förmågaimplementera synkroniseringsmetoder för parallella datorer som använder shared memory och message passingdesigna skalbar parallellprogramvara och analysera dess prestandaVärderingsförmåga och förhållningssättanalysera avvägningar mellan olika metoder för parallell databehandling när det gäller funktion, prestanda och kostnad
	
                Innehåll
	Under perioden 1975 till 2005 åstadkom datorindustrin en fenomenal bedrift: på trettio år placerade vi en en personlig dator på varje skrivbord och i varje ficka. År 2005 hejdades den utvecklingen abrupt, varvid industrin satte nya mål: att placera en personlig parallell superdator på varje skrivbord, i varje hem och i varje ficka. År 2011 var övergången komplett genom att även surfplattor och mobiltelefoner fick multicore-processorer.Effekt och temperatur är numera lika viktiga designmål som prestanda. Högprestanda- datorer konstrueras nu för bästa prestanda per watt. Denna kurs behandlar hur dagens multicore-system är konstruerade, med blicken på hur framtida system kan komma att byggas under det närmaste decenniet.
        	  
                Organisation
	Kursens innehåll är indelat i flera delar:en repetition av grundläggande koncept inom datorarkitekturgrundläggande multiprocessor-design för  programmeringsmodellerna message passing och shared memoryinterconnection networks, en nödvändig komponent i chip-multiprocessorer och skalbara parallella datorsystemhur man korrekt stödjer parallella algoritmer i shared memory-hårdvarade senaste årens övergång till chip-multiprocessorer (även kända som "multicores")En röd tråd som går igenom alla delar är en diskussion om kostnadsavvägningar med avseende på prestanda, kraft, energi, kontrollerbarhet, programmerbarhet och underhållbarhet. Ett andra förenande tema är minnesflaskhalsen och vikten av effektivresurshantering.Föreläsningarna kompletteras med flera övningstillfällen. Genom tre laborationsuppgifter lär sig studenterna att utveckla programvara med hjälp av modeller som C++-trådar och OpenMP, att utveckla och analysera synkroniseringsalgoritmer, och hur man använder pretandaanalysverktyg. Kursen innehåller också ett skriftligt projekt där studenterna får ta rollen som en datorarkitekt som undersöker och diskuterar lösningar på ett visst problem inom området parallelldatorarkitektur.
	
                Litteratur
	            Se separat litteraturlista.  
		
                       Examination inklusive obligatoriska moment
       	Skriftlig individuell tentamen, laborationer, samt ett flerveckors skriftligt projekt som genomförs individuellt eller i par.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	En grundläggande kurs i datorteknik.
	
                Syfte
	Kursen avser att ge grundläggande kunskaper i analys, syntes och optimering av digitala kombinatoriska nät och sekvensnät. Kursen ger också en inblick i de teknologier som sådana nät implementeras med. I kursen får studenten bekanta sig med ett modernt datorbaserat konstruktionsverktyg (CAD), samt lära sig grunderna för maskinvarubeskrivande språk.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	1. Kunskap och förståelse	beskriva aritmetiska enheter för binär addition, multiplikation och division	beskriva funktionen hos komponenter såsom latchar, vippor, och olika minneselement	översiktligt beskriva funktion och användning av rekonfigurerbar logik samt ASIC teknologi	ange skillnaderna mellan olika beskrivningssätt för digitala tillståndsmaskiner (Mealy, Moore, och synkron Mealy)	beskriva funktion och struktur hos sekventiell asynkron digital logik	ange faktorer som påverkar snabbhet, effektförbrukning, och erforderlig chipyta vid implementation av digital logik.2. Färdighet och förmågaminimera en boolesk funktion och kunna uttrycka den på kanonisk formformulera en kontruktionsspecifikation för en digital kretsberäkna den kritiska vägen i en digital kretsanvända VHDL som ett verktyg vid konstruktion av digitala kretsar (såväl kombinatoriska såsom sekventiella)använda moderna datorbaserade kontruktionsverktyg för simulering, syntes, och implementering av en digital krets beskriven m. hj av VHDLskapa och använda testbänkar för att verifiera korrekt funktionalitet hos en digital konstruktionanvända FPGA teknologi för att implementera en digital hårdvarukonstruktion
minimera antalet nödvändiga tillstånd i en digital tillståndsmaskin via tillståndskodning.3. Värderingsförmåga och förhållningssättutvärdera och kritiskt granska olika realiseringar av en digital konstruktion i målteknologier ASIC och FPGA
använda olika konstruktionsalternativ i konstruktionsrymden för binär aritmetik (t.ex. olika adderarstrukturer med varierande prestanda vad gäller snabbhet, effektförbrukning, och chipyta/antal grindar)
-	utvärdera och kritiskt granska olika realiseringar av en digital konstruktion  med avseende på snabbhet, effektförbrukning, och chipyta/antal grindar, och kunna välja den realisering som passar till de ställda konstruktionskraven.

	
                Innehåll
	Boolesk algebra och logikminimering
Kretsar för digital aritmetik	Minneselement	Kombinatoriska kretsar	Sekventiella kretsar och tillståndsmaskiner	Teknologierna ASIC och FPGA för realisering av digitala konstruktioner	Asynkrona kretsar	Snabbhet och effektförbrukning i digitala kretsar	Test, och konstruktion för test, av digitala kretsar	Det hårdvarubeskrivande språket VHDL för konstruktion av digitala kretsar	Hårdvarukonstruktion, test, och utvärdering av en enkel digital processor

        	  
                Organisation
	Föreläsningar och laborationer.
	
                Litteratur
	            Digital Design Using VHDL: A Systems Approach, 1st Edition by William J. Dally, R. Curtis Harting, Tor M. Aamodt
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras via en skriftlig tentamen och sju laboratorieövningar.
Laborationerna utföres normalt i 2-mannagrupper.

	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	EDA452 Grundläggande datorteknik och EDA482  Maskinorienterad programmering eller motsvarande kurser.
	
                Syfte
	Kursen har som syfte att förmedla hur ett modernt datorsystem är  uppbyggt och hur dess hårdvarudelar samverkar med varandra och med  mjukvaran (på låg nivå).  Speciellt tas stor hänsyn till  prestandafrågor, eftersom många designbeslut eftersträvar en viss  prestanda till lägsta kostnad, eller mesta möjliga prestanda för en  given kostnad.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Läsa och skriva enkla assemblerprogram för en typisk tre-adress register maskin. Identifiera de grundläggande typer av konflikter som uppkommer till följd av pipelining av en processors dataväg. Peka ut och beskriva enkla metoder för att hantera dessa konflikter, identifiera begränsningar i dessa metoder, samt uppskatta prestandainverkan. På korrekt sätt använda sig av instruktioner som utför aritmetiska operationer, såväl för flyttal som heltal. Redogöra för funktionen hos och uppskatta prestandapåverkan av en minneshierarki, som kan omfatta cacheminnen, huvudminne och virtuellt minne, och som använder olika parameterar (total storlek, blockstorlek, associativitet, etc) för de olika minnesnivåerna. Beräkna prestanda (i enkla lastfall) hos ett I/O-system, speciellt i system som består av processorer, bussar och skivminnen. Identifiera prestandamässiga flaskhalsar i ett sådant system. Förklara hur ett datorsystems prestanda kan definieras och mätas. Uppskatta parameterändringars inverkan på systemets prestanda enligt ovan. Översiktligt beskriva de komponenter och principer som används vid konstruktion av fler-kärniga processorer. Genomföra en enklare samoptimering av mjukvara (på assemblernivå) med hårdvaruparametrar för att uppnå bästa möjliga prestanda/ kostnadsförhållande för en viss funktion, samt redovisa detta i en kortare skriftlig rapport.
	
                Innehåll
	Genom föreläsningar, gruppövningar och laborationer förmedlas en grundläggande insikt om hur ett litet datorsystem (med processor, minnen samt in- och utmatning) är uppbyggt och fungerar. Stor vikt läggs vid prestandaaspekter och vid samverkan med mjukvara.
        	  
                Organisation
	Undervisningen omfattar föreläsningar, fördjupningsövningar i grupp samt laborativt arbete baserat på en mjukvarusimulator av ett litet datorsystem. Den laborativa delen avslutas med en inlämningsuppgift.
	
                Litteratur
	            Pattersson&Hennessy: "Computer Organization and Design: The Hardware/Software Interface". Kompletterande material via kurshemsidan i PingPong
		
                       Examination inklusive obligatoriska moment
       	Skriftlig redovisning på engelska av inlämningsuppgift. Demonstration av inlämningsuppgift. Tentamen.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Studenten ska ha god förståelse för datorers uppbyggnad (kursen "EDA452 Grundläggande datorteknik" eller motsvarande. En programmeringskurs (t ex Java eller C) är ett krav.

Kunskaper om grundläggande sannolikhetsteori (stokastiska variabler) och elementär grafteori kan vara en fördel, men kan också förvärvas under kursen via kompletterande studier.
	
                Syfte
	Nätverk av datorer blir en alltmer naturlig och viktigare beståndsdel inom många teknikområden. Kursen inriktar sig på de aspekter av datakommunkation som en verksam ingenjör kommer i kontakt med i sitt yrkesarbete. Detta är en grundkurs med bred inriktning mot området datakommunikation.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	01. ha grundlägggande kunskaper och färdigheter inom området datakommunikation och datornätverk. 02. ha god kännedom om referensmodeller för datakommunikation och deras lager med avseende på funktion, tjänster och protokoll. 03. tillämpa referensmodellerna för att skapa förståelse om uppbyggnaden och användning av olika datornätverk. 04. ha god kännedom om de principer, protokoll och standarder som TCP/IP-baserade nätverk bygger på. 05. ha grundläggande kunskaper om de viktigaste applikationsprotokollen. 06. ha god kännedom om TCP/IP-modellen om Internets uppbyggnad och arkitektur samt bearbeta en grundläggande IP-adresseringsplan för ett intranät. 07. ha god förståelse för Internets begränsningar med avseende på servicegarantier i samband med nyutvecklade tjänster. 08. redogöra för hur olika typer av datornätverk är uppbyggda i förhållande till transmissionsmediets egenskaper, kraven på bandbredden, kodningsmetoder och funktioner för fel- och flödeskontroll. 09. söka djupare kunskap om enskilda standarder och protokoll inom datakommunikationsområdet. 10. använda nätverksanalysprogram för att analysera datatrafik i ett lokalt nätverk med anslutning till Internet. 11. ha grundläggande praktiska färdigheter i konfiguration av lokala nätverk.
	
                Innehåll
	Kursen behandlar datakommunikation och olika fundamentala koncept som krävs för att förstå, designa och analysera datoranätverk. Kretskoppling respektive paketkoppling för datornätverk. Referensmodeller för datakommunikation. Distribuerade applikationer och applikationsprotokoll, WWW, DNS, e-post. Sockets. Principer för tillförlitlig respektive datagram dataöverföring, TCP och UDP. Bitfel-, flödes- och stockningskontroll på Internet. Internets protokoll och adressering, IPv4 och IPv6.  Stödprotokollen ARP och ICMP. Routingalgoritmer DV och LS. Routing på Internet och Autonoma System. Routingprotokollen RIP, OSPF och BGP.  Länkprotokollen och felupptäckande koder. Lokala nätverk LAN. Länkaccess till mediet och MAC-protokollen. Ethernet, switching och VLANs. Trådlös LAN. Multimedia-applikationer på Internet. Säkerhet i datornätverk. Brandvägg och paketfiltrering. Skydd för WLAN.
        	  
                Organisation
	Traditionella föreläsningar ges där den grundläggande teorin och viktiga koncept presenteras för att komplettera kursboken. Föreläsningar ges varje vecka, och som ett komplement till föreläsningarna hålls ett antal sessioner för övningar med hjälp av övningsledare. Inför varje övningstillfälle väljs lämpliga övningsuppgifter ut som ansluter till innehållet av motsvarande föreläsningar.I kursen ingår obligatoriskt moment som består av två laborationer samt en inlämningsuppgift. Laborationer ingår där man praktiskt får bekanta sig med nätverksutrustning och olika kommunikationsprotokoll. Som hemuppgift finns också en inlämningsuppgift innehållande deluppgifter som bl.a. handlar om att söka sig djupare information och testa själv olika verktyg. I kursen ingår även ett frivilligt moment med webb-baserade självstudier.
	
                Litteratur
	            James F. Kurose and Keith W. Ross, "Computer Networking: A Top-Down Approach", 6th Edition, Pearson Education. Cisco Networking Academy, "Introduction to Networks", version 5.0, Interaktivt webb-baserat kursmaterial. 
		
                       Examination inklusive obligatoriska moment
       	För godkänd kurs krävs godkänd skriftlig tentamen samt att studenten fått godkänt på alla obligatoriska laborationer och inlämningsuppgift. Slutbetyget i skalan U/3-5 ges baserat på tentamens resultat.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Studenten ska ha god förståelse för datorers uppbyggnad (kursen EDA452 "Grundläggande datorteknik" eller motsvarande. En programmeringskurs (t ex Java eller C) är ett krav. Kunskaper om grundläggande sannolikhetsteori (stokastiska variabler) och elementär grafteori kan vara en fördel, men kan också förvärvas under kursen via kompletterande studier.
	
                Syfte
	Nätverk av datorer blir en alltmer naturlig och viktigare beståndsdel inom många teknikområden. Kursen inriktar sig på de aspekter av datakommunkation som en verksam ingenjör kommer i kontakt med i sitt yrkesarbete. Detta är en grundkurs med bred inriktning mot området datakommunikation.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	01. ha grundlägggande kunskaper och färdigheter inom området datakommunikation och datornätverk.02. ha god kännedom om referensmodeller för datakommunikation och deras lager med avseende på funktion, tjänster och protokoll.03. tillämpa referensmodellerna för att skapa förståelse om uppbyggnaden och användning av olika datornätverk.04. ha god kännedom om de principer, protokoll och standarder som TCP/IP-baserade nätverk bygger på.05. ha grundläggande kunskaper om de viktigaste applikationsprotokollen.06. ha god kännedom om TCP/IP-modellen om Internets uppbyggnad och arkitektur samt bearbeta en grundläggande IP-adresseringsplan för ett intranät.07. ha god förståelse för Internets begränsningar med avseende på servicegarantier i samband med nyutvecklade tjänster. 08. redogöra för hur olika typer av datanätverk är uppbyggda i förhållande till transmissionsmediets egenskaper, kraven på bandbredden, kodningsmetoder och funktioner för fel- och flödeskontroll. 09. söka djupare kunskap om enskilda standarder och protokoll inom datakommunikationsområdet. 10. använda nätverksanalysprogram för att analysera datatrafik i ett lokalt nätverk med anslutning till Internet. 11. ha grundläggande praktiska färdigheter i konfiguration av lokala nätverk.
	
                Innehåll
	Kursen behandlar datakommunikation och olika fundamentala koncept som krävs för att förstå, designa och analysera datornätverk. Kretskoppling respektive paketkoppling för datornätverk. Referensmodeller för datakommunikation. Distribuerade applikationer och applikationsprotokoll, WWW, DNS, e-post. Sockets. Principer för tillförlitlig respektive datagram dataöverföring, TCP och UDP. Bitfel-, flödes- och stockningskontroll på Internet. Internets protokoll och addressering, IPv4 och IPv6. Stödprotokollen. ARP och ICMP. Routingalgoritmer DV och LS. Routing på Internet och Autonoma System. Routingprotokollen RIP, OSPF och BGP. Länkprotokollen och felupptäckande koder. Lokala nätverk LAN. Länkaccess till mediet och MAC-protokollen. Ethernet, switching och VLANs. Trådlös LAN. Multimedia-applikationer på Internet. Säkerhet i datornätverk. Brandvägg och paketfiltrering. Skydd för WLAN.
        	  
                Organisation
	Traditionella föreläsningar ges där den grundläggande teorin och viktiga koncept presenteras för att komplettera kursboken. Föreläsningar ges varje vecka, och som ett komplement till föreläsningarna hålls ett antal sessioner för övningar, vanligen i flera mindre grupprum där individuell hjälp med problemlösning tillsammans med övningsledare är möjlig. Inför varje övningstillfälle väljs lämpliga övningsuppgifter ut som ansluter till innehållet av motsvarande föreläsningar. Laborationer ingår där man praktiskt får bekanta sig med nätverksutrustning och olika protokoll. Som hemuppgift finns också en inlämningsuppgift innehållande deluppgifter som handlar om att söka sig djupare information och testa själv olika verktyg. I kursen ingår även ett frivilligt moment med webbaserade självstudier.
	
                Litteratur
	            James F. Kurose and Keith W. Ross, "Computer Networking: A Top-Down Approach", 6th Edition, Pearson Education. Cisco Networking Academy, "Introduction to Networks", version 5.0, Interaktivt webb-baserat kursmaterial. 
		
                       Examination inklusive obligatoriska moment
       	För godkänd kurs krävs godkänd skriftlig tentamen samt att studenten fått godkänt på alla obligatoriska laborationer och inlämningsuppgift. Slutbetyget i skalan U/3-5 ges baserat på tentamens resultat.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Du ska ha klarat av minst en kurs i programmeringsteknik. Du förväntas också ha kunskaper motsvarande en grundläggande kurs från något av områdena: Datakommunikation, Operativsystem, Algoritmer, programmering (C eller C ++) och matematik (diskret matematik). 
	
                Syfte
	Datornätverk täcker en rad underliggande områden så som: själv-stabiliserande algoritmer för datornätverk, programmering med användandet av BSD socket API, samt diverse kommunikationskoncept och protokoll. För att kunna bemästra datornätverk krävs både teoretiska och praktiska kunskaper om utformning, genomförande och användande av nätverksprotokoll och tjänster. Syftet med kursen är att lära sig att utforma och analysera själv-stabiliserande algoritmer för nätverksprotokoll, att få erfarenhet av socket programmering och att inhämta kunskap om befintliga kommunikationsnät inklusive stödsystem och protokoll grundläggande funktioner och metoder i datakommunikationsnät.
Kursen, som bygger på grundläggande TCP/IP kurser, syftar också till att ge fördjupade kunskaper om utformning och analys av fel-toleranta nätverksinriktade algoritmer och att ge kunskaper om befintliga kommunikationsnät, som exempelvis tekniker som används i "Internet" så som grundläggande kommunikationsprotokoll. 
Erfarenhet av nätverksorienterad programmering ges som en väsentlig del av kursen.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse
Du ska kunna beskriva och analysera grundläggande protokoll, och deras begränsningar i nätverk som Internet. Du ska också kunna analysera och diskutera nätverksproblem, som software-defined networks (SDN), TCP-anslutningar, "contention", prestanda och flödeskontroll.
Färdighet och förmåga
Du kan visa förmåga att systematiskt definiera och analysera ett datornätverk i form av kommunikationsgrafer och som ett distribuerat system. Du har förmågan att kritiskt analysera effekten av olika feltyper, såsom tillfälliga fel, förlorade meddelanden och förändringar i nätverkstopologin, och hur sådana fel kan propagera i, och påverka datornätverket.
Under kursen utvecklar studenterna småskaliga nätverksapplikationer med hjälp av grundläggande nätverkstekniker. Du måste därför kunna konstruera och utveckla ett eget nätverk och därefter testa och demonstrera det i laboratoriet.
Färdigheter i skriftlig kommunikation redovisas i form av laborationsrapporter och som formella bevis av protokollegenskaper där studenten förklarar och demonstrerar riktigheten av det studerade protokollet och dessutom tydligt beskriver självständigt författade nätverksalgoritmer.
Efter genomgången kurs ska du skickligt kunna demonstrera mjukvaruutveckling för feltoleranta "client-server" och "peer-to-peer" arkitekturer. Du kan också utforma distribuerade algoritmer för datornätverk och att visa varför de fungerar.
Värderingsförmåga och förhållningssätt 
Förmåga att beskriva, konstruera (nya) och analysera (nya och befintliga) algoritmer för nätverksprotokoll med en mycket stark betoning på självstabiliserande algoritmer för datornätverk.
	
                Innehåll
	Kursen innehåller praktiska experiment med analyser som avser att öka studentens förståelse för centrala begrepp och dessas återspeglingar i verkliga problem. Under laborationer tränas API programmering för feltoleranta nätverk, Internet konfigurationer med tjänster ur praktiska perspektiv, samt protokoll med stark betoning på självstabiliserande algoritmer. Kursens innehåll ger därför förståelse för grundläggande frågor som uppkommer under utformning av datornätverk och olika datornätverksprotokoll.
        	  
                Organisation
	Föreläsningar, övningar, hemuppgifter och laborationer.
	
                Litteratur
	             W. Stevens, Bill Fenner, Andrew M. Rudoff, Unix Network Programming, Volume 1: The Sockets Networking API, 3rd edition, Addison-Wesley Professional, ISBN-10: 0-13-141155-1.S. Dolev, Self-Stabilization, 1st edition, The MIT Press, ISBN-10: 0-26-204178-2.Läroboken kompletteras med föreläsningsanteckningar och vetenskapliga artiklar.
		
                       Examination inklusive obligatoriska moment
       	Kursen avslutas med en skriftlig tentamen. För att bli godkänd på kursen krävs, utöver godkänd tentamen, att alla inlämningsuppgifter och laborationer är godkända.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Godkänt betyg i den förberedande kursen EDA223 Realtidssystem krävs. Kurser i algoritmer och datorarkitektur rekommenderas starkt.
	
                Syfte
	Realtidssystem spelar en viktig roll i många säkerhetskritiska tillämpningar. För att möta uppsatta prestandakrav måste dessa system ofta konstrueras med flera processorer. Sådana behov kan uppstå är när processer behöver vara fysiskt distribuerade (som i feltoleranta bromssystem i fordon) eller när den inneboende parallelismen i ett program måste kunna utnyttjas till fullo (som i högpresterande multimediatillämpningar). Denna kurs syftar till att ge en djupare förståelse för de problem som kan uppstå vid konstruktion av pålitliga realtidssystem baserade på multiprocessorer.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter avslutad kurs skall studenten kunna:Formulera krav för datorsystem för tids- och säkerhetskritiska tillämpningar.Demonstrera kunskap om den terminologi som används inom teorin för schemaläggning, pålitlighet och beräkningskomplexitet.Redogöra för de principer och mekanismer som används vid schemaläggning av processexekvering och datakommunikation i ett realtidssystem.Konstruera realtidssystem och tillämpa metoder för att verifiera huruvida uppställda systemkrav uppfylls eller ej.Härleda de teoretiska prestandabegränsningarna hos ett givet realtidssystem.Argumentera fördelar och nackdelar kring valet av den optimala konstruktionen för ett realtidssystem givet förutsättningarna.
	
                Innehåll
	Kursen behandlar följande ämnen:Bakgrund: behov och definition av realtidssystem.Egenskaper hos realtidssystem: tillämpningskrav, konstruktionsmetoder, processmodeller, exekveringsmodeller, arkitekturer.Utvärdering av realtidssystem: prestandamått, metoder för utvärdering.Schemaläggning av enkel- och multiprocessorsystem: problemformulering, terminologi, algoritmer.Komplexitetsteori och NP-kompletta problem inom realtidsschemaläggning.Realtidskommunikation: protokoll och fördröjningsgarantier.Metoder för feltolerans i realtidssystem: modeller, algoritmer och arkitekturer.
        	  
                Organisation
	Kursen är organiserad i form av en föreläsningsserie där grundläggande teorier och konstruktionsmetoder presenteras, samt två hemuppgifter på specifika frågeställningar som behandlas under föreläsningarna. Veckovisa konsultationspass erbjuder hjälp rörande frågor och problem relaterade till hemuppgifterna.
	
                Litteratur
	            Föreläsningsanteckningar. Utvalda forskningspublikationer från tidskrifter och konferenser.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom två hemuppgifter, den ena i början av kursen och den andra i slutet av kursen. För den första hemuppgiften ska studenten konstruera en pålitlig programvara för ett distribuerat realtidssystem, som examineras genom att programvaran dokumenteras och demonstreras. För den andra hemuppgiften skall studenten lösa ett antal teoretiska schemaläggningsproblem, och dokumentera lösningarna i en skriftlig rapport som examineras muntligt. Hemuppgifterna genomförs normalt i grupper om två studenter, medan examination och betygsättning av uppgifterna sker individuellt.Slutbetyget i kursen, enligt skalan underkänd (U) eller godkänd (3, 4, 5), utgörs av medelvärdet av betygen på de två hemuppgifterna, med kravet att eleven är godkänd i båda hemuppgifterna.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Kursen ska ge förståelse av datorns uppbyggnad och funktionssätt och därigenom en mycket god teoretisk och praktisk grund för fortsatta studier i såväl datortekniska som programmeringstekniska kurser.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	om datorns uppbyggnad och funktion
* beskriva datorns uppbyggnad och funktion.
Detta betyder att man till exempel ska kunna
- beskriva på blocknivå hur styrenhet, dataväg, registerfil, aritmetik- och logikenhet (ALU) kopplas samman i en centralenhet.
- förklara begreppen ackumulatorarkitektur, RISC, CISC, stackarkitektur och pipeline.
* beskriva och analysera/konstruera centralenhetens grundläggande delar.
Detta betyder att man till exempel ska kunna
- analysera/konstruera en enkel ALU och utforma styrsignalsekvenser för grundläggande ALU-operationer.
- analysera en enkel dataväg, samt konstruera och utforma styrsignalsekvenser för överföringar mellan register, ALU och minne.
* förklara hur instruktioner byggs upp av styrsekvenser.
Detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat, instruktionsavkodning och instruktionsutförande
* beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad.
Detta betyder att man till exempel ska kunna
- beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik.
- analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik.
* förklara primärminnets grundläggande funktioner samt beskriva, analysera och konstruera primärminnets anslutning till centralenheten.
Detta betyder att man till exempel ska kunna
- beskriva olika typer av primärminnen såsom ROM, PROM, FLASH, statiskt RAM och dynamiskt RAM, samt förklara respektive minnestyps användbarhet för olika ändamål.
- förklara begreppet minneshierarki.
- beskriva, analysera och konstruera avkodningslogik för primärminne med digitala komponenter.
- beskriva, analysera och konstruera enkel minnesadresserad IO med digitala komponenter.
- förklara/beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem.
Detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik.
* beskriva elementär undantagshantering i datorsystem.
Detta betyder att man till exempel ska kunna - förklara undantagstyper såsom återstart, programvaruinitierade undantag samt externt genererade undantag (avbrott). - beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten. - beskriva hur avbrott hanteras i centralenheten.

om digitalteknik
* beskriva och använda binära koder.
Detta betyder att man till exempel ska kunna
- utföra omvandling av tal mellan decimal, binär och hexadecimal representation.
- utföra addition och subtraktion med binära heltal.
- känna till hur multiplikation och division utförs i binär representation.
* beskriva och analysera datorns uppbyggnad som programmerbart digitalt system.
Detta betyder att man till exempel ska kunna beskriva, analysera och konstruera sådana kombinatoriska nät och sekvensnät som typiskt används för att bygga en dators centralenhet. De kombinatoriska nät som här avses utgörs (huvudsakligen) av enklare nät såsom väljare, fördelare, heladderare, bitskiftare etc. De sekvensnät som här avses utgörs av minneselement och räknare.

om assemblerprogrammering
* förklara det lagrade programmets princip.
Detta betyder att man till exempel ska kunna beskriva hur en sekvens maskininstruktioner,som ordnats sekvensiellt i minnet, utförs.
* beskriva programmerarens bild av maskinen, dvs instruktionsuppsättning och adresseringssätt.
Detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel.
* beskriva, analysera och konstruera enkla assemblerprogram, organiserade i subrutiner.
Detta betyder att man till exempel ska kunna
- strukturera program med hjälp av subrutiner och stackhantering.
- skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar.

	
                Innehåll
	* Digitalteknikens grundläggande element och begrepp och olika talsystem.* Boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät.* Datorns digitala byggblock (ALU, dataväg, styrenhet, minne, in- och ut- enheter).* Den traditionsenliga processorns uppbyggnad (dataväg och styrenhet med instruktionsuppsättning) som en synkront arbetande digitalmaskin.* Kodning i maskinspråk och assemblerspråk.
        	  
                Organisation
	Schemalagd undervisning består av föreläsningar, demonstrationer och handledda simulerings- och kodningsövningar. Dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration.Under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem. Teorin inhämtas genom föreläsningar och demonstrationer. Studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar. Därefter implementerar studenten sina byggblock i hårdvara under laboration. Konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna.
	
                Litteratur
	            Se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U, 3, 4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Kursen ska ge förståelse av datorns uppbyggnad och funktionssätt och därigenom en mycket god teoretisk och praktisk grund för fortsatta studier i såväl datortekniska som programmeringstekniska kurser.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	om datorns uppbyggnad och funktion
* beskriva datorns uppbyggnad och funktion.
Detta betyder att man till exempel ska kunna
- beskriva på blocknivå hur styrenhet, dataväg, registerfil, aritmetik- och logikenhet (ALU) kopplas samman i en centralenhet.
- förklara begreppen ackumulatorarkitektur, RISC, CISC, stackarkitektur och pipeline.
* beskriva och analysera/konstruera centralenhetens grundläggande delar.
Detta betyder att man till exempel ska kunna
- analysera/konstruera en enkel ALU och utforma styrsignalsekvenser för grundläggande ALU-operationer.
- analysera en enkel dataväg, samt konstruera och utforma styrsignalsekvenser för överföringar
mellan register, ALU och minne.
* förklara hur instruktioner byggs upp av styrsekvenser.
Detta betyder att man till exempel ska kunna förklara och med exempel beskriva instruktionsformat, instruktionsavkodning och instruktionsutförande
* beskriva och analysera den automatiska styrenhetens funktion och uppbyggnad.
Detta betyder att man till exempel ska kunna
- beskriva hur styrsignalsekvenser kan realiseras med fast kopplad logik såväl som mikroprogrammerad logik.
- analysera och konstruera styrsignalsekvenser utgående från instruktioners semantik.
* förklara primärminnets grundläggande funktioner samt beskriva, analysera och konstruera primärminnets anslutning till centralenheten.
Detta betyder att man till exempel ska kunna
- beskriva olika typer av primärminnen såsom ROM, PROM, FLASH, statiskt RAM och dynamiskt RAM, samt förklara respektive minnestyps användbarhet för olika ändamål.
- förklara begreppet minneshierarki.
- beskriva, analysera och konstruera avkodningslogik för primärminne med digitala komponenter.
- beskriva, analysera och konstruera enkel minnesadresserad IO med digitala komponenter.
- förklara/beskriva hur centralenhet och minne kopplas samman med hjälp av datorns bussystem.
Detta betyder att man till exempel ska kunna beskriva synkrona och asynkrona bussprotokoll samt multiplexteknik.
* beskriva elementär undantagshantering i datorsystem.
Detta betyder att man till exempel ska kunna
* förklara undantagstyper såsom återstart, programvaruinitierade undantag samt externt genererade undantag (avbrott).
* beskriva hur återstart och programvaruinitierade undantag utförs i styrenheten.
* beskriva hur avbrott hanteras i centralenheten.

om digitalteknik
* beskriva och använda binära koder.
Detta betyder att man till exempel ska kunna
- utföra omvandling av tal mellan decimal, binär och hexadecimal representation.
- utföra addition och subtraktion med binära heltal.
- känna till hur multiplikation och division utförs i binär representation.
* beskriva och analysera datorns uppbyggnad som programmerbart digitalt system.
Detta betyder att man till exempel ska kunna beskriva, analysera och konstruera sådana kombinatoriska nät och sekvensnät som typiskt används för att bygga en dators centralenhet. De kombinatoriska nät som här avses utgörs (huvudsakligen) av enklare nät såsom väljare,fördelare, heladderare, bitskiftare etc. De sekvensnät som här avses utgörs av minneselement och räknare.

om assemblerprogrammering
* förklara det lagrade programmets princip.
Detta betyder att man till exempel ska kunna beskriva hur en sekvens maskininstruktioner,som ordnats sekvensiellt i minnet, utförs.
* beskriva programmerarens bild av maskinen, dvs instruktionsuppsättning och adresseringssätt.
Detta betyder att man till exempel ska kunna förklara olika allmängiltiga typer av instruktionsgrupper och adresseringssätt samt beskriva dessa med exempel.
* beskriva, analysera och konstruera enkla assemblerprogram, organiserade i subrutiner.
Detta betyder att man till exempel ska kunna
- strukturera program med hjälp av subrutiner och stackhantering.
- skriva små rutiner innefattande programstyrd och avbrottsstyrd in- och utmatning samt fördröjningar.


	
                Innehåll
	* Digitalteknikens grundläggande element och begrepp och olika talsystem.* Boolesk algebras användning för konstruktion av kombinatoriska nät och synkrona sekvensnät.* Datorns digitala byggblock (ALU, dataväg, styrenhet, minne, in- och ut- enheter).* Den traditionsenliga processorns uppbyggnad (dataväg och styrenhet med instruktionsuppsättning) som en synkront arbetande digitalmaskin.* Kodning i maskinspråk och assemblerspråk.
        	  
                Organisation
	Schemalagd undervisning består av föreläsningar, demonstrationer och handledda simulerings- kodnings- övningar. Dessutom utförs handledda obligatoriska laborationer där förkunskapskontroll genomförs inför varje laboration.Under kursen konstruerar studenten genomgående större och större digitala byggblock ingående i digitala system och datorsystem. Teorin inhämtas genom föreläsningar och demonstrationer. Studenten konstruerar sina byggblock och testar sin konstruktion med hjälp av simulatorer under simuleringsövningar. Därefter implementerar studenten sina byggblock i hårdvara under laboration. Konstruktionsarbetet avslutas med att sammankoppla byggblocken till en dator och programmera denna.
	
                Litteratur
	            ISBN:9789144115610, Grundläggande datorteknik - paket, R. Johansson, Studentlitteratur, 2016.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U,3,4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	En kurs i grundläggande imperativ programmering och en kurs i grundläggande datorteknik.
	
                Syfte
	Kursens syfte är att vara en introduktion till konstruktion av små inbyggda system och att ge en förståelse för hur imperativa styrstrukturer översätts till assembler samt för de svårigheter som uppstår vid programmering av händelsestyrda system med flera indatakällor.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	skriva enkla assemblerprogram med användande av den valda arkitekturens instruktionsuppsättning. skriva enkla maskinorienterade C-program med användande av programspråkets datatyper och styrstrukturer. beskriva motsvarigheten i assembler till typiska programstrukturer i C. utnyttja de i kursen använda verktygen för programutveckling på ett adekvat sätt. medverka vid konstruktion och programmering av enkla inbyggda system med givna komponenter. konstruera system innefattande olika typer av undantag (interna undantag, avbrott, återstart). beskriva och exemplifiera några olika typer av digitala kringkomponenter och deras användning. 
	
                Innehåll
	Programutveckling i C och assemblerspråk, test och felsökning. Strukturerad assemblerprogrammering, grunder för kodgenerering. Första nivåns systemprogrammering, dvs. hur datorn programmeras för start från spänningstillslag och hantering av olika typer av undantag så som interna fel, händelser och avbrott. Programmering av kretsar för parallell in- och utmatning, tidshantering och programmering av räknarkretsar. Grunderna för datorkommunikation och programmering av kretsar för seriekommunikation. Dessutom implementeras ett enkelt tidsdelningssystem ( i C och assemblerspråk) med speciell tonvikt på användning av periferikretsar. 
        	  
                Organisation
	Schemalagd undervisning består av föreläsningar, demonstrationer och handledda simulerings- och kodningsövningar. Dessutom utförs handledda obligatoriska laborationer. Under kursen konstruerar eleven större och större programblock i assembler och C. Teorin inhämtas genom föreläsningar och demonstrationer. Eleven konstruerar sina programoch testar dessa med hjälp av simulatorer under simuleringsövningar och självstudier. Inför laborationer anpassar eleven sina program så att funktionen dessutom kan verifieras i hårdvara.
	
                Litteratur
	            Se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U, 3, 4 eller 5.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen EDA343 Datakommunikation eller motsvarande kurs i datakommunikation är nödvändig. Kursen EDA263, Datasäkerhet, eller motsvarande är önskvärd för full förståelse av alla problem.
	
                Syfte
	Kommunikation är idag en grundpelare för de flesta datorsystem och applikationer, och möjligheten att kommunicera på ett säkert och tillförlitligt sätt blir därför allt viktigare. Medvetenhet och kunskap om hot och lösningar är nödvändig inte bara för säkerhetsspecialister  utan även för systemutvecklare och programmerare. Kursen vänder sig till alla som vill ha tillräcklig kunskap i att kunna utvärdera risker och förstå vilka hot man förväntas möta, få kunskap om tekniska lösningar och få insikt i hur säkra protokoll och nätverkslösningar kan designas. Kursen täcker de underliggande principerna och teknikerna för nätverks- och kommuniktionssäkerhet och en god förkunskap i datakommunikation är därför ett krav. Praktiska exempel på verkliga säkerhetsproblem och lösningar gås igenom, och i laborationer fås möjlighet att praktiskt arbeta både med analysverktyg, brandväggar och analys av ett säkerhetsprotokoll, SSL.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Ha god kännedom om hur applikationer och system kan kommunicera på ett säkert sätt, och ha kunskap om vilka verktyg och protokoll som normalt användsHa god kunskap i hur man kritiskt granskar och designar säkra nätverk, applikationer och systemHa grundläggande förståelse av vilka svagheter kommunicerande system har och kunna förutse potentiella problem i olika protokollHa grundläggande kunskap i hur protokoll kan utvärderas och kunna utvärdera vilken säkerhet protokoll kan förväntas erbjudaHa förståelse för vilken betydelse nätverkssäkerhetsproblem kan ha för applikationer och för hela systems säkerhetHa kommit i kontakt med forskningsaktiviteter inom området genom att läsa aktuella konferens- och forskningsrapporter inom området
	
                Innehåll
	Kursen täcker många olika ämnen och tekniker för att säkra system: Nätverksattacker, kryptering och vikten av bra slumptalsgenerering Analys av svagheter och attacker mot vanliga protokoll såsom TCP, UDP, IP, och ICMP Denial of service (DoS) attacks, host- och nätverksscanning, "operating system fingerprinting" Accesskontroll, autentiseringsmekaniser, lösenord, Radius, AAA, PKI, nyckeldistribution, Kerberos "Identity management", certifikat, X.509, LDAP Genomgång av protokoll designade för säkerhet: IPSec , SSL och SSH Säkerhet i trådlösa nätverk: WEP, WPA, WPA2, IEEE 802.1X, EAP Nätverksdesign, brandväggar, proxies, NAT, ingress and egress filtering, Virtuella privata nätverk (VPN), tunnling, nätverkssegmentering och remote access Link level security: VLAN, ARP, säkerhet i DHCP och DNS
        	  
                Organisation
	Kursen består av föreläsningar och laborationer. Laborationerna ger en djupare förståelse av nätverkssäkerhetskoncept, hur svagheter kan utnyttjas och hittas, samt hur man kan skydda sig. På laborationerna arbetar man med attack- och analysverktyg, sätter upp brandväggar och testar intrångsdetekteringssystem.
	
                Litteratur
	            Kursbok och valda artiklar och forskningsrapporter. Se kurshemsida för detaljer.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig examen och godkända laborationer.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Matematisk analys i en variabel. Differentialekvationer. Komplexa tal. Linjär algebra.
	
                Syfte
	Kursen skall ge kunskaper i grundläggande metoder för analys av analoga elektriska kretsar.
Här ingår även kännedom om egenskaper hos vanliga passiva kretselement, källor samt operationsförstärkare.
Även en bakgrund till olika kretselements egenskaper baserade på elektromagnetiska fält ges.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	analysera enklare passiva linjära elektriska kretsar samt kretsar som innehåller operationsförstärkare
använda beräkningsmetoder för likström och stationär växelström i elektriska kretsar för beräkning av ström, spänning och effektutveckling
använda ett datorbaserat verktyg för att analysera enklare elektriska kretsar
utföra grundläggande fältberäkningar utifrån enkla geometrier
	
                Innehåll
	Elektriska kretsar. Kretselement. Ohms lag. Kirchhoffs lagar. Effekt och energi. Beräkningsmetoder för elektriska nät. Likström och stationära växelströmskretsar. Transienta förlopp. Frekvensegenskaper och Bodediagram.
Operationsförstärkare. Elektromagnetiska fält med beskrivande tillämpningar.
Laborationer innefattande handberäkningar, dator simuleringar, byggnation och verifiering genom praktiska mätningar.
        	  
                Organisation
	Föreläsningar, demonstrationsräkning, räknestuga och laborationer.
	
                Litteratur
	            Kursbok: Se kurshemsida

		
                       Examination inklusive obligatoriska moment
       	Följande moment skall vara godkända:

Skriftlig tentamen
Laborationsuppgifter


	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Grundläggande kunskaper i programmering och genomförd projektkurs inom Datateknikprogrammet
	
                Syfte
	Kursen syftar till att inspirera och stimulera blivande dataingenjörer till att bidra till en hållbar samhällsutveckling i sin framtida yrkesroll. För att göra det krävs en grundläggande förståelse för vad begreppen "hållbar utveckling" och ¿etik¿ betyder, miljömässiga och sociala utmaningar kopplade till datateknik, samt insikter i de etiska aspekterna av dessa utmaningar. Målsättningen med kursen är således att ge studenten den kunskap och de verktyg som krävs för att tackla komplexa hållbarhetsproblem i sin framtida yrkesutövning samt tillämpa dessa kunskaper genom att reflektera över hållbarhet och etik i genomförandet av ett datatekniskt projekt.   
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelseRedogöra för fundamentala begrepp och frågeställningar inom hållbar utveckling och etiska ramverk samt hur de kan relatera till data- och informationsteknikBeskriva samspelet mellan aktuella samhällsfrågor och teknikens utveckling, speciellt med inriktning emot data- och informationsteknikFärdighet och förmågaInhämta och bearbeta samhällsinformation nödvändig för att utveckla ett data- eller IT-systemAnalysera ett data- eller IT-system och dess samverkan med sin omgivning både ur ett hållbarhets- och ett etiskt perspektiv Redogöra för och diskutera sina slutsatser samt den information och de argument som ligger till grund för dessa i dialog med olika intressenter Värderingsförmåga och förhållningssättKritiskt förhålla sig till inhämtad informationReflektera över sina val i utvecklandet av ett data- eller IT-system, både när det gäller produkten och hur den blev till Reflektera över etiska och hållbarhetsaspekter av tillämpningar av data- och IT-system
	
                Innehåll
	Kursen har ett praktiskt förhållningssätt till etik och hållbar utveckling. Det innebär att studenterna i projektform utvecklar ett eget data- eller IT-system under kursens gång. Det utvecklade systemet och de val de gjort under utvecklingens gång utgör erfarenheter som de sedan tillämpar teoretiska begrepp och frågeställningar på som presenteras tidigare i kursen. På så sätt görs aktuella samhällsfrågor konkreta och relaterbara till studenternas egna arbete och framtida profession som ingenjörer.
        	  
                Organisation
	De teoretiska begreppen samt projektets form presenteras i början av kursen i form av föreläsningar. De introducerande föreläsningarna följs upp av handledningstillfällen när kursens fokus går över till projektarbetet. Parallellt fördjupas teorin genom att ett antal data- eller IT-system analyseras ur olika teoretiska perspektiv. I slutet av kursen förväntas studenterna kunna redogöra för sitt system och hur de valt att implementera det både i skriftlig och muntlig form.
	
                Litteratur
	            Hållbar utveckling - nyanser och tolkningar ISBN 9789144121871
		
                       Examination inklusive obligatoriska moment
       	Studenterna examineras både i grupp och individuellt. Gruppexamination består av en rapport där både det implementerade systemet och gruppens arbete analyseras utifrån etiska ramverk och hållbarhetsperspektiv. Den individuella examinationen består av att tillämpa de teoretiska kunskaperna på fallbeskrivningar av system som presenteras genom föreläsningar och/eller litteratur.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Grundläggande begrepp från matematiken som måste behärskas före kursstart är:- Komplexa tal- Linjär algebra- Taylorutveckling- Ordinära differentialekvationer- LaplacetransformenDet förutsätts även att man har kunskaper om de grundläggande fysikaliska samband som behövs för att ställa upp energi-, kraft- och materialbalanser. 
	
                Syfte
	Reglering i tekniska system är en kombination av mätning och därpå baserad styrning, med användning av återkoppling; en regulator utnyttjar informationen i mätvärdena om systemets tillstånd för att påverka systemet enligt fastställda krav.Denna grundkurs syftar till att introducera grunderna inom reglertekniken och de metoder som används för att konstruera grundläggande reglersystem för dynamiska system. Kursen vidgar datateknikstudenternas perspektiv på tekniska system och ger förståelse för hur mekanik, elektronik, datorteknik och reglerteknik samverkar. Dessa insikter kan utnyttjas till att förbättra och utveckla nya produkter med ny funktionalitet och förbättrad prestanda.Efter avklarad kurs ska studenten ha grundläggande kunskaper i reglertekniska analys- och designmetoder för att på ett ingenjörsmässigt vis kunna lösare enklare reglerproblem. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	förklara funktionen hos ett reglersystem, samt beskriva dess möjligheter och begränsningar; definiera begreppen återkoppling och framkoppling;formulera dynamiska modeller för enklare tekniska system, såväl i form av tillståndsekvationer som överföringsfunktioner;linjärisera olinjära modeller;analysera linjära systems egenskaper i tids- och frekvensplanet och transformera mellan olika representationsformer;skissa frekvenskurvor i Bodediagram samt tolka frekvenskurvor i Bodediagram och Nyquistdiagram;dimensionera vanliga typer av filter beroende på vilket frekvenssvar som önskas;tillämpa Nyqvistkriteriet för att avgöra stabiliteten för ett återkopplat system;analysera ett reglersystem med hjälp av känslighetsfunktioner, och förstå de möjligheter, begränsningar och konflikter som råder mellan önskemålen i ett reglersystem och hur detta är kopplat till systemets kretsöverföringsfunktion;välja och dimensionera P-, PI- och PID-regulatorer så att önskade specifikationer uppfylls;förstå och förklara alternativa designprinciper och regulatorstrukturer, såsom störningframkoppling, kaskadreglering och tillståndsåterkoppling;implementera enkla regulatorer med dator, samt förstå sampling och vikningseffekten;använda moderna datorhjälpmedel för att underlätta analys, design och utvärdering av dynamiska system.
	
                Innehåll
	Inledning: Exempel på reglerproblem, återkoppling och framkoppling, kompensering av störningar, servofunktioner, hantering av parametervariationer, inverkan av mätstörningar och styrsignalbegränsningar.Dynamiska modeller: Överföringsfunktioner, blockdiagram, transient- och frekvensanalys, Bodediagrammet. Principer för framtagning av dynamiska modeller för tekniska system. Speciell uppmärksamhet ägnas åt likheter mellan system från helt olika teknikområden. Tillståndsmodeller, linjärisering och simulering.Analys av återkopplade system: Stabilitet, Nyquistkriteriet, stabilitetsmarginaler, känslighet och robusthet med avseende på parameterosäkerheter och icke-modellerad dynamik. Prestanda och noggrannhet, transienta och stationära egenskaper, specifikation i tids- och frekvensplanet.Dimensionering av reglersystem och filter: Grundläggande principer för regulatordesign, möjligheter och begränsningar beroende på motsättningar mellan olika frekvensområden. Design av PI- och PID-regulatorer, kaskadreglering, framkoppling samt tillståndsåterkoppling.Implementering: Digital implementering baserat på analog design, hantering av styrsignalbegränsningar.Laborationer och inlämningsuppgifter: Design och implementering av regulatorer för verklig process.
        	  
                Organisation
	Föreläsningar och övningar.Laboration och inlämningsuppgifter (obligatoriska).
	
                Litteratur
	            Se kurshemsida.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen (U, 3, 4, 5), samt godkänd laboration och inlämningsuppgifter (U, G).

	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Matematikkurser i IT1-2.
	
                Syfte
	En civilingenjör skall ha en gedigen analytisk förmåga baserad på en matematisk och naturvetenskaplig grund, samt ett ingenjörsmässigt och vetenskapligt angreppssätt på nya problem. För detta krävs bland annat goda grundkunskaper inom klassisk och modern fysik samt träning i att lösa problem och bygga teoretiska modeller. Detta är också väsentligt för att man på ett effektivt sätt skall kunna samverka med olika specialister. Kursen "Fysik för ingenjörer" syftar i sin helhet till att bygga upp en sådan kompetens av kunskaper och färdigheter.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- redogöra för principer och lagar för materiens egenskaper och uppträdande samt vad som bestämmer hur och varför kroppar rör sig- formulera matematiska modeller utgående från verkliga tekniska eller fysikaliska frågeställningar- redogöra för ett antal grundbegrepp som är centrala i all fysik och teknik, främst energibegreppet- göra enklare beräkningar i grundläggande kvantfysik och kunna förstå uppbyggnaden av atomer och fasta ämnen, vågpartikel-dualism m.m- beskriva och exemplifiera kvantfysikens betydelse för moderna tekniska tillämpningar.
	
                Innehåll
	Kursen inleds med mekanik och vågrörelselära. Med hjälp av begrepp som kraft, energi och rörelsemängd beskrivs och förklaras rörelse hos föremål i vår omgivning. Därefter introduceras de tänkesätt och de begrepp som krävs för att förstå den mikroskopiska världen. För att förstå den mikroskopiska världen behöver man veta hur atomer, moleyler och fasta ämnen är uppbyggda. När detta är behandlat går vi över mot rörelse i mikrovärlden och hur partiklar och vågor transporteras. Kunskapen om händelseförloppen på atomär nivå är av avgörande betydelse för utvecklingen av den moderna mikro- och nanotekniken. På kursen tar vi upp en rad tillämpningar, exempelvis blir det laborativt arbete med elektronmikroskop.
        	  
                Organisation
	Föreläsningar, räkneövningar samt tutorials. De senare är tillfällen för inlämning av lösningar på inlämningsuppgifter, studentpresentationer av lösningar av dessa  och diskussion i halvklass. Denna aktivitet är frivillig men kan ge bonuspoäng att addera till resultatet på den skriftliga tentan.
	
                Litteratur
	            University physics av Young & Freedman.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen och godkända laborationer.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	-
	
                Syfte
	Under första året syftar kursen Kommunikation och ingenjörskompetens till att tydliggöra rollen som IT-ingenjör, vad som krävs av en ingenjör och skapa motivation för fortsatta studier.
Vidare syftar kursen till att fördjupa studenternas kommunikativa kompetenser och träna skrivande och muntlig framställning. Kursen avser att skapa språklig medvetenhet och arbeta med varseblivning om vilka faktorer som styr och utgör effektiv kommunikation.
Kommunikationsdelen
Delkursen Kommunikation är den dominerande och syftar till att etablera en god metodik för skrivande och förståelse för skrivprocessen. Ett aktivt deltagande i delkursen ger en god förmåga att kunna reflektera kring det egna skrivandet samt aktivt kunna arbeta med textförbättring av egna texter såväl som andras. Vidare syftar kursen till ökad medvetenhet samt reflektion kring kommunikation och lärande.
Genom arbetet med muntlig framställning möjliggörs insikt i, förbättrad förmåga och ökad reflektion kring det projektområde teknologerna valt att arbeta med. I ett lite större perspektiv syftar kursen även till att ge fortsatta möjligheter för studenterna att förbättra förmågan att förmedla teknisk information.
Ingenjörskompetensdelen
Kursen syftar till att göra teknologen medveten om tänkbara yrkesroller, kompetenser som behövs för framtida studier och yrkesliv och samtidigt relatera dessa till egna förmågor och värderingar. Delkursen syftar också till att skapa en förståelse för hur grupper fungerar och hur man effektivt arbetar i grupp.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	* tillämpa en effektiv skrivprocess i grupp såväl som individuellt* omsätta metoder för att anpassa innehåll och stil till målgrupp och kommunikationssituation* dokumentera och redogöra för ingenjörsmetodik och resultat i ingenjörsprojekt* utforma en resonerande text, enligt grundläggande principer för argumentation och diskussion* planera och genomföra muntliga presentationer med ett professionellt och akademiskt förhållningssätt* använda verktyg och metoder för textbearbetning* läsa och förhålla sig kritiskt till ett ämnesinnehåll samt hantera källor i text enligt akademiska principer* analysera texter med avseende på innehåll och språklig utformning Efter avslutad ingenjörskompetensdel skall studenten kunna:* redogöra för vanliga yrkesroller inom IT-området samt kompetenser som krävs för att fungera väl i dessa roller* reflektera över sina egna förmågor och önskningar i förhållande till tänkbara yrkesroller* identifiera och tillämpa verksamma metoder för arbete i grupp
	
                Innehåll
	Kommunikationskursen  omfattar både muntlig och skriftlig framställning. De moment som rör skrivande och skrivprocessen är t.ex. textmedvetenhet och färdighet i textproduktion. Vidare finns inslag av textanalys, retorik, källkritik, textlayout. Viss betoning ligger på rapportskrivning och innefattar genomgång och diskussion av skrivregler med avseende på den tekniska rapporten och vetenskaplig text.

Genomgående innehåller kursen diskussioner kring och metodik för textförbättring, anpassning, av information till olika målgrupper och kommunikationssituationer och från text till tal. Stil- och språkriktighetsfrågor i skrift såväl som tal diskuteras genomgående i syfte att ge en allmän orientering i det samtida språket.Utöver de större skrivuppgifterna som ligger till grund för examinationen genomförs under kursens gång också en hel del skrivövningar, både i klassrummet och mellan lektionerna i form av inlämningsuppgifter. 

Inom ramen för Ingenjörskompetensdelen bjuds personer från näringsliv och högskola in för att få en översiktlig bild av yrkesroller och kompetenser kopplade till Informationsteknik. Föreläsningarna har olika tema som förutom olika yrkesroller kan handla om entreprenörskap, konsultrollen, hållbar utveckling osv. Genom reflektion kopplar studenten det som sagts till sig själv och sin kommande roll som ingenjör.Inom ramen för gruppdynamik betonas innehåll/process, värderingar, gruppnormer, gruppers utvecklingsprocess, målfokusering, grupproller, feedback, personliga styrkor.
        	  
                Organisation
	Kursen är indelad i två moment: en kommunikationskurs om 6,0 hp och en ingenjörskompetensdel om 1,5 hp.Kommunikationskursens undervisning består av föreläsningar, övningstillfällen i mindre grupper samt individuell och gruppvis handledning. Respons på inlämnade texter och genomförda presentationer ges löpande och efter kursslut. Kursen samverkar till viss del med projektkursen som ges parallellt på programmet. Ingenjörskompetensdelen består av föreläsningar, gruppvisa övningar och individuella reflektioner. 
	
                Litteratur
	            Litteratur till kommunikationsdelen.  Fackspråks skrivhandledning. Artiklar och texter delas ut under kursens gång.
För referenslitteratur såsom ordlistor och skrivregler, se kurshemsida.
Litteratur till ingenjörskompetensdelen
Litteratur och material: se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Obligatoriska inlämningsuppgifter samt muntlig presentation utgör betygsunderlaget. Utöver bedömning av de större uppgifterna beaktas närvaro under föreläsningar och lektioner. Betygsskalan är U, 3, 4 och 5.Ingenjörskompetensdelen: obligatorisk närvaro. Betygsskala U och G.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen förutsätter en viss matematisk mognad som lämpligen inhämtas via de tidigare kurserna i programmet.
	
                Syfte
	Kursens syfte är att, tillsammans med övriga matematikkurser, ge en matematisk allmänbildning användbar i fortsatta studier och yrkesverksamhet. Kursen skall ge kunskaper i envariabelanalys nödvändiga för övriga kurser inom IT-programmet.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	kunna definiera och manipulera elementära funktioner och algebraiska uttryckförklara begreppen derivata och integral och kopplingen dem emellan 
beräkna integraler både analytiskt och numeriskt
förklara optimalitetskriterier
kunna lösa enklare differentialekvationerapproximera funktioner med polynom samt framställa dem som potensserier 
kombinera kunskaper om olika begrepp i praktisk problemlösning 


	
                Innehåll
	Grundläggande analys i en variabel: elementära funktioner, gränsvärdesbegeppet, kontinuitet och deriverbarhet för reella funktioner, medelvärdessatsen, Riemannintegralen, primitiva funktioner och kopplingen till integraler, tillämpningar av intregralberäkningar på volymer av kroppar och längden av kurvor, enklare differentialekvationer, Taylorutvecklingar och approximationer av funktioner, komplexa tal 
        	  
                Organisation
	Föreläsningar och övningar.
	
                Litteratur
	            Calculus, a Completa Course av R. A. Adams Addison Wesley Longman
		
                       Examination inklusive obligatoriska moment
       	Avslutande skriftlig examination. Frivillig dugga som kan ge bonuspoäng till tentan kan förekomma.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Grundläggande kunskaper inom diskret matematik, linjär algebra och analys.
	
                Syfte
	Kursen avser att ge
- Förståelse av grundläggande sannolikhetslära, statistik och kombinatorik som är viktig för tekniska studier i allmänhet och studier i informationsteknologi i synnerhet.
- Färdighet i att förstå och använda det matematiska språket.
- Förmåga att kommunicera matematik.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- identifiera problem inom tekniska studier och särskilt studier i informationsteknologi, som är lämpliga att behandla med fundamentala begrepp och metoder inom sannolikhetsteori och statistik.
- beskriva och analysera sådana problem med begrepp och metoder i statistik och diskret matematik.
- tillämpa grundläggande statistiska metoder som punkt- och intervalskattning, hypotesprövning och linjär regression i problemlösning.
	
                Innehåll
	Kursen består av olika teman. Inom varje tema studeras relevanta matematiska begrepp. Samma kursmoment återkommer, i fördjupad framställning, i flera teman.
De moment som ingår i kursen är:
- Sannolikhetslära och Markovkedjor -- stokastiska variabler, väntevärde, varians, korrelation, betingade sannolikheter, stora talens lag, centrala gränsvärdessatsen.
- Statistik -- skattningar, konfidensintervall, test.
- Kombinatorik -- kombinationer, permutationer, genererande funktioner.

I sannolikhetsläran läggs tonvikten på diskreta modeller.
        	  
                Organisation
	Undervisningen byggs upp kring teman. Involverad matematik presenteras översiktligt och studeras sedan djupare inom ramen för den övriga kursverksamheten som består av:
- Föreläsningar som belyser och förklarar den matematiska teorin.
- Lektioner där uppgifter med anknytning till teorin löses enskilt och i grupp.
	
                Litteratur
	            Meddelas senare.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Obligatoriska inlämningsuppgifter.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Grundläggande kunskaper inom diskret matematik, linjär algebra och analys.
	
                Syfte
	Kursen avser att ge
förståelse av grundläggande sannolikhetslära, statistik och kombinatorik som är viktig för tekniska studier i allmänhet och studier i datateknik i synnerhet.
färdighet i att förstå och använda det matematiska språket.
förmåga att kommunicera matematik.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	identifiera problem inom tekniska studier och särskilt studier i informationsteknologi, som är lämpliga att behandla med fundamentala begrepp och metoder inom sannolikhetsteori och statistik. beskriva och analysera sådana problem med begrepp och metoder i statistik och diskret matematik. tillämpa grundläggande statistiska metoder som punkt- och intervallskattning, hypotesprövning och linjär regresion i problemlösning. 
	
                Innehåll
	Kursen består av olika teman. Inom varje tema studeras relevanta matematiska begrepp. Samma kursmoment återkommer, i fördjupad framställning, i flera teman. De moment som ingår i kursen är:
Sannolikhetslära och Markovkedjor -- stokastiska variabler, väntevärde, varians, korrelation, betingade sannolikheter, stora talens lag, centrala gränsvärdessatsen.
Statistik -- skattningar, konfidensintervall, test.
Kombinatorik -- kombinationer, permutationer, genererande funktioner.
I sannolikhetsläran läggs tonvikten på diskreta modeller.
        	  
                Organisation
	Kursverksamheten består av:

Föreläsningar som belyser och förklarar den matematiska teorin.
Lektioner där uppgifter med anknytning till teorin löses enskilt och i grupp.


	
                Litteratur
	            Meddelas senare.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Obligatoriska inlämningsuppgifter.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Matematisk analys i en variabel, komplexa tal samt komplexa exponentialfunktioner. Elektriska nät.
	
                Syfte
	Kursen ska ge en grundläggande kunskap om linjära system och hur dessa kan användas för att beskriva effekter i fysikaliska system. Olika matematiska verktyg för att beräkna relationen mellan insignal och utsignal hos ett linjärt system lärs ut.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	
identifiera och ge exempel på olika signaltyper som periodiska signaler, absolut summer/integrer-bara signaler, energisignaler och bandbegränsade signaler.identifiera viktiga systemegenskaper som linjäritet, skift-invarians, kausalitet och BIBO.stabilitet, i olika exempel.välja lämpliga transformer (Fourierserier, kontinuerlig och diskret tid Fouriertransform, Laplacetransform, diskret Fouriertransform och z-transform) för ett givet problem.beräkna transformen för, i kursen, vanligt förekommande signaler. tillämpa transformmetoder för att lösa LTI-ekvationen  y = h * x, både i kontinuerlig och diskret tid, när två av faktorerna är kända.identifiera Nyquist-frekvensen för en bandbegränsad signal.använda samplingsteoremet för att rekonstruera bandbegränsade signaler från samplade värden.tolka DFT grafer   (Diskret Tid Fouriertransform) av samplade signaler. 
	
                Innehåll
	Kursen behandlar:Kontinuerliga och diskreta signaler. Signalmodeller.
LTI-system och deras egenskaper. Faltning.
Fourierrepresentationer av olika typer av signaler samt deras egenskaper.
Parsevals formel.
Sampling samt rekonstruktion av samplade signaler.
Diskret Fouriertransform (DFT) - numerisk beräkning av Fourierrepresentationer.
Laplacetransform och z-transform.
Impuls- och stegsvar.
Systembeskrivningarna: Överföringsfunktion och Frekvenssvar.

        	  
                Organisation
	Föreläsningar, räkneövningar och en laboration.
	
                Litteratur
	            Se kurshemsida.

		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen
Laboration

	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Matematik (inklusive diskret matematik och linjär algebra), programmering, algoritmer och / eller datastrukturer.
	
                Syfte
	Kursen behandlar optimeringsproblem i diskreta strukturer såväl i teori som praktik. Det finns starka kopplingar till optimeringsteori (linjär optimering), datavetenskap (algoritmer och komplexitet), och operationsanalys. Optimeringsproblem uppstår i många olika sammanhang, exempelvis transportlogistik, telekommunikation, industriell planering, ekonomi, bioinformatik, hårdvarudesign och kryptologi. En karaktäristisk egenskap hos sådana problem är att de är svåra att lösa. Kursen syftar till att utveckla förmågan att modellera verkliga problem och att använda matematiska och algoritmiska verktyg för att lösa dem, optimalt eller heuristiskt.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- Identifiera optimeringsproblem inom olika tillämpningsområden,- Formulera dem i exakta matematiska modeller som representerar det väsentliga av de verkliga problemen, men fortfarande hanterbarbara genom beräkningsmetoder,- Bedöma vilka problemklass ett givet problem tillhör,- Tillämpa linjär optimering, relaterade generiska metoder, och ytterligare heuristik, till beräkningsproblem,- Förklara geometriska egenskaper av linjär optimering,- Duala optimeringsproblem och användning av duala former för att bestämma gränser,- Arbeta med den vetenskapliga litteraturen inom området.
	
                Innehåll
	Modellering, (heltal) linjär optimering och deras geometriska egenskaper, dualitet i optimering, branch-and-bound och annan heuristik, några speciella grafalgoritmer
        	  
                Organisation
	Föreläsningar och inlämningsuppgifter.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att kunna följa kursen krävs programmeringskunskaper (exempelvis C, Java eller Haskell), erfarenhet  av MATLAB är önskvärt men inget krav.  Dessutom krävs  kunskaper inom linjär algebra, sannolikhetslära och algoritmer motsvarande inledande kurser i respektive ämnen.
	
                Syfte
	I kursen diskuteras teori och tillämpning av algoritmer för maskininlärning och slutledning, utifrån ett AI perspektiv. I detta sammanhang betraktar vi ”lärande” som slutledning från givna data eller erfarenheter som resulterar i en viss modell som generaliserar dessa uppgifter. Slutledning är att bestämma de önskade svaren eller åtgärder baserade på modellen.Algoritmer av detta slag används vanligen i till exempel klassificeringsuppgifter (teckenigenkänning, eller att förutsäga om en ny kund är kreditvärdig etc.) och i expertsystem (till exempel för medicinsk diagnostik). Ett nytt och kommersiellt viktig område är ”data mining”, där algoritmer används för att automatiskt identifiera speciellt intressant information och speciella relationer i stora kommersiella eller vetenskapliga databaser.Kursen avser att ge en god förståelse för detta tvärvetenskapliga område, med tillräckligt djup för att använda och utvärdera tillgängliga metoder, och för att kunna följa aktuell vetenskaplig litteratur inom området.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Tillämpa sunda matematiska principer för att på vetenskaplig grund dra slutsatser och forma hypoteser från empiriska data och modeller,Förklara en representativ uppsättning av tillgängliga metoder maskininlärning,Utvärdera metoderna kvalitativt och kvantitativt, och att identifiera såväl styrka som svagheter.

	
                Innehåll
	Övervakat Lärande: Bayes-klassificerare, Fisher-diskriminantanalys, perceptron-baserade metoder, support-vektormaskiner, regression, boosting.Oövervakad inlärning: Algoritmer för klustring, EM-algoritmen, mixture-modeller, kernel-metoder.Grafiska modeller: Dolda Markov-modeller, metoder för att propagera antaganden (belief propagation).


        	  
                Organisation
	Föreläsningar och inlämningsuppgifter.
	
                Litteratur
	            Information om litteratur ges på kursens hemsida före kursstart.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända inlämningsuppgifter. Baserat på tentamensresultat och inlämningsuppgifter ges betygen U,3,4 eller 5.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kurs TIN092 Algorithms eller motsvarande.
	
                Syfte
	Kursen handlar om avancerade metoder för design och analys av algoritmer. Det fortsätter på samma sätt som den första kursen i algoritmer och upprätthåller en strikt analytisk stil. Kursen går djupare in i specialiserade ämnen och kan  även hänvisa till den aktuella forskningen.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- ha fördjupade kunskaper om några viktiga konstruktions- och analysmetoder för algoritmer,  i synnerhet om metoder för att lösa NP-komplexa problem- i viss mån kunna tillämpa dessa metoder för att lösa nya problem som kan uppstå i olika tillämpningar- kunna upptäcka samband mellan olika algoritmiska problem och reducera (återföra) dem till varandra- kunna förklara komplexa algoritmer och bevis i skriftlig form- vara medveten om utvalda ämnen av aktuell forskning i algoritmer
	
                Innehåll
	- Approximationsalgoritmer och deras analys,- Användning av linjär optimering, i synnerhet för approximation,- Nätverksflöde med vissa tillämpningar- Randomiserade algoritmer och deras analys med hjälp av lämpliga stokastiska variabler,- Snabba algoritmer som använder trädstrukturer och små parametrar
        	  
                Organisation
	Föreläsningar och inlämningsuppgifter.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Inlämningsuppgifter och en avslutande hemtentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Två år av studier inom datavetenskap eller motsvarande. Kursen DAT151 Programming language technology eller någon motsvarande. 
	
                Syfte
	Syftet med kursen är att utveckla en förståelse för hela processen i en kompilator, med början i lexikalanalysen och som avslutas med maskinkodsgenerering. Laborationen i kursen består i att skriva en komplett kompilator för ett litet imperativt språk.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	
känna till grundläggande principer for runtime-miljöer, parameterskickande och minneshantering, och att implementera dessa i en kompilator;
designa och implementera kompilatorscheman för att generera intermediärkod eller assembler från ett källprogram;
använda dataflödesanalys för att implementera registerallokering och kodoptimeringar;
designa och implementera utökningar för ett litet imperativs programmeringsspråk och känna till de viktigaste aspekterna av att kompilera objektorienterade programmeringsspråk.
	
                Innehåll
	Kompilatorteori och -implementation, med tonvikten på kodgenerering och runtime-miljöer.
        	  
                Organisation
	Undervisningen består av föreläsningar, ett programmeringsprojekt och individuell handledning i samband med projektet. Projektet är huvuddelen i kursen och består i att implementera en komplett kompilator för ett litet imperativt programmeringsspråk. Föreläsningarna ger den kunskap som krävs för att genomföra projektetet, men äver en översikt över de teoretiska grunderna och möjliga utökningar till kompilatorn.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Programmeringsprojekt och muntlig redovisning. Betygsskala U, 3, 4, 5.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen kräver förkunskaper inom logik, DAT060 Matematisk logik för datavetenskap eller SSY165 Händelsediskreta system. Kännedom om objektorienterad programmering (t.ex. Java) är också en fördel. 
	
                Syfte
	Kursens syfte är att lära ut kunskap, teknik och omdöme angående viktiga tekniker inom formella metoder: modellkontroll (model checking) och deduktiv verifikation. Båda stilarna introduceras på tre sätt: konceptuellt, teoretisk och praktiskt, genom användning av ett specifikt verktyg. Kursen bygger på kunskap om första ordningens logik och temporallogik, och visar hur dessa formalismer kan appliceras, och utökas för verifikation av mjukvara.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter godkänd kurs ska studenten kunna:Kunskap och förståelseredogöra möjligheter och begränsningar hos logikbaserade verifikationstekniker föratt bedöma och förbättra mjukvarukvalitet avgöra vad som kan och inte kan uttryckas i en given formalism för specifikationeller modelleringavgöra vad som kan och inte kan analyseras med en given logik och bevismetodFärdigheter och förmågaformellt uttrycka säkerhetsegenskaper och liveness hos (parallella) programbeskriva grunderna i verifikation av säkerhetsegenskaper och liveness med hjälp av modellkontroll (model checking)använda verktyg som automatiserar modellkontroll av säkerhetsegenskaperskriva formella specifikationer för klasser i objekt-orienterade program med hjälp av kontrakt och klassinvarianterbeskriva hur förhållandet mellan program och formell specifikation kan representeras i en programlogikverifiera funktionella egenskaper hos enkla Javaprogram med ett verifikationsverktyg.Värderingsförmåga och förhållningssättbedöma och kommunicera betydelsen och vikten av korrekthet i mjukvaruutvecklinglösa problem relaterade till utveckling av välfungerande mjukvara genom abstraktion, modellering och rigorösa resonemang.
	
                Innehåll
	Kursen behandlar två formella metoder för mjukvara, modellkontroll (model checking) och deduktiv verifikation.För modellkontroll täcker kursen följande ämnen:ett specifikationsspråk för parallella processerverifiering av påståendensynkroniseringverifikation av säkerhets- och livenessegenskaper som är skrivna i temporal logikFör deduktiv verifikation täcker kursen följande ämnen:ett specifikationsspråk på enhetsnivå för Java programen logik för verifikation av Java programverifikation av Java program, i meningen att implementationen av en enhet uppfyller dess specifikationen
        	  
                Organisation
	Det är cirka två föreläsningar per vecka och det finns en övning per vecka. Studenterna utför praktiska exempelövningar med hjälp av verktygen i laborationer.
	
                Litteratur
	            Se separat literaturlista.
		
                       Examination inklusive obligatoriska moment
       	Kursen bedöms genom två inlämningsuppgifter som normalt genomföras i grupper om två, samt en muntlig tentamen vid kursens slut. Inlämningsuppgiter och muntlig tentamen kan godkännas oberoende av varandra. För att få godkänt på hela kursen krävs godkänt på både inlämningsuppgifterna och den muntlig tentamen. Betyg för godkända studenter avgörs av tentamensresultatet.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Kursen TDA596 eller motsvarande.
	
                Syfte
	Kursen syftar till att ge studenten kunskap om skillnader och styrkor/svagheter hos distribuerade system jämfört med sekventiella eller starkt kopplade system. Målet är att ge studenten förmågan att undersöka de problem som måste hanteras och lösas för att skapa ett väl fungerande distribuerat system.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Få en god förståelse om de framsteg i teknologi, system- och kommunikationsarkitektur som har drivit på användningen av distribuerade system. Redogöra för, förklara och tillämpa principerna och metoderna för att skapa effektiva protokoll och algoritmer för distribuerade system, och hur dessa interagerar med systemets övergripande design. Redogöra för och förklara de utmaningar och möjligheter som applikationsutvecklare ställs inför vid utveckling av ett distribuerat system eller sensornätverk. Designa, implementera och utvärdera distribuerade system och applikationer.

	
                Innehåll
	Kursen tar upp följande problem inom distribuerade system:
Replikering:
För- och nackdelar med att replikera data, såsom förbättrade responstider och pålitlighet vilket kan vägas mot kostnader för ökande kommunikation för att säkerställa att data förblir konsistent.
Synkronisering:
Olika sorters lås och metoder för att upptäcka deadlock samt metoder för synkronisering utan lås.
Feltolerans och återställning:
Metoder för checkpointing, optimistisk och pessimistisk återställning.
Feltolerans och metoder att uppnå konsensus i distribuerade system:
Synkroniserings- och koordineringsproblem är mycket viktiga och fundamentala i distribuerade system. I kursen tas grundläggande lösningar och deras konsekvenser upp, samt visar på lösningar och protokoll för system som måste klara specifika krav.
Feltolerant Multicast.
Resursallokering.
Distribuerade algoritmer: Design och analys av distribuerade algoritmer.
Sensornätverk och energieffektiva distribuerade lösningar.
Denial of Service Attacker.

        	  
                Organisation
	Schemalagda föreläsningar och parallellt med föreläsningarna utförs handledda programmeringsuppgifter. Laborationerna ger studenten möjlighet att undersöka fundamentala egenskaper och beteenden hos de protokoll som tas upp i kursen.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U, 3,4 eller 5.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att vara behöriga för kursen skall studenterna ha klarat av två år av en utbildning på väg mot en högskoleexamen inom datateknik eller motsvarande. Mer specifikt krävs kurserna TDA452 Funktionell programmering, TMV210 Introduktion till diskret matematik och minst en av kurserna DAT151 Programming language technology eller DAT121 Programming paradigms eller motsvarande.Koncept: Abstrakt syntaxträd, semantik, interpretator, kompilator. Algoritm, komplexitet, "divide-and-conquer". Induktionsbevis, logik, likhetsbevis (equality reasoning).Det är rekommenderat, men inte ett krav, att läsa följande kurser i förväg: Algorithms och ("Logic in computer science" eller "Finite automata theory and formal languages").
	
                Syfte
	Kursens mål är att utforska de kraftfulla mekanismer som funktionella programspråk erbjuder när det gäller att lösa verkliga problem och strukturera större program. Fokus ligger på design av programbibliotek och inbäddade språk.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	designa inbäddade domänspecifika språk (EDSL)förklara och ge exempel på (abstrakt) syntax, semantik, etc.implementera EDSL i Haskell (som kombinatorbibliotek)läsa, förstå och utöka Haskellprogram som använder sig av avancerade typsystemegenskaper:typklasser(generaliserade) algebraiska datatyperfunktorer, monader och monadtransformerareanvända specifikationsbaserade utvecklingsteknikerformulera och testa egenskaper som programmet ska uppfyllaresonera om funktionella programs korrekthettransformera program baserat på sådana resonemangförklara och diskutera de ämnen som beskrivs ovan
	
                Innehåll
	En stor fördel med funktionella programspråk är att de flesta språkkonstruktionerna kan namnges och därmed återanvändas som högre ordningens funktioner. Funktionella program kan därför ofta konstrueras genom att kombinera konstruktioner från ett funktionsbibliotek. Den här metoden gör det möjligt att snabbt konstruera program med en hög grad av korrekthet. Detta är den centrala idén i kursen.
Vi kan lära oss en hel del genom att studera standardbibliotekens list-funktioner som map, fold osv. Dessa funktioner kan generaliseras så att de fungerar för andra datatyper.
Realistiska funktionella program måste också hantera tillståndsförändringar, avbrott, "backtracking" och andra "icke-funktionella" beteenden. Vi kommer att jobba med hur dessa kan modelleras rent funktionellt. Det matematiska begreppet "monad" hjälper oss med detta.
Med hjälp av dessa kunskaper kommer vi att konstruera domänspecifika programbibliotek ämnade att lösa problem inom ett ett visst tillämpningsområde. Den här sortens bibliotek kan sägas definiera ett domänspecifikt språk eftersom konstruktionerna som programmeraren använder huvudsakligen består av biblioteksfunktioner. Vi kommer att studera bibliotek för inläsning (parsning), utskrift (pretty printing), grafik, webbprogrammering och interaktion. Kursen kommer också att presentera en del aktuell forskning vilket kan göra att innehållet varierar en del mellan åren. Kursen använder sig huvudsakligen av programmeringsspråket Haskell.
        	  
                Organisation
	Det är två 2-timmars förelåsningar varje vecka. Studenterna förväntas lägga rätt mycket egen tid på programmering och självstudier. Mycket hjälp erbjuds också.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Det är 2-3 obligatoriska programmeringslaborationer som genomförs i par, och en skriftlig tentamen i slutet av kursen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att kunna följa kursen krävs kunskaper om datastrukturer och diskret matematik, motsvarande inledande kurser i ämnena samt programmeringskunskaper (exempelvis C, Java eller Haskell). 
	
                Syfte
	Kursens syfte är att ge en översikt över kryptografiska begrepp, primitiver, protokoll och applikationer.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	sammanfatta de viktigaste målen för kryptografi och illustrera dessa med ett antal exempel på hur kryptografiska tjänster är integrerade i aktuella tillämpningar, både i mjukvara och hårdvarabeskriva mål, konstruktionsprinciper och gemensamma strukturer för att skapa hemliga nycklar, t.ex. block- och ström-chiffer och meddelandeautentiseringskoder.identifiera, analysera och förklara olika former av attacker som baserats på felaktig användning av primitiver, tillstånd eller protokoll.förklara hur grundläggande primitiver för öppna nyckar kan definieras utifrån svårlösliga matematiska problem som t.ex. diskreta logaritmer eller faktorisering, samt analysera varianter av dessa system.förklara hashfunktioners olika användningsområden i andra kryptografiska primitiver och protokoll, samt de krav detta ställer på hashfunktioner.exemplifiera när olika säkerhetskoncept, såsom informationsteoretiska, beräkningsbara, bevisbara och praktisk säkerhet, är tillämpliga samt beskriva de säkerhetsgarantier som de erbjuder.förklara grundläggande tekniker för kryptering med såväl hemlig som öppen nyckel.
	
                Innehåll
	Kursen innehåller grundläggande begrepp inom kryptografi (sekretess, autentisering, oavvislighet). Kryptering med symmetrisk nyckel: block- och strömchiffer, konstruktionsprinciper, exempel, och meddelandeautentiseringskoder. Kryptering med öppen nyckel: asymmetriska chiffer, signaturer. Attackmodeller och säkerhetskoncept. Protokoll för nyckelhantering, autentisering och andra tjänster.
        	  
                Organisation
	Undervisning ges i form av föreläsningar, övningar och handledning i samband med inlämningsuppgifter.
	
                Litteratur
	            Information om litteratur ges på kursens hemsida före kursstart.http://www.cse.chalmers.se/edu/course/TDA352/
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända inlämningsuppgifter. Baserat på tentamensresultatet ges betygen U, 3, 4 eller 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Godkänt slutbetyg i TDA548 'Grundläggande Programvaruutveckling' eller motsvarande, och i TDA552 'Objektorienterad Programmering och Design' eller motsvarande.
	
                Syfte
	Kursen avser att ge kunskap om och övning i professionell utveckling av mjukvara genom praktiskt projektarbete.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs skall studenten besitta följande kunskaper, färdigheter och förmågor:Kunskap och förståelseRedogöra för arbetsmetodik i tekniska utvecklingsprojekt, speciellt mjukvaruprojekt.Beskriva alla faser i ett utvecklingsarbete: problemidentifiering, problemformulering, användaranalys, specifikation, design, implementation, testning, utvärdering, etc.Beskriva grundläggande koncept inom mjukvaruutveckling, t.ex. krav och utvecklingsprocess.Färdigheter och förmågorGenomföra ett mindre objektorienterat mjukvaruprojekt i grupp enligt fastställd utvecklingsprocess och tidsplan.Dokumentera projektarbetet i form av en grundläggande kravspecifikation och ett enklare designdokument.Tillämpa färdigheter från tidigare programmeringskurser, så som design-principer och -mönster, i en projektliknande miljö.Använda moderna hjälpmedel för programutveckling t.ex. testramverk, 'build automation', och versionshanteringssystem.Värderingsförmåga och förhållningssättReflektera över god objektorienterad design och implementation i projektet.
	
                Innehåll
	Kursen presenterar en enkel, testdriven, objektorienterad process. Begrepp som iterativ utveckling, objektorienterad analys och design, domän- och designmodell introduceras. Olika aspekter på design gås igenom: testbarhet, beroenden, krav, m.fl.
        	  
                Organisation
	Vi kommer att ha:ett mindre antal föreläsningar,ett obligatoriskt seminarium,och några 'workshops'.Parallellt med detta genomför studenterna, i grupper om fyra, ett fullständig utvecklingsprojekt i form av ett mindre mjukvaruprojekt. I projektet ingår obligatoriska veckovisa handledarmöten och en muntlig slutpresentation.
	
                Litteratur
	            Eventuell kurslitteratur meddelas på kurshemsidan.
		
                       Examination inklusive obligatoriska moment
       	Examination sker genom muntlig presentation av projektet, inlämning av källkod samt ett slutrapport där studenterna dokumentera projektets specifikation och design. Dessutom ska studenterna göra en 'peer-review' av andras design och kod som ingår i slutrapportet. Dessa tre delar vägs samman för betyget. En exakt beskrivning angående viktning och betygskriterier finns i kurs-pm. Betyg sätts på gruppnivå men den slutgiltiga betyget anpassas på individnivå, baserat på individuellt bidrag.Vi använder följande betygsskala: underkänd (U), 3, 4, 5.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kunskaper inom (satslogik) logik. Gedigen kompetens inom Java. Viss kunskap inom funktionell programmering är också önskvärd. För studenter utan nämnda kunskaper kommer kursen att erbjuda vissa tutorials, dock kommer man att behöva spendera något mer tid till att även lära sig denna paradigm. 
	
                Syfte
	Parallellprogrammering har blivit allmänt förekommande i olika typer av system, exempelvis för att påskynda beräkningar där fysisk parallellism kan utnyttjas, för att tillhandahålla interaktiva fleranvändarmiljöer, och för att hantera interaktion med asynkrona externa händelser. Kursen syftar till att ge en introduktion till de principer som ligger till grund för parallella system, samt praktiska programmeringslösningar för modellering där man utnyttjar samtidighet i program. Områden där dessa principer och praxis är relevanta inkluderar operativsystem, distribuerade system, realtidssystem och flerkärniga arkitekturer.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse:demonstrera kunskaper om de frågor och problem som uppstår när man konstruerar korrekta parallela program;identifiera synkroniseringsproblem typiska för parallella program, såsom kapplöpningsvillkor och ömsesidig uteslutning.Färdigheter och förmåga:tillämpa vanliga mönster, såsom låsning, semaforer och meddelandestyrd synkronisering för att lösa parallella programmeringsproblem;kunna använda tekniker, speciellt avsedda för parallellprogrammering, i moderna parallell-programmeringsspråk;implementera lösningar med vanliga mönster i moderna programmeringsspråk.Värderingsförmåga och förhållningssätt:värdera styrkorna och möjliga svagheter inom det parallella programmeringsparadigmet;bedöma om ett program, ett bibliotek, eller en datastruktur är säker för användning i ett parallellprogrammeringsproblem;välja korrekta språkkonstruktioner för att implementera synkronisering och lösa kommunikationsproblem mellan olika beräkningsenheter.
	
                Innehåll
	Fysisk kontra logisk parallellismProblem som kan uppkomma vid samtidighet: kapplöpningsvillkor, uteslutning, dödläge, rättvisa, livelockÖmsesidig uteslutningSynkronisering med delat minne: med semaforer eller finkornig låsningMeddelandestyrd synkronisering: med meddelandeköer
        	  
                Organisation
	Kursen organiseras i form av föreläsningar och laborationer.
	
                Litteratur
	            Aktuell information om litteratur ges innan kursstart på kursens hemsida. Vid senaste genomförandet av kursen användes "Principles of Concurrent and Distributed Programming (Second edition)", Mordechai Ben-Ari, Addison-Wesley, 2006. ISBN 0-321-31283-X.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen (4.5 hec) och laborationer (3.0 hec) som normalt genomförs i par. Det slutliga kursbetyget avgörs av resultatet på både laboratoriedelen ochtentamen.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Programmering i ett objektorienterat programmeringsspråk, inklusive rekursiva funktioner och metoder. Grundläggande matematiska begrepp, såsom mängder, funktioner, relationer, grafer, logaritmer och induktionsbevis.
	
                Syfte
	Datastrukturer och algoritmer utgör fundamentala byggstenar i nästan alla programvaror. Kunskap om  dataabstraktion, datastrukturer och algoritmer är nödvändig vid konstruktion, användning och underhåll av förändringsbara, återanvändbara och effektiva programkomponenter.Kursen ger kunskaper och färdigheter i konstruktion och användning av algoritmer och datastrukturer, samt en introduktion till algoritmanalys och dataabstraktion.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
Kunskap och förståelse
redogöra för några grundläggande abstrakta datatyper och datastrukturer, bland annat listor, köer, hashtabeller, träd och grafer 
redogöra för några av de algoritmer som används för att effektivt hantera dessa datastrukturer, och förklara varför de är korrekta 
Färdigheter och förmåga 
tillämpa grundläggande abstrakta datatyper och datastrukturer, samt algoritmer relaterade till dessa 
implementera och använda abstrakta datatyper som gränssnitt och datastrukturer som klasser, i ett objektorienterat programmeringsspråk 
använda ett standardbibliotek för datastrukturer och algoritmer 
Värderingsförmåga och förhållningssätt 
analysera effektivitet hos vissa algoritmer, till exempel söknings- och sorteringsalgoritmer 
göra välgrundade val mellan olika datastrukturer och algoritmer för olika tillämpningar
	
                Innehåll
Kursen täcker följande ämnen: 
abstrakta datatyper 
asymptotisk effektivitet och enkel komplexitetsanalys av imperativ kod 
vanliga datastrukturer såsom fält, listor, träd och hashtabeller 
hur dessa kan användas för att implementera abstrakta datatyper såsom stackar, köer, prioritetsköer, avbildningar, mängder och grafer 
standardalgoritmer för dessa datastrukturer, inklusive deras resurskravsöknings- och sorteringsalgoritmer 
standardbibliotek för datastrukturer och algoritmer 
vanliga algoritmdesigntekniker, såsom brute force, divide and conquer ("dela upp och erövra"), och randomisering
        	  
                Organisation
	Undervisningen består av föreläsningar, övningar och laborationer med handledning.
	
                Litteratur
	            Se kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen (4,5 hp) samt laborationer (3,0 hp). Laborationerna genomförs normalt i par. 
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen förutsätter tidigare programmeringserfarenhet och grundläggande kunskaper om datastrukturer och algoritmer. Kursen får inte inkluderas i en examen som innehåller (eller som är baserad på en annan examen som innehåller) antingen kursen TDA555 (Introduktion till funktionell programmering) eller kursen TDA451 (Functional programming).
	
                Syfte
	Den här kursen introducerar ett funktionellt programmeringsspråk och relaterade koncept för studenter som redan har en del kunskap inom programmering. Det främsta målet är att göra det möjligt för studenterna att skriva realistiska (små till mellanstora) program, och att samtidigt introducera några grundläggande koncept inom datavetenskap.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- skriva små till mellanstora funktionella program inom olika tillämpningar,- utnyttja olika programmeringstekniker som är vanliga inom funktionell programmering såsom: användandet av rekursion,modellering med rekursiva datatyper, abstraktion och kodåteranvändning med hjälp av högre ordningens funktioner och monader,- värdera styrkorna och möjliga svagheter inom det funktionella programmeringsparadigmet.
	
                Innehåll
	I den här kurser kommer studenten att lära sig om funktionell programmering genom programmeringsspråket Haskell. Exempel på ämnen som bemöts i kursen är:- funktioner som första klassens värden- datastrukturer (listor, tupler, användardefinierade datatyper)- rekursion och rekursiva datatyper- polymorfi och typklasser- rena funktioner vs input-output- moduler och abstrakta datatyper- testning av funktionella program- lat evaluering och oändliga objekt- monader
        	  
                Organisation
	Undervisningen består av föreläsningar och självstudieövningar, med möjlighet till hjälp online och vid utsatta kontorsbesökstider.
	
                Litteratur
	            Se kursens webbsida.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig examination och obligatoriska labbar.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen LSP310 Kommunikation och ingenjörskompetens eller motsvarande.
	
                Syfte
	Ingenjörskompetensmomentet av kursen syftar till att göra teknologen medveten om de kompetenser som behövs för framtida studier och yrkesliv samt öka förmågan att reflektera över hur hon/han, med sina individuella förutsättningar, på ett systematiskt sätt kan bygga upp samt dokumentera sin utveckling.Kursens kommunikationskompetensdel sker på engelska, med syfte att öka elevernas förståelse av olika genrer av kommunikation i sin disciplin, som akademisk och yrkesmässig, och deras förmåga att tillämpa denna kunskap för att kommunicera på ett effektivt sätt på engelska både i tal och skrift, för att förbereda dem inför framtida studier och yrkesliv.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Analysera, kritiskt läsa och sammanfatta olika typer av akademiska och yrkesmässiga texterTillämpa kunskapen av olika typer av akademiska och yrkesmässiga texter för att producera en text som kritiskt sammanfattar ett ämne relevant till studenternas studier.Ge konstruktiv feedback till andra, och kommunicera tydligt och effektivt deras arbete i tal. Efter genomgånget ingenjörskompetensmoment skall teknologen skapat sig en bild av sina egna professionella styrkor och svagheter samt planerat hur man utifrån dessa skall förbereda sig för yrkeslivet.
	
                Innehåll
	Kursen har två delar. Första delen är Kommunikation på engelska, andra delen är ingenjörskompetens.Den engelska delen av kursen syftar till att utveckla en mängd kritiskt tänkande som är nödvändiga för effektiv kommunikation i professionella och akademiska sammanhang. Målet är att utveckla läsning, skrivning och kommunikativa strategier som kan överföras till andra sammanhang och språk. Av denna anledning omfattar kursen aktiviteter som läsning och analys av ämnes relevanta vetenskapliga texter (till exempel konferensbidrag), översikt och praktik av effektiva retoriska strukturer i skrift, peer-review, och reflektion för planering och självbedömning. Kursen kräver av studenterna att tillämpa dessa kunskaper i skrift och i tal, genom att producera en text som kritiskt sammanfattar en disciplin-relevant ämne och argumenterar för en synpunkt, och genom att muntlig presentera detta arbete och ge feedback till andra.Kursdelen ingenjörskompetens börjar i lp 3 och innehåller flera olika delar; karriärplanering i grupp, seminarier/workshops och ett studiebesök. Karriärplanering i grupp syftar till att reflektera över den egna rollen. Övningar kring individens starka sidor, intressen, värderingar, färdigheter och viktiga erfarenheter görs både individuellt och i grupp. Möten med arbetslivet sker i olika former som seminarier/workshops och ett studiebesök i grupp hos en IT-ingenjör i industrin. Studiebesöket följs av rapportskrivning och en powerpoint-presentation. Sista momentet är en individuell självreflektion där den egna karriärplaneringen ska kopplas ihop med studiebesöket.
        	  
                Organisation
	Kursen omfattar seminarier och laborationer i mindre grupper samt föreläsningar.Kursen har två delar och går över Lp3 och Lp4 i vårterminen. Engelska går i huvudsal i läsperiod 3, Starta din karriärplanering i huvudsak går i läsperiod 4.
	
                Litteratur
	            Relevant litteratur kommer att tilldelas under kursen, inklusive självvalda sekundära källor. Powerpoints, stenciler ochannat material kommer att publiceras på kurshemsidan.
		
                       Examination inklusive obligatoriska moment
       	Ingenjörskompetensen: Obligatorisk närvaro.Engelskan: Obligatoriska uppgifter (1,5 hp , UG), skriftlig inlämningsupgifter (3,8 hp,TH och UG).
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	
	
                Syfte
	Den här kursen är en introduktion till imperativ programmering och programvaruutveckling. Kursen syftar till att ge grundläggande färdigheter i programmeringsmässig problemlösning med imperativa metoder, och ge en första inblick i programmerandet som hantverk. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunna slutföra enkla programmeringsuppgifter. Detta betyder att studenten ska veta hur man:    läser programmeringuppgifterbryter ner programmeringsuppgiften i mindre lättare deluppgifterkonstruerar en lösning till den ursprungliga uppgiften med att lösa mindre deluppgifterskriver testprogram som hjälper med programmeringen och som kontrollerar kvaliteten av den färdiga lösningen Förklara och använda sig av grundläggande begrepp inom imperativ och objektorienterad programmering. Detta betyder att studenten ska kunna förklara och använda sig av:skillnaden mellan primitiva typer och referenstyper, och illustrera detta med principskisser över minnesceller med värden och referenserhur en- och flerdimensionella fält deklareras, skapas och användsskillnaden mellan statiska metoder/variabler och instansmetoder/variablerskillnaden mellan en metod som returnerar ett värde och en metod med resultattypen voidhur parameteröverföring sker vid anrop av metoderskillnaden mellan en klass och ett objektbegreppet subklass och beskriva hur en sådan deklarerasvad ett interface är och vad som menas med att en klass implementerar ett interfacebegreppen datainkapsling och informationsdöljandeenkla grafiska och händelsestyrda programKonstruera metoder med utnyttjande av programspråkets datatyper och styrstrukturer. Detta betyder att studenten ska kunna:    definiera statiska metoder och instansmetoder, med lämpliga val av parametrar och resultattyputnyttja styrstrukturer som for-, while-, och if -satser på ett strukturerat sätthantera såväl en- som flerdimensionella fältanvända standardklasser för att konstruera listorläsa indata som matas in av en användarepresentera utdata för användaren och utföra enkel redigering av utdatautnyttja undantag för att signalera och ta hand om eventuella fellösa enkla problem med rekursion Självständigt konstruera imperativa och enkla objektorienterade program som använder färdiga standardklasser och enkla egenhändigt konstruerade klasser. Detta betyder att studenten ska kunna:    definiera enkla klasser som beskriver konkreta begrepp såsom tärningar, bankkonton, etc.skriva program där man använder standardklasser som Integer, Double, Scanner, String, StringBuilder, Arrays, Color, System, ArrayList m.fl.dokumentera program med kommentareranvända kodningsstandardtesta sina program
	
                Innehåll
	I kursen används programspråket Java. Följande moment behandlas:    variabler, uttryck och satser, prioritet, metoder, parameteröverföring, rekursionfält och inläsning från en användareenkla typer och referenstyper, typomvandlinggrundläggande objektorienterade begrepp såsom klasser, objekt, metoder och instansvariablerolika tester på likhet, kanonisk form för klassergrundläggande arv och gränssnitt (interfaces)standardklasser för grafiska användargränssnitthändelser och lyssnarefelhantering med hjälp av undantagsökning på Internet efter dokumentation för standardklassernågra av klasserna i Javas API
        	  
                Organisation
	Undervisningen ges i form av samverkande gruppövningar och föreläsningar, samt handledning i samband med obligatoriska programmeringsuppgifter 
(laborationer).
	
                Litteratur
	            Information om aktuell litteratur ges på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamina samt obligatoriska inlämningsuppgifter (laborationer).
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Denna kurs är en direkt fortsättning på kursen TDA548 Grundläggande programvaruutveckling, vilken, eller en motsvarande kurs, utgör förkunskapskrav.
	
                Syfte
	Programvaruutveckling är centralt för en civilingenjör inom informationsteknik. Kursen presenterar det objektorienterade programmeringsparadigmet och lägger stor vikt vid design av objektorienterade program.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelseRedogöra för objektorienterade design-principer.Känna igen och redogöra för olika objektorienterade design-mönster; inklusive deras syfte och effekt.
Färdigheter och förmågaAnvända och redogöra för grundläggande objektorienterade koncept, som klasser och objekt, primitiver och referenser, metoder och konstruktorer, variabler och attribut, etc.Använda och redogöra för mer avancerade språkmekanismer och tekniker, som exceptions, generics, trådar, defensive copying, etc,Använda och redogöra för arv och parameteriserade typer, och därtill hörande mekanismer, för att åstadkomma polymorfism och återanvändning av kod.Applicera design-principer och design-mönster för att åstadkomma sund objekt-orienterad design.Designa och implementera objektorienterade program för en given domän på ett sunt sätt med avseende på korrekthet, modifierbarhet och återanvändbarhet.Utföra och beskriva testning av objektorienterade program.
Värderingsförmåga och förhållningssättAnalysera och utvärdera kod enligt principer för god objektorienterad design och implementation.
	
                Innehåll
	Kursen presenterar det objektorienterade programmeringsparadigmet och lägger stor vikt vid programkonstruktion och design.Begreppsapparat och teknik utökas och fördjupas: metoder, objekt, abstrakta- och anonyma klasser, initiering, polymorfism, överlagring och överskuggning,implementations- och gränssnittsarv, användning generiska typer, konstruktion av enkla generiska klasser, felhantering, immutabilitet och defensive copying, och introduktion till trådar och trådsäkerhet m.m.Hantering av tillstånd, beroenden, modulära program, programmeringstekniker, modifierbarhet, designprinciper, designmönster och MVC-modellen.För att beskriva designen används elementära delar av the Unified Modelling Language (UML).
        	  
                Organisation
	Undervisningen består av föreläsningar, övningar och laborationer samt handledning i samband med dessa.
	
                Litteratur
	            Information om aktuell litteratur ges innan kursstart på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom:- Muntlig tentamen (3 hp, betygskala: U, 3, 4, 5) - Laboration (3 hp, betygskala: U, G)- Inlämningsuppgift (1,5 hp, betygskala: U, 3, 4, 5) Laborationerna utförs i grupper om normalt 3 studenter.På hela kursen ges något av betygen: Underkänd (U), 3, 4, 5. För att bli godkänd på kursen krävs det att ha minst en 3:a på både muntlig tentamen och skriftlig rapporten samt Godkänd (G) på datorlaborationer. Betyget för hela kursen blir sammansatt av betyget för muntlig tentamen och inlämningsuppgiften. I sammansättningen väger betyget för muntlig tentamen tyngre.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Detta är en introduktionskurs i programmering som använder det funktionella programmeringsspråket Haskell. Det primära syftet är att lära ut grundläggande datavetenskapliga begrepp, samtidigt som studenterna lär sig skriva realistiska (små) program. Sekundära mål är att ge en grund för kommande kurser (specifikt datastrukturer, algoritmer, digitala kretsar, formella metoder och kurser i programspråk), samt att ge en inblick i karriärsmöjligheter inom data genom inbjudna talare.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	beskriva grundläggande begrepp inom modern funktionell programmering, såsom: datatyper, funktioner inklusive högre ordningens funktioner, lat evaluering, oändliga datastrukturerbeskriva en grundläggande uppsättning av programmeringstekniker, såsom: rekursion, testning, användning av datatyper för modellering och problemlösningskriva små funktionella program för olika tillämpningarstrukturera program så att de blir lätta att förså och förändra, genom lämplig användning av datatyper, abstraktion, och återanvändbar kodgenomföra effektiv testning av funktionella program med hjälp av lämpliga verktygvisa färdigheter att i olika programmeringssammanhang bedöma vilka programmeringstekniker som lämpar sig bäst för att lösa det aktuella problemet
	
                Innehåll
	Detta är en introduktionskurs i programmering som använder ett funktionellt programmeringsspråk. Det primära syftet är att lära ut grundläggande datavetenskapliga begrepp, samtidigt som studenterna lär sig skriva små program. Sekundära mål är att ge en grund för kommande kurser (specifikt datastrukturer, algoritmer, formella metoder och kurser i programspråk).Specifika ämnen som behandlas i kursen är:värden, typer och funktionersammansatta datastrukturer (listor, tupler, användardefinierade typer)högre ordningens funktioneranvändning av abstraktionsmekanismer för att undvika repetitiv programmeringrekursion och rekursiva datatypereffektiva och ineffektiva programinput-outputverifiering med hjälp av testning
        	  
                Organisation
	Undervisningen består av föreläsningar, gruppmöten samt handledda programmeringsövningar.
Kursen kan komma att ges på svenska eller engelska.

Studenter som redan har programmeringskunskaper uppmuntras att välja DIT143/TDA452 Funktionell programmering istället. Kursen kan inte ingå i en examen där kursen DIT143/TDA452 ingår, inte heller i en examen som baseras på en annan examen där DIT143/TDA452 ingår.

	
                Litteratur
	            Slides och annat material från föreläsningarnaBok: Learn You a Haskell for Great Good!Se kurshemsidan för detaljer.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstentamen, samt ett antal obligatoriska laborationer som normalt genomförs i grupp om 2-3 studenter. 
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	För denna kurs krävs att studenterna har genomgåttMinst ett års utbildning på något program med inriktning Datavetenskap, Software Engineering, Datateknik eller liknande.En kurs i diskret matematik (t.ex. TMV200)En kurs i objektorienterad programering  (t.ex. TDA545)

	
                Syfte
	Kursens mål att att ge studenterna grundläggande förståelse av tekniker för att hantera fel i program och kunskaper om hur dessa tekniker kan användas praktiskt. Återkommande ämnen är a) identifikation av programvarufel, b) analys av dessa, och c) att rätta dem. Kursen ger även praktiska och teoretiska kunskaper om hur man systematiskt bygger upp bevis för att en programenhet gör det den är avsedd att göra. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter genomgången kurs ska studenten kunna:
Beskriva omfattning och begränsningar av både informella och formella tekniker för att upptäcka, analysera och rätta programfel.Beskriva grundprinciper och hur man skriver precisa specifikationer för mjukvaruenheter.Diskutera grundprinciper inom mjukvaruverifiering.Karakterisera indata för vilka ett program går fel.Lokalisera, analysera och fixa programfel.Resonera formellt om enkla program för att garantera korrekthet.Bedöma olika tekniker för felsökning och felprevention. Bidra till utveckling och förbättring av tekniker för felsökning och felprevention i en given kontext.

	
                Innehåll
	 Kontrastera formella och informella metoder för testning (terminologi, täckningsgrad, enhetstester, ramverk för enhetstester), felsökning (kontroll, arbetsflöde, lokalisering, verktyg), formella specifikationer (pre-/post conditions, invarianter), formell verifikation (logik, verktyg). Kursen är genomgående fokuserad på imperativa program generellt, särskilt objektorienterade program. 
        	  
                Organisation
	 Kursen omfattar en kombination av föreläsningar, övningstillfällen och inlämningsuppgifter (labbar). Detaljer finns på kurshemsidan.	
	
                Litteratur
	            Slides från föreläsningar distribueras via kurshemsidan. Litteraturlista finns på kurshemsidan. 
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom en individuell skriftlig salstenta (5p) och inlämningsuppgifter (2.5p). Inlämninguppgifterna görs normalt i grupper om 2-3 studenter. Om en inlämningsuppgift inte godkänns på första försöket kan studentet få ett andra försök.Tentan och inlämningsuppgifterna kan godkännas oberoende av varandra. För att få godkänt på hela kursen krävs godkänt på både tenta och inlämningsuppgifter. Betyg bestäms då av tentamensresultatet.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	Studenten ska ha kunskaper från en grundläggande kurs  i datorkommunikation eller datornätverk som behandlat TCP/IP-protokollstacken och ha programmeringserfarenhet. Dessutom krävs en kurs i operativsystem eller motsvarande.
	
                Syfte
	Varför blir datorsystem allt mer distribuerade? Hur kan vi bygga pålitliga och feltoleranta distribuerade system? Hur har Internet kunnat skala till flera miljarder användare? Hur är moderna distribuerade system som t.ex. molntjänster, smarta elnät och kommunicerande bilar uppbyggda? Detta är några frågor som kursen behandlar. Målet med kursen är att få en förståelse för design av distribuerade system och de underliggande principer och mekanismer som dagens distribuerade system använder sig av. Föreläsningarna ger nödvändig fundamental kunskap och laborationerna ger praktisk erfarenhet av utveckling av distribuerade system och erfarenhet med att arbeta med verklighetsanknutna problem.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	1.	Kunskap och förståelse:Visa kunskap om grundläggande koncept inom distribuerade system och förstå utmaningar och problem såsom synkronisering, konsistens, replikering, och feltolerans.Kunna beskriva tillämpningar inom distribuerade system och de mekanismer dessa använder för att kunna utföra sina tjänster.Ha god kunskap i att kunna diskutera och analysera de problem och krav som olika designmetoder och lösningar står inför.God förståelse inom området för att kunna jämföra och sammanfatta styrkor och svagheter med olika lösningar.2.	Praktisk färdighet:Kunna utveckla, programmera och utvärdera småskaliga distribuerade system med hjälp av de fundamentala mekanismer som introducerats i kursen.
Visa förmåga i att utveckla programvara som kan fungera i miljöer med t.ex. opålitliga kommunikationslänkar och begränsad bandbredd.3.	Beskrivning- och analysförmåga:Ha god förmåga att beskriva och analysera både existerande och nya metoder för design av distribuerade system, speciellt med avseende på systemens förmåga att skala och vara feltoleranta.4.	Kommunikation:De kommunikativa färdigheter som praktiseras i den här kursen ger ökad förmåga till samverkan i grupp genom träning i muntlig och skriftlig presentation av labbresultat.

	
                Innehåll
	Kursen börjar med en introduktion av grundläggande koncept för distribuerade system och de utmaningar dessa står inför. Därefter repeteras viss väsentlig kunskap om kommunikation och operativsystem för att därefter fokusera på:Namngivning
Ömsesidig uteslutning (mutual exclusion) och val (election)
Klockor och tid
Konsistens och replikering
Feltolerans i distribuerade system
Utvalda representativa distribuerade applikationerLektionerna ger studenterna nödvändig teoretisk kunskap och laborationerna praktisk erfarenhet av att utveckla distribuerade system med verklighetsanknutna problem, där praktiskt analysarbete och laborationer ökar förståelsen både av koncept och verkliga problem. Målet är att efter kursen ska studenten förstå fundamentala egenskaper och problem vid design av distribuerade system.

        	  
                Organisation
	Schemalagda föreläsningar och parallellt med föreläsningarna utförs hemuppgifter och handledda labbuppgifter. 
	
                Litteratur
	            Andrew S. Tanenbaum, Marten van Steen, "Distributed Systems - Principles and Paradigms", Pearson
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända hemuppgifter och laborationer. Baserat på tentamensresultatet ges betygen U, 3,4 eller 5.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att delta i kursen krävs att studenten fullgjort två års studier inom Datavetenskap eller liknande ämne.Kunskap om materialet som täcks av kurserna DAT151 Programming language technology och EDA263 Computer security rekommenderas men är inte ett formellt krav.
	
                Syfte
	De säkerhetsmekanismer som kan anses vara standard idag är inte tillräckliga för att skydda mot alla typer av attacker. Flertalet attacker sker på applikationsnivå genom att utnyttja fel och misstag i applikationen. Detta gör att attacken till viss del kan kringgå existerande skydd eftersom den körs med den attackerade applikationens rättigheter. Ett sätt att säkerställa att program är säkra är att använda programspråksmetoder för att analysera programmets källkod - en del av språkbaserad säkerhet. Språkbaserad säkerhet för med sig möjligheten att använda existerande metoder inom programanalys för att specificera och säkerställa säkerhetskrav.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs ska studenten ha praktisk och teoretisk kunskap om programspråkssäkerhet. Detta inkluderar färdighet att identifiera säkerhetsproblem på applikations- och språknivå, samt utforma och implementera lösningar på dessa problem och argumentera för lösningarnas säkerhet, användbarhet och effektivitet.Studenten skall kunna demonstrera kunskap om:olika grunder för attacker på applikationsnivå, såsom trojanska hästar, maskar, buffer overrun attacker, webapplikationsattacker, och covert channels.ochspråkbaserade metoder för att skydda mot sådana attacker, såsom statisk analys, reference monitoring, programtransformation och stackinspektion.Dessutom skall studenten öka sin förmåga att skriva tekniskt material.
	
                Innehåll
	Denna kurs kombinerar praktik med nytt forskningsmaterial, vilket innebär emfas på användning av formella och semantiska modeller för att specificera och säkerställa säkerhetsegenskaper.Kursen har ett genomgående dualt synsätt vad gäller attacker och skydd mot desamma. Denna dualitet genomsyrar föreläsningarna, laborationerna, uppgifterna och projekten. 
        	  
                Organisation
	Kursen består av föreläsningar, gruppmöten och projektpresentationer.
	
                Litteratur
	            Se separat lista.
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs det att studenten färdigställer och blir godkänd på samtliga laborationer samt blir godkänd på det examinerande projektet, vilket innefattar både en presentation av projektet i klassen och en godkänd projektrapport.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Minst 5 hp kurser inom temat miljö och hållbar utveckling (MHU).
	
                Syfte
	Syftet med kursen är att ge studenterna möjlighet att tillämpa sina kunskaper om IT och hållbar utveckling och arbeta med verkliga problem och utmaningar som företag och andra organisationer i Västra Götalandsregionen står inför. Studenterna tar själva initiativ till projektarbeten och kontakt med tänkbara samarbetspartners, med stöd av undervisande personal och andra resurser i kursen. I projektet arbetar studenterna sedan med problemlösning med hjälp av grön IT, inom ett ramverk för hållbar utveckling och affärs- och organisationsutveckling. Problemen och lösningarna ska ha en tydlig IT-koppling. Slutresultat kan vara konkreta lösningsförslag såväl som förstudier av mer analytisk karaktär. För att sätta in projektarbetet i ett sammanhang innehåller kursen även en introduktion med fördjupning i hållbar utveckling och innovation.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter fullgjord kurs ska studenten kunnaRedogöra för begreppet hållbar utveckling med avseende på företags och andra organisationers användning av informationsteknologi.Redogöra för begreppet innovation och dess tillämpbarhet på grön IT-lösningarAnvända metoder och verktyg från IT-området samt kunskaper om hållbar utveckling och innovation för att genomföra en problemanalys.Använda metoder och verktyg från IT-området samt kunskaper om hållbar utveckling och innovation för att utarbeta en kravspecifikation.Använda metoder och verktyg från IT-området samt kunskaper om hållbar utveckling och innovation för att utarbeta en design.Använda metoder och verktyg från IT-området samt kunskaper om hållbar utveckling och innovation för att utarbeta ett konceptförslag.Reflektera kring de möjligheter och begränsningar som grön IT erbjuder för utveckla organisationer och minska miljöpåverkan.
	
                Innehåll
	En allmän del där studenterna fördjupar sin förståelse av områdena grön IT, hållbar utveckling och innovation. Ett projektarbete där studenterna tillsammans med representanter från ett eller flera företag eller andra organisationer, lärare och handledare samt medstudenter deltar i och bidrar till samtliga faser av förändringsarbetet mot en ökad hållbarhet: problemorientering, problemanalys och problemlösning. Modul II avser problemanalysen (analys av företagets verksamhet, problem och potential för grön IT). Modul III avser problemlösningen (kravspecifikation, design och konceptförslag).
        	  
                Organisation
	Kursen omfattar en inledande föreläsningsserie, övningar, handledning av projektarbete, samt redovisning av projektarbete.
	
                Litteratur
	            Kurslitteratur meddelas vid kursstart.
		
                       Examination inklusive obligatoriska moment
       	Examinationen består av två delar:Skriftlig dugga om 3 hp som behandlar de teman som tas upp i introduktionsmodulen och primärt examinerar lärandemål 1, 2 och 7.Projektarbete i grupp om 4,5 hp som primärt examinerar lärandemål 4-7.För slutbetyg krävs att bägge momenten är godkända. 
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Inga särskilda förkunskaper krävs. 
	
                Syfte
	Kursen syftar till att både introducera grundläggande kunskaper inom området hållbar utveckling samt metoder och verktyg för uthålligare IT-utveckling och IT-användning.Kursen syftar till att ge en förståelse för de komplexa sammanhang som påverkar hållbarhetsanpassning av produkter och tjänster sett ur ett livscykelperspektiv samt att erbjuda möjligheter att reflektera kring IT-ingenjörens möjligheter att på olika nivåer och områden medverka till ett hållbart samhälle.En viktig utgångspunkt är att kursens olika moment skall ge kunskaper och möjligheter att träna på att bryta ner komplexa hållbarhetsfrågeställningar till hanterbara delproblem som ligger inom IT-ingenjörens påverkansområden. 
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	- Redogöra för olika dimensioner av och perspektiv på begreppet hållbar utveckling.- Redogöra för orsaker till ohållbar utveckling samt relevanta exempel på tillstånd och trender i natursystem och samhälleliga system. Exempel: befolkningstillväxt, välfärdsutveckling, resursanvändning, konsumtion, ekonomiska drivkrafter/hinder, inlåsningseffekter, emissioner m.m.- Redogöra för IT områdets relationer till natur och samhälle. - Använda metoder och verktyg för enklare analys av miljöeffekter härrörande från en produkts livscykel. Exempel: Beskrivning av resursanvändning, emissioner, miljöpåverkan och systemeffekter kopplade till ett specifikt tekniksystem.- Använda problemlösning samt kritiskt och kreativt tänkande i grupp för att koppla IT-utveckling och IT-användning till sociala, ekologiska och ekonomiska aspekter av hållbar utveckling.- Reflektera över sin yrkesroll och sitt professionella ansvar såväl som sin medborgarroll i förhållande till hållbar utveckling.- Reflektera över hur fakta skiljer sig från värderingar, identifiera etiska dilemman.- Reflektera över vad som är trovärdiga faktaanspråk och hur det är rimligt att använda dessa som stöd för argument.
	
                Innehåll
	- Principerna i hållbar utveckling- IT-ingenjörens roll i ett hållbart samhälle- Att formulera utvecklingsprojekt utifrån hållbarhetsprinciper- Historiska perspektiv på IT och hållbar utveckling- Att genomföra en nulägesanalys- Konkreta exempel på pågående IT- och hållbarhetsprojekt- Livscykelanalyser- Utmaningen med kompensationseffekter.- Metoder för urval och genomförande av IT- och hållbarhetsprojekt
        	  
                Organisation
	Undervisningen bedrivs i form av föreläsningar parallellt med projektarbetet som genomförs i grupp och redovisas skriftligt och muntligt.Kursens ena moment innehåller teoretiska principer inom hållbar utveckling som också utgör underlag för formulerandet av en vision för projektarbetet. Detta moment redovisas i en individuell hemtentamen som lämnas in efter kursens slut.  Kursens andra moment är ett grupprojekt som omfattar formulering av en hållbarhetsvision, verktyg för nulägesanalys samt utveckling och prioritering av IT-baserade lösningar på ett hållbarhetsproblem som identifierats av gruppmedlemmarna. Grupprojektet redovisas i en skriftlig rapport och en muntlig presentation.  
	
                Litteratur
	            Se kurshemsida.
		
                       Examination inklusive obligatoriska moment
       	Projektarbete i grupp som redovisas skriftligt och muntligt (3hp). Skriftlig tentamen (4,5hp).Betygskala: U, 3, 4, 5.Båda kustmomenten måste vara godkända för att kursen som helhet ska bli godkänd.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kursen är en utvidgning och fördjupning av gymnasiets fysikkurser som bygger på de matematiska kunskaper som studenterna har inhämtat i inledningen av D-programmet. För att kunna tillgodogöra sig kursen krävs att man har gymnasiefysiken någorlunda aktuell samt att man har kunskaper i Linjär algebra och Matematisk analys i nivå med D-programmets kurser inom dessa grenar av matematiken.
	
                Syfte
	Kursen syftar till att ge studenterna en bred översikt över fysiken. Studenterna ska bli bekanta med dels fysik som är relevant i deras roll som ingenjörer och dels fysik som ger en fördjupad världsbild. I de delar som är viktiga för ingenjörsrollen är tillämpning av matematik för att behandla fysikaliska modeller av central betydelse.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	inom Mekaniktillämpa Newtons lagar för att lösa enklare mekanikproblembeskriva rörelser i flera dimensioner såväl där komponenterna består av partiklar som där de har utsträckning.
inom Värmelära
tillämpa termodynamikens lagar för att behandla idealiserade termodynamiska processer
lösa enklare värmeledningsproblem.
inom Vågfysikgöra beräkningar på olika typer av fortskridande vågor.
räkna på enklare problem vars lösning kräver insikt i fenomenen interferens och diffraktion.


	
                Innehåll
	Kursen innehåller klassisk mekanik, vågfysik och ellära. I mekanikdelen studeras främst partiklars rörelse, Newtons lagar med tillämpningar, begrepp som arbete, energi, rotationsrörelse, konservering av energi, rörelsemängd och rörelsemängdsmoment. Inom vågrörelsedelen studeras oscillationer och vågor, ljudvågor, superposition och stående vågor. I kursen introduceras ordinära differentialekvationer med fysikaliska tillämpningar såsom transienta förlopp.
        	  
                Organisation
	Undervisningen ges i form av föreläsningar, räkneövningar och laborationer. 

	
                Litteratur
	            "University Physics with Modern Physics", 14: e upplagan. Global edition. Young & Freedman. Pearson
		
                       Examination inklusive obligatoriska moment
       	För att bli godkänd på kursen krävs godkänd skriftlig tentamen samt godkända laborationer. Baserat på tentamensresultatet ges betygen U,3,4 eller 5.
Förutom ordinarie tentamen erbjuds två deltentor under läsperioden. 
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För att kunna följa kursen krävs kunskaper om datastrukturer och diskret matematik, motsvarande inledande kurser i ämnena.
	
                Syfte
	Kursen kretsar kring tre naturliga frågeställningar man ställs inför då man vill använda en dator för att beräkna lösningen på ett problem:Är problemet beräkningsmässigt lösningsbart?Hur kan lösningen utformas?Hur snabbt kan problemet lösas? I kursen behandlas grundläggande metoder för att kunna besvara dessa typer av frågor så exakt som möjligt, och dessutom förbättra förmågan att skriva snabba och väl underbyggda program.

Det viktigaste målet med kursen är att ge allmänna principer för att skapa bra algoritmer för nya problem där det inte finns en känd lösningsmetod.

Andra viktiga aspekter är: att förbättra studenternas intuition för tidskomplexitet hos beräkningsproblem och algoritmer, att visa hur valet av datastrukturer kan påverka prestandan (exekveringshastigheten) för ett program, samt vikten av att anpassa datastrukturer efter algoritmen man vill använda.

	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelsebeskriva dina algoritmer och deras egenskaper: förklara algoritmer skriftligen, så att andra kan förstå hur de fungerar, varför de är korrekta och snabba, och var de är användbara.inse att icke-triviala beräkningsproblem, som måste lösas med hjälp av algoritmer, dyker upp i olika verkliga datortillämpningar och att formalisera dem.intractability: känna igen "intractable problems" och andra klasser av problem som P, NP, NPC.bevisa korrektheten av algoritmer.Färdighet och förmågadesign: tillämpa de viktigaste designteknikerna för effektiva algoritmer (t.ex. giriga, dynamisk programmering, söndra och härska, backtracking, heuristiska) på problem som liknar läroboksexemplen men är nya.utföra hela utvecklingscykeln av algoritmer: problemanalys, välja, modifiera och kombinera lämpliga tekniker och datastrukturer, analys av korrekthet och komplexitet, fylla i implementationsdetaljer, hitta möjliga förbättringar, etc.utföra enkla reduktioner mellan problem, förklara NP fullständighet, känna igen olika beräkningssvåra problem som tenderar att dyka upp om och om igen i olika applikationer, klara, åtminstonei princip, beräkningsmässigt svåra problem med hjälp av heuristik förfiningar av uttömmande sökning, approximativa lösningar, etc.implementera algoritmer ordentligt och utvärdera dem i teori och experimentVärderingsförmåga och förhållningssättkritiskt bedöma algoritmiska idéer och visa förmåga att motstå frestelsen att skapa uppenbara och till synes rimliga algoritmer (som ofta visar sig vara felaktiga) .analysera: förklara varför tidseffektivitet hos algoritmer är avgörande, uttrycka tidskomplexitet på ett rigoröst och vetenskapligt korrekt sätt, analysera tids komplexiteten hos algoritmer (summera operationer i nästlade loopar, lösa vanliga rekursionsekvationer, etc.) det vill säga göra en objektiv bedömning av prestanda för att kunna jämföra med andra algoritmer.Var dock medveten om att detta inte är en kurs i programmering! Fokus ligger på design av algoritmer från en given problemformulering och analys av effektiviteten i dessa algoritmer. Det är, så att säga, det analytiska arbete som måste göras innan du skriver någon kod, om man vill lösa ett nytt problem med hjälp av datorer.
	
                Innehåll
	Kursen ger kunskaper om:Introduktion. Vad är en effektiv algoritm?Verktyg för analys av algoritmer. O-notation. Analysera loopar och rekursiva anrop. Lösa rekursionekvationer.Datastrukturer och algoritmer. Granskning av grundläggande datastrukturer.Kombinera datastrukturer. Merge-and-find.Grafalgoritmer.Giriga algoritmer.Divide-and-conquer.Dynamisk programmering.Backtracking och Implicita sökträd. Branch-and-bound.Kort introduktion till lokala sök-och approximationsalgoritmer.Grundläggande komplexitetsteori. Komplexitetsklasserna P, NP och NPC, reduktioner. Exempel på NP-fullständiga problem. Att hantera svåra problem.Kort introduktion till andra designtekniker: lokal sökning, approximationsalgoritmer, randomiserade algoritmer, förbehandling, nätverksflöde.
        	  
                Organisation
	Kursen ges i form av föreläsningar, kombinerat med handledning i grupper för problemlösning och ett antal inlämningsuppgifter som syftar till att utveckla förmågan att analysera och utforma algoritmer.
	
                Litteratur
	            Information om litteratur ges på kursens hemsida före kursstart.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom individuell skriftlig salstentamen.
	
    

    Behörighet:För kurser på avancerad nivå gäller samma grundläggande och särskilda behörighetskrav som till det kursägande programmet. (När kursen är på avancerad nivå men ägs av ett grundnivåprogram gäller dock tillträdeskrav för avancerad nivå.)
Undantag från tillträdeskraven:
Sökande med  en programregistrering på ett program där kursen ingår i programplanen undantas från ovan krav.
      


            Kursspecifika förkunskaper
	För tillträde till kursen ska studenten ha avklarade kurser om 60 hp inom ämnet datavetenskap eller motsvarande, inklusive en 7,5 hp fortsättningskurs i programmering (TDA552, TDA342 eller liknande), och en 7,5 hp kurs i datastrukturer (DAT037, TDA416 eller liknande).Detta är en avancerad kurs: Vi förutsätter att studenten har akademisk mognad och en vilja att utforska självständigt. Studenten ska ha förmåga att slutföra ett betydande programmeringsprojekt. 
	
                Syfte
	Artificiell intelligens (AI) studerar hur datorer kan utföra uppgifter som traditionellt har ansetts kräva mänsklig intelligens. Syftet med kursen är att ge en fördjupad förståelse för möjligheter och begränsningar med AI-metoder.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Efter godkänd kurs ska studenten kunna:
Kunskap och förståelse:
Förklara grundläggande begrepp och algoritmer för viktad sökning, planering och constraint satisfaction-problem (CSP).
Jämföra fördelar och nackdelar med olika algoritmer för sökning, planering och CSP.
Redogöra för den historiska utvecklingen, nuvarande läge och framtidsutsikter för något AI-delområde.

Färdigheter och förmåga
Välja passande algoritmer för sökning, planering och CSP för att lösa givna AI-problem på ett minnes- och tidseffektivt sätt.
Implementera effektiva algoritmer för sökning, planering och problemlösning i ett passande programmeringsspråk.
Sammanfatta vetenskapliga framsteg och etiska frågeställningar.
Skriva vetenskapliga texter.

Värderingsförmåga och förhållningssätt
Analysera och kritiskt diskutera etiska frågeställningar inom AI.
Granska och konstruktivt kritisera vetenskapliga texter.


	
                Innehåll
	Artificiell intelligens (AI) studerar hur datorer kan utföra uppgifter som traditionellt har ansetts kräva mänsklig intelligens. Kursen ger en introduktion till ämnet och har två huvudsyften.
Det ena syftet är att ge en förståelse för vilka delområden som finns inom AI, deras historiska utveckling, och vilka etiska problemställningar som kan uppkomma inom olika delområden. Detta görs genom att läsa litteratur inom olika AI-områden, att sammanfatta och diskutera litteraturen skriftligt, och att granska uppsatser av andra studenter.Det andra syftet är att lära ut grundläggande begrepp och algoritmer för heuristisk (informerad) sökning, planering och problemlösning, inklusive deras användningsområden, samt hur de kan användas för att lösa intressanta AI-problem. Följande algoritmer och begrepp ingår:
generella sökproblem ¿ viktade och oviktade grafer, grafsökning, trädsökning, sökträd
olika klasser av sök- och planeringsproblem ¿ fullständig respektive ofullständig information, deterministiska respektive ickedeterministiska problem
standardalgoritmer för deterministisk sökning och planering med perfekt information ¿ oinformerad sökning, informerad sökning, lokal sökning
sökning med ofullständig information, ickedeterministiska problem, respektive problem med flera agenter
constraint satisfaction-problem
heuristiker för informerad sökning och för constraint satisfaction-problem


        	  
                Organisation
	Studenterna formar projektgrupper om 3-5 personer, och varje grupp tilldelas en handledare, ett programmeringsprojekt och ett uppsats-ämne. Undervisningsformerna är grupphandledning, uppsatsskrivande, programutveckling i grupper, samt referentgranskning (peer review) på andras uppsatser. Dessutom förekommer teoretiska föreläsningar, praktiska övningsuppgifter och skriftliga prov.
	
                Litteratur
	            Se separat litteraturlista.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras genom:
en individuell skriftlig salstentamen (2,5 hp)
ett programmeringsprojekt utfört i grupp om 3¿5 studenter, med muntlig redovisning (3,5 hp)
en skriftlig uppsats i grupp om 3¿5 studenter, med referentgranskning (1,5 hp)

För att bli godkänd på gruppmomenten måste studenten delta aktivt under handledning, redovisning och i gruppens egen planering, samt ha gjort väsentliga och mätbara bidrag till slutresultatet (programmet och uppsatsen). För att bli godkänd på uppsatsmomentet måste studenten dessutom ha läst och aktivt diskuterat uppsatser av andra projektgrupper.
Om studenten underkänns på ett gruppmoment, får denne en individuell uppgift att slutföra istället för en uppgift att utföra i grupp. Misslyckas även detta så måste studenten göra om hela momentet i en ny projektgrupp.
Det slutliga betyget för kursen är baserat på det vägda medelvärdet av betygen på delkurserna.

	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kunskaper i diskret matematik och programmering.
	
                Syfte
	Kursen handlar huvudsakligen om ändliga automater, reguljära uttryck och kontextfria grammatiker. Den innehåller också en kort introduktion till Turingmaskiner.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	Kunskap och förståelse:Definiera olika begrepp inom automatteori och teorin om formella språk, som (icke-) deterministisk automat, reguljärt uttryck, reguljärt språk, kontextfri grammatik, kontextfritt språk samt Turingmaskin.Färdighet och förmåga:Bevisa egenskaper hos (vissa) språk, grammatiker och automater med rigorösa matematiska metoder.Utforma ändliga automater, reguljära uttryck och kontextfria grammatiker som accepterar eller genererar vissa språk.Beskriva språket som accepteras av en ändlig automat eller som genereras av ett reguljärt uttryck eller en kontextfri grammatik.Transformera beskrivningar av reguljära språk mellan följande formalismer: deterministiska och ickedeterministiska ändliga automater samt reguljära uttryck.Förenkla automater och kontextfria grammatiker.Avgöra om ett ord hör till ett visst (reguljärt eller kontextfritt) språk.Utforma Turingmaskiner för enkla uppgifter.Värderingsförmåga och förhållningssätt:Manipulera formella beskrivningar av (vissa) språk, grammatiker och automater.

	
                Innehåll
	Ändliga automater och reguljära uttryck är enkla beräkningsmodeller. De används bland annat för lexikalanalys, mönsterigenkänning, och styrning av trafiksignaler. Vidare kan deras teori illustrera grundläggande begrepp inom mängdlära och läran om diskreta strukturer.Kontextfria grammatiker används för att parsa och analysera både konstgjorda språk (till exempel programmeringsspråk) och naturliga språk.Turingmaskiner ger en mer uttrycksfull beräkningsmodell. De hjälper dataloger att förstå begränsningarna hos mekaniska beräkningar genom att ge en precis definition av algoritmbegreppet.Innehåll i lite mer detalj: Bevis. Ändliga automater, reguljära uttryck och relaterade algoritmer. Kontextfria grammatiker. Egenskaper hos reguljära och kontextfria språk. Kort introduktion till Turingmaskiner.
        	  
                Organisation
	Föreläsningar, övningar.
	
                Litteratur
	            Kurslitteratur kommer att publiceras senast 8 veckor innan kursstart.
		
                       Examination inklusive obligatoriska moment
       	Kursen examineras med individuella inlämningsuppgifter och en individuell skriftlig tentamen.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Inga.
	
                Syfte
	Kursens syfte är att, tillsammans med övriga matematikkurser, ge en matematisk
allmänbildning användbar i fortsatta studier och yrkesverksamhet. Kursen skall
ge kunskaper i envariabelanalys nödvändiga för övriga kurser inom D-programmet.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	kunna definiera och manipulera elementära funktioner och algebraiska uttryckförklara begreppen derivata och integral och kopplingen dem emellan 
beräkna integraler både analytiskt och numeriskt
förklara optimalitetskriterier
kunna lösa enklare differentialekvationerapproximera funktioner med polynom samt framställa dem som potensserier 
kombinera kunskaper om olika begrepp i praktisk problemlösning 


	
                Innehåll
	Grundläggande analys i en variabel: elementära funktioner, gränsvärdesbegeppet, kontinuitet och deriverbarhet för reella funktioner, medelvärdessatsen, Riemannintegralen, primitiva funktioner och kopplingen till integraler, tillämpningar av intregralberäkningar på volymer av kroppar och längden av kurvor, enklare differentialekvationer, Taylorutvecklingar och approximationer av funktioner, komplexa tal 
        	  
                Organisation
	Föreläsningar, räkneövningar samt
schemalagda smågruppövningar
	
                Litteratur
	            Calculus, a Completa Course av R. A. Adams Addison Wesley Longman
		
                       Examination inklusive obligatoriska moment
       	En avslutande skriftlig tentamen.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Kursen ger grundläggande kunskaper om diskreta matematiska strukturer som behövs för högskolestudier, främst sådana som har anknytning till datorer och programering.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	
  kommunicera matematik, muntligt och skriftligt,redogöra för den grundläggande teoretiska strukturen i matematik med axiom, definitioner och satser,föra enkla matematiska resonemang och bevis,använda logikens språk för att formulera argument,formulera samband i termer av funktioner, relationer och grafer,använda induktion i bevisföring och för att beskriva mängder,redogöra för heltalens multiplikativa struktur,lösa linjära diofantiska ekvationer och räkna med kongruenser,redogöra för RSA-kryptering och kryptera/dekryptera meddelande med denna teknik,lösa enkla kombinatoriska problem,använda grafer för att formulera och lösa matematiska problem.  

	
                Innehåll
	Kursen är uppdelad i tre teman. Inom varje tema studeras relevanta matematiska begrepp. Vissa kursmoment, såsom bevisföring, återkommer i fler teman. Kursens teman är:    Logik, relationer och funktioner, och bevisHeltalsaritmetik och RSA-algoritmenKombinatorik och graferVissa grundläggande begrepp såsom mängder och funktioner introduceras i den introduktionskurs som föregår denna kurs, men de fördjupas och spelar en roll även i denna kurs.
        	  
                Organisation
	Undervisningen byggs upp kring teman. Inom varje tema ingår en temaföreläsning av en inbjuden talare kring en konkret tillämpning där matematiken är avgörande. Involverad matematik presenteras översiktligt och studeras sedan djupare inom ramen för den övriga kursverksamheten som består av:    Schemalagda självstudier i grupp med studiematerial som syftar till reflektion kring den matematiska teorinFöreläsningar som belyser och förklarar den matematiska teorin.Lektioner där uppgifter med anknytning till teorin löses enskilt och i grupp.Studenters presentation av utvalda uppgifter
	
                Litteratur
	            Johan Jonasson och Stefan Lemurell: Algebra och diskret matematik, 2:a upplagan, Studentlitteratur, Lund, 2013.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Under kursens gång kan man presentera lösningar av veckans uppgifter och därmed insamla bonuspoäng för tentan.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Linjär algebra är ett matematiskt verktyg som används inom alla vetenskaper som använder matematik och är därför ett oundgängligt redskap för i stort sett alla civilingenjörer. Detta gäller inte minst för ingenjörer inom datavetenskap som har massor av tillämpningar av linjär algebra. Det slutgiltliga syftet är därför att du som ingenjör skall vara redo att betrakta nya problem utifrån dina kunskaper i linjär algebra och kunna angripa problemen med dessa nya verktyg.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	 redogöra för innebörden hos den linjära algebrans grundläggande begrepp och sambanden mellan dessakombinera tidigare kunskaper i matematik och olika begrepp inom linjär algebra för praktisk problemlösningredovisa lösningar till matematiska problem skriftligt på ett tillfredsställande sättmed stöd av litteratur och internet kunna lösa problem som utvidgar och fördjupar elevens kunskap inom linjär algebraanvända den matematiska programvaran Matlab som stöd för beräkningarskriva och dokumentera program i Matlab för lösning av problem inom linjär algebra

	
                Innehåll
	Geometriska vektorer: 
Skalärprodukt, vektorprodukt, linjärkombinationer, ortogonal projektion, koordinatsystem, linjer och plan.
Matrisalgebra: 
Addition, multiplikation, transponat, identitet och invers.
Linjära avbildningar: 
Matrisrepresentation, geometriska avbildningar, sammansättning och invers.
Vektorer i godtycklig dimension: 
Generalisering av de geometriska begreppen till godtycklig dimension.
Linjära ekvationssystem: 
Matrisform, lösningsmängd, Gausselimination och minstakvadratlösning.
Determinant: 
Definition, beräkning och geometrisk tolkning.
Baser och linjärt oberoende: 
Byta bas i koordinatsystem och för linjär avbildning, ON-bas och ON-matris.
Egenvärden och egenvektorer: 
Karakteristisk ekvation, spektralsatser, diagonalisering och potensmetoden.
Grafer och grannmatriser: 
Grafbegrepp, övergångsmatris, slumpvandring, stationär fördelning och Markovkedja.

        	  
                Organisation
	Undervisningen ges i form av föreläsningar, räkneövningar samt gruppövningar som kombinerar teoretiska fördjupningsuppgifter med datoruppgifter. 

Mer detaljerad information ges på kursens webbsida före kursstart.

	
                Litteratur
	            Anges på kursens hemsida.
		
                       Examination inklusive obligatoriska moment
       	Momentet Tentamen examineras med en skriftlig tentamen med betygen U, 3, 4 och 5. Momentet Laboration examineras med redovisning av inlämningsuppgifter.

	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


                Syfte
	Kursen ger grundläggande kunskaper om diskreta matematiska strukturer som behövs för högskolestudier, främst sådana som har anknytning till datorer och programering.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	
förstå grundläggande matematik som är viktig för tekniska studier i allmänhet och studier i datavetenskap och informationsteknik i synnerhet, 
förstå och kunna använda det matematiska språket, 
föra enkla matematiska resonemang och bevis, 
ha förmåga att presentera matematiska resonemang 
ha övat sin kompetens i problemlösning 

	
                Innehåll
	Kursen består av olika teman. Inom varje tema studeras relevanta matematiska begrepp. Samma kursmoment återkommer, i fördjupad framställning, i fler teman. De moment som ingår i kursen är:

LogikGrundläggane matematiska begrepp: mängdlära, funktioner och relationer
 Bevisteknik: direkta bevis, induktion och rekursion, motsägelsebevis 
 Heltalsaritmetik 
 Kombinatorik 

 Grafteori 

Vissa grundläggande begrepp såsom mängder och funktioner introduceras i den introduktionskurs som föregår denna kurs, men de kommer att repeteras även i denna kurs.
 
Bevisteknik kommer inte att behandlas som ett separat inslag utan kommer snarare att genomsyra alla moment i kursen. Logikmomentet kommer att  utvecklas och ges i samarbete med lärare från institutionen för datavetenskap.Mer detaljerade listor av lärandemål för kursens olika delar kan man hitta på den aktuella kurshemsidan:
        	  
                Organisation
	 Kursverksamheten består av:Föreläsningar där den matematiska teorin först presenteras.
Lektioner där uppgifter, främst med inte endast från kursboken, löses dels av läraren vid tavlan och dels av studenterna själva enskilt och/eller i grupp (självstudier).Hemuppgifter som lösas i grupp och som presenteras muntligt framför klassen för bonuspoäng (kryssuppgifter)Maple-TA uppgifter (kanske, ej bestämt ännu för HT-2016)SI-verksamhet (läraren står utanför detta)


	
                Litteratur
	            Johan Jonasson och Stefan Lemurell: Algebra och diskret matematik, Studentlitteratur, Lund, 2004.
		
                       Examination inklusive obligatoriska moment
       	Skriftlig tentamen. Bonuspoäng från kryssuppgifterna (och möjligen Maple-TA) ränkas in.
	
    

    Behörighet:För kurser på grundnivå inom Chalmers utbildningsprogram gäller samma behörighetskrav som till de(t) program där kursen ingår i programplanen.
      


            Kursspecifika förkunskaper
	Kunskaper motsvarande kursen TMV210 Inledande diskret matematik
	
                Syfte
	Kursens syfte är att, tillsammans med övriga matematikkurser, ge en matematisk allmänbildning som är så användbar som möjligt i fortsatta studier och teknisk yrkesverksamhet. I alla linjära modeller inom naturvetenskap, teknik och ekonomi uppträder linjära ekvationer (numeriska ekvationer, differentialekvationer, etc) eller system av sådana ekvationer. En huvuduppgift för den linjära algebran är att ge en enhetlig formalism för sådana ekvationer. Denna introduktionskurs avser att ge en logiskt sammanhängande beskrivning av centrala begrepp och tillämpningar inom den linjära algebran.
	
    
            Lärandemål (efter fullgjord kurs ska studenten kunna)
	(i) tillämpa geometriska vektorer inom geometri och naturvetenskap
(ii) redogöra för koordinatsystem samt ekvationer för plan och linjer (iii) tillämpa både skalär- och vektorprodukt
(iv) redogöra för matriser och matrisalgebra
(v)  tolka determinanter som volymer eller areor
(vi)  redogöra för egenvärdesproblemet för matriser
(vii) använda Matlab för problemlösning inom Linjär algebra
	
                Innehåll
	Matriser och vektorer, linjära avbildningar, ekvationssystem, egenvektorer och egenvärden, linjärt (o)beroende, baser och dimensioner, relationsmatriser. 
Matlab används för att visa på en matematisk programvara som är till hjälp vid analys av linjära problem.
        	  
                Organisation
	Föreläsningar. Schemalagda smågruppsövningar.  Datorlaborationer. Eventuellt MapleTA för elektronisk examination (duggor).
	
                Litteratur
	            Se kurshemsida.
		
                       Examination inklusive obligatoriska moment
       	Examinationen består av en skriftlig tentamen och obligatoriska datorlaborationer. Under kursens gång ges duggor som kan ge bonuspoäng till tentan.
	
    

    