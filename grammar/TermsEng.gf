--# -path=.:alltenses:english

concrete TermsEng of Terms = CatEng **
  open
    MakeTermEng, ParadigmsEng, SyntaxEng

in {

lincat
  Term = Utt ;

lin
  CNSgTerm cn = mkUtt cn ;
  CNPlTerm cn = mkUtt (mkNP aPl_Det cn) ;
  APTerm ap = mkUtt ap ;

-- example lexicon
lin
  --prerequisite_CN = makeCN prerequisite_N ;
  --goal_CN = makeCN goal_N ;
  --computer_programming_CN = makeCN computer_N programming_N ;
  --basic_skill_CN = makeCN basic_A skill_N ;
  --relevant_AP = mkAP relevant_A ;
  --graphical_AP = mkAP graphical_A ;
  --computer_science_CN = makeCN computer_N science_N ;
  --web_N = mkN "web";
  --page_N = mkN "page";
  --web_page_CN = makeCN web_N page_N;
  --speech_recognition_CN = makeCN speech_N recognition_N;
  --memory_N = mkN "memory";
  --address_N = mkN "address";
  --memory_address_CN = makeCN memory_N address_N;
  --computer_engineering = makeCN computer_N engineering_N;
  --operation_N = mkN "operation" ;
  --unit_N = mkN "unit" ;
  --symbol_N = mkN "symbol" ;
  --reference_N = mkN "reference" ;
  --personal_computer_CN = makeCN personal_A computer_N ;
  --bot_N = mkN "bot";
  --wireless_AP = mkAP wireless_A;
  course_N = mkN course_N ;
  prerequisite_N = mkN prerequisite_N ;
  computer_N = mkN computer_N ;
  organization_N = mkN organization_N ;
  design_N = mkN design_N ;
  foundation_N = mkN foundation_N ;
  basic_AP = mkAP basic_A ;
  architecture_N = mkN architecture_N ;
  principle_N = mkN principle_N ;
  memory_N = mkN memory_N ;
  aim_N = mkN aim_N ;
  component_N = mkN component_N ;
  technical_AP = mkAP technical_A ;
  system_N = mkN system_N ;
  functional_AP = mkAP functional_A ;
  execute_V2 = mkV2 execute_V2 ;
  fast_Adv = mkAdv fast_Adv ;
  fast_AP = mkAP fast_A ;
  power_N = mkN power_N ;
  efficient_AP = mkAP efficient_A ;
  performance_N = mkN performance_N ;
  progress_N = mkN progress_N ;
  engineering_N = mkN engineering_N ;
  convert_V2 = mkV2 convert_V2 ;
  raw_N = mkN raw_N ;
  speed_N = mkN speed_N ;
  transistor_N = mkN transistor_N ;
  application_N = mkN application_N ;
  software_N = mkN software_N ;
  structure_N = mkN structure_N ;
  parallelism_N = mkN parallelism_N ;
  high_AP = mkAP high_A ;
  outcome_N = mkN outcome_N ;
  completion_N = mkN completion_N ;
  master_N = mkN master_N ;
  concept_N = mkN concept_N ;
  modern_AP = mkAP modern_A ;
  order_N = mkN order_N ;
  research_N = mkN research_N ;
  advance_N = mkN advance_N ;
  field_N = mkN field_N ;
  microprocessor_N = mkN microprocessor_N ;
  advance_V2 = mkV2 advance_V2 ;
  technique_N = mkN technique_N ;
  instruction_N = mkN instruction_N ;
  parallel_N = mkN parallel_N ;
  parallel_AP = mkAP parallel_A ;
  establish_V2 = mkV2 establish_V2 ;
  hierarchy_N = mkN hierarchy_N ;
  assess_V2 = mkV2 assess_V2 ;
  proficiency_N = mkN proficiency_N ;
  quantitative_AP = mkAP quantitative_A ;
  establish_V2 = mkV2 establish_V2 ;
  impact_N = mkN impact_N ;
  architectural_AP = mkAP architectural_A ;
  state_N = mkN state_N ;
  simulation_N = mkN simulation_N ;
  tool_N = mkN tool_N ;
  content_N = mkN content_N ;
  essential_N = mkN essential_N ;
  achieve_V2 = mkV2 achieve_V2 ;
  base_V2 = mkV2 base_V2 ;
  analysis_N = mkN analysis_N ;
  method_N = mkN method_N ;
  assessment_N = mkN assessment_N ;
  consumption_N = mkN consumption_N ;
  part_N = mkN part_N ;
  affect_V2 = mkV2 affect_V2 ;
  evolution_N = mkN evolution_N ;
  technology_N = mkN technology_N ;
  include_VV = mkVV include_VV ;
  law_N = mkN law_N ;
  execution_N = mkN execution_N ;
  time_N = mkN time_N ;
  throughput_N = mkN throughput_N ;
  fundamental_N = mkN fundamental_N ;
  locality_N = mkN locality_N ;
  reference_N = mkN reference_N ;
  evaluate_V2 = mkV2 evaluate_V2 ;
  level_N = mkN level_N ;
  define_V2 = mkV2 define_V2 ;
  limit_N = mkN limit_N ;
  category_N = mkN category_N ;
  dynamic_AP = mkAP dynamic_A ;
  dynamic_N = mkN dynamic_N ;
  static_AP = mkAP static_A ;
  algorithm_N = mkN algorithm_N ;
  branch_N = mkN branch_N ;
  prediction_N = mkN prediction_N ;
  speculation_N = mkN speculation_N ;
  loop_N = mkN loop_N ;
  different_AP = mkAP different_A ;
  source_N = mkN source_N ;
  bottleneck_N = mkN bottleneck_N ;
  reduce_V2 = mkV2 reduce_V2 ;
  miss_N = mkN miss_N ;
  penalty_N = mkN penalty_N ;
  hit_N = mkN hit_N ;
  example_N = mkN example_N ;
  free_N = mkN free_N ;
  virtual_AP = mkAP virtual_A ;
  address_V2 = mkV2 address_V2 ;
  address_N = mkN address_N ;
  knowledge_N = mkN knowledge_N ;
  linear_AP = mkAP linear_A ;
  algebra_N = mkN algebra_N ;
  probability_N = mkN probability_N ;
  theory_N = mkN theory_N ;
  program_V2V = mkV2V program_V2V ;
  desirable_AP = mkAP desirable_A ;
  image_N = mkN image_N ;
  overview_N = mkN overview_N ;
  practical_AP = mkAP practical_A ;
  application_N = mkN application_N ;
  measurement_N = mkN measurement_N ;
  develop_V2 = mkV2 develop_V2 ;
  solve_V2 = mkV2 solve_V2 ;
  problem_N = mkN problem_N ;
  derive_V2 = mkV2 derive_V2 ;
  science_N = mkN science_N ;
  geometry_N = mkN geometry_N ;
  optimization_N = mkN optimization_N ;
  statistics_N = mkN statistics_N ;
  grade_V2 = mkV2 grade_V2 ;
  camera_N = mkN camera_N ;
  modelling_N = mkN modelling_N ;
  stereo_N = mkN stereo_N ;
  structure_N = mkN structure_N ;
  mathematical_AP = mkAP mathematical_A ;
  central_N = mkN central_N ;
  algorithm_N = mkN algorithm_N ;
  square_N = mkN square_N ;
  apply_VV = mkVV apply_VV ;
  terminology_N = mkN terminology_N ;
  structure_V2 = mkV2 structure_V2 ;
  logic_N = mkN logic_N ;
  solution_N = mkN solution_N ;
  geometric_AP = mkAP geometric_A ;
  camera_N = mkN camera_N ;
  class_N = mkN class_N ;
  exercise_N = mkN exercise_N ;
  session_N = mkN session_N ;
  pair_N = mkN pair_N ;
  project_N = mkN project_N ;
  submission_N = mkN submission_N ;
  report_N = mkN report_N ;
  result_N = mkN result_N ;
  lecture_N = mkN lecture_N ;
  article_N = mkN article_N ;
  university_N = mkN university_N ;
  element_N = mkN element_N ;
  address_N = mkN address_N ;
  programming_N = mkN programming_N ;
  model_N = mkN model_N ;
  processor_N = mkN processor_N ;
  core_N = mkN core_N ;
  chip_N = mkN chip_N ;
  share_V2 = mkV2 share_V2 ;
  thread_N = mkN thread_N ;
  resource_N = mkN resource_N ;
  project_N = mkN project_N ;
  document_V2 = mkV2 document_V2 ;
  scientific_AP = mkAP scientific_A ;
  literature_N = mkN literature_N ;
  session_N = mkN session_N ;
  sequence_N = mkN sequence_N ;
  lab_N = mkN lab_N ;
  methodology_N = mkN methodology_N ;
  systematically_Adv = mkAdv systematically_Adv ;
  assembly_N = mkN assembly_N ;
  language_N = mkN language_N ;
  sustainability_N = mkN sustainability_N ;
  compute_V2 = mkV2 compute_V2 ;
  level_N = mkN level_N ;
  sustainable_AP = mkAP sustainable_A ;
  electrical_AP = mkAP electrical_A ;
  mechanism_N = mkN mechanism_N ;
  circuit_N = mkN circuit_N ;
  storage_N = mkN storage_N ;
  energy_N = mkN energy_N ;
  operate_V2 = mkV2 operate_V2 ;
  device_N = mkN device_N ;
  component_N = mkN component_N ;
  configuration_N = mkN configuration_N ;
  class_N = mkN class_N ;
  evaluate_V2 = mkV2 evaluate_V2 ;
  optimize_V2 = mkV2 optimize_V2 ;
  interpret_V2 = mkV2 interpret_V2 ;
  requirement_N = mkN requirement_N ;
  electronic_AP = mkAP electronic_A ;
  data_N = mkN data_N ;
  instance_N = mkN instance_N ;
  measure_V2 = mkV2 measure_V2 ;
  estimate_VS = mkVS estimate_VS ;
  save_V2 = mkV2 save_V2 ;
  lecture_N = mkN lecture_N ;
  result_N = mkN result_N ;
  future_AP = mkAP future_A ;
  generation_N = mkN generation_N ;
  optimization_N = mkN optimization_N ;
  theory_N = mkN theory_N ;
  practice_N = mkN practice_N ;
  discrete_AP = mkAP discrete_A ;
  linear_AP = mkAP linear_A ;
  science_N = mkN science_N ;
  complexity_N = mkN complexity_N ;
  kind_N = mkN kind_N ;
  context_N = mkN context_N ;
  transportation_N = mkN transportation_N ;
  telecommunication_N = mkN telecommunication_N ;
  industrial_AP = mkAP industrial_A ;
  linear_AP = mkAP linear_A ;
  algebra_N = mkN algebra_N ;
  probability_N = mkN probability_N ;
  theory_N = mkN theory_N ;
  program_V2V = mkV2V program_V2V ;
  desirable_AP = mkAP desirable_A ;
  image_N = mkN image_N ;
  overview_N = mkN overview_N ;
  practical_AP = mkAP practical_A ;
  application_N = mkN application_N ;
  measurement_N = mkN measurement_N ;
  develop_V2 = mkV2 develop_V2 ;
  solve_V2 = mkV2 solve_V2 ;
  problem_N = mkN problem_N ;
  derive_V2 = mkV2 derive_V2 ;
  science_N = mkN science_N ;
  geometry_N = mkN geometry_N ;
  optimization_N = mkN optimization_N ;
  statistics_N = mkN statistics_N ;
  grade_V2 = mkV2 grade_V2 ;
  camera_N = mkN camera_N ;
  modelling_N = mkN modelling_N ;
  stereo_N = mkN stereo_N ;
  structure_N = mkN structure_N ;
  mathematical_AP = mkAP mathematical_A ;
  central_N = mkN central_N ;
  algorithm_N = mkN algorithm_N ;
  square_N = mkN square_N ;
  apply_VV = mkVV apply_VV ;
  terminology_N = mkN terminology_N ;
  structure_V2 = mkV2 structure_V2 ;
  logic_N = mkN logic_N ;
  solution_N = mkN solution_N ;
  geometric_AP = mkAP geometric_A ;
  camera_N = mkN camera_N ;
  class_N = mkN class_N ;
  exercise_N = mkN exercise_N ;
  session_N = mkN session_N ;
  pair_N = mkN pair_N ;
  project_N = mkN project_N ;
  submission_N = mkN submission_N ;
  report_N = mkN report_N ;
  result_N = mkN result_N ;
  lecture_N = mkN lecture_N ;
  article_N = mkN article_N ;
  university_N = mkN university_N ;
  element_N = mkN element_N ;
  physics_N = mkN physics_N ;
  numerical_AP = mkAP numerical_A ;
  apply_VV = mkVV apply_VV ;
  develop_V2 = mkV2 develop_V2 ;
  modeling_N = mkN modeling_N ;
  integrate_V2 = mkV2 integrate_V2 ;
  structure_V2 = mkV2 structure_V2 ;
  equation_N = mkN equation_N ;
  molecular_AP = mkAP molecular_A ;
  dynamic_N = mkN dynamic_N ;
  integration_N = mkN integration_N ;
  apply_VV = mkVV apply_VV ;
  planning_N = mkN planning_N ;
  hardware_N = mkN hardware_N ;
  property_N = mkN property_N ;
  algorithmic_AP = mkAP algorithmic_A ;
  optimal_AP = mkAP optimal_A ;
  domain_N = mkN domain_N ;
  formulate_V2 = mkV2 formulate_V2 ;
  model_V2 = mkV2 model_V2 ;
  manageable_AP = mkAP manageable_A ;
  relate_V2 = mkV2 relate_V2 ;
  generic_AP = mkAP generic_A ;
  additional_AP = mkAP additional_A ;
  heuristic_N = mkN heuristic_N ;
  dual_AP = mkAP dual_A ;
  obtain_V2 = mkV2 obtain_V2 ;
  program_V2V = mkV2V program_V2V ;
  integer_N = mkN integer_N ;
  special_AP = mkAP special_A ;
  graph_N = mkN graph_N ;
  separate_V2 = mkV2 separate_V2 ;
  list_N = mkN list_N ;
  scale_N = mkN scale_N ;
  network_N = mkN network_N ;
  communication_N = mkN communication_N ;
  protocol_N = mkN protocol_N ;
  stack_N = mkN stack_N ;
  internet_N = mkN internet_N ;
  distribute_V2 = mkV2 distribute_V2 ;
  service_N = mkN service_N ;
  summarize_V2 = mkV2 summarize_V2 ;
  introduce_V2 = mkV2 introduce_V2 ;
  development_N = mkN development_N ;
  setting_N = mkN setting_N ;
  link_N = mkN link_N ;
  limit_V2V = mkV2V limit_V2V ;
  bandwidth_N = mkN bandwidth_N ;
  scalability_N = mkN scalability_N ;
  imperative_AP = mkAP imperative_A ;
  vector_N = mkN vector_N ;
  dimension_N = mkN dimension_N ;
  graphic_N = mkN graphic_N ;
  implement_V2 = mkV2 implement_V2 ;
  process_N = mkN process_N ;
  functionality_N = mkN functionality_N ;
  strict_AP = mkAP strict_A ;
  matrix_N = mkN matrix_N ;
  bachelor_N = mkN bachelor_N ;
  dimensional_AP = mkAP dimensional_A ;
  hardware_N = mkN hardware_N ;
  image_N = mkN image_N ;
  model_N = mkN model_N ;
  rendering_N = mkN rendering_N ;
  shadow_N = mkN shadow_N ;
  mathematics_N = mkN mathematics_N ;
  design_V2V = mkV2V design_V2V ;
  function_N = mkN function_N ;
  mechanical_AP = mkAP mechanical_A ;
  safety_N = mkN safety_N ;
  multimedia_N = mkN multimedia_N ;
  execute_V2 = mkV2 execute_V2 ;
  abstraction_N = mkN abstraction_N ;
  implement_N = mkN implement_N ;
  synchronization_N = mkN synchronization_N ;
  implement_V2 = mkV2 implement_V2 ;
  language_N = mkN language_N ;
  kernel_N = mkN kernel_N ;
  distribute_V2 = mkV2 distribute_V2 ;
  protocol_N = mkN protocol_N ;
  node_N = mkN node_N ;
  topology_N = mkN topology_N ;
  mathematics_N = mkN mathematics_N ;
  course_N = mkN course_N ;
  machine_N = mkN machine_N ;
  orient_V2 = mkV2 orient_V2 ;
  embed_V2 = mkV2 embed_V2 ;
  perform_V2 = mkV2 perform_V2 ;
  function_N = mkN function_N ;
  mechanical_AP = mkAP mechanical_A ;
  safety_N = mkN safety_N ;
  behavior_N = mkN behavior_N ;
  example_N = mkN example_N ;
  game_N = mkN game_N ;
  multimedia_N = mkN multimedia_N ;
  interface_N = mkN interface_N ;
  run_VS = mkVS run_VS ;
  verify_V2 = mkV2 verify_V2 ;
  set_N = mkN set_N ;
  good_AP = mkAP good_A ;
  during_Prep = mkrep during_Prep ;
  task_N = mkN task_N ;
  implement_V2 = mkV2 implement_V2 ;
  decompose_V2 = mkV2 decompose_V2 ;
  library_N = mkN library_N ;
  synchronization_N = mkN synchronization_N ;
  language_N = mkN language_N ;
  general_AP = mkAP general_A ;
  implement_V2 = mkV2 implement_V2 ;
  kernel_N = mkN kernel_N ;
  distribute_V2 = mkV2 distribute_V2 ;
  available_AP = mkAP available_A ;
  capacity_N = mkN capacity_N ;
  cyclic_AP = mkAP cyclic_A ;
  priority_N = mkN priority_N ;
  protocol_N = mkN protocol_N ;
  node_N = mkN node_N ;
  topology_N = mkN topology_N ;
  access_N = mkN access_N ;
  response_N = mkN response_N ;
  conjunction_N = mkN conjunction_N ;
  account_N = mkN account_N ;
  maximum_N = mkN maximum_N ;
  theory_N = mkN theory_N ;
  low_Adv = mkAdv low_Adv ;
  delay_N = mkN delay_N ;
  execute_V2 = mkV2 execute_V2 ;
  correctness_N = mkN correctness_N ;
  abstraction_N = mkN abstraction_N ;
  philosophy_N = mkN philosophy_N ;
  complex_AP = mkAP complex_A ;
  maintain_VS = mkVS maintain_VS ;
  environment_N = mkN environment_N ;
  semaphore_N = mkN semaphore_N ;
  syntax_N = mkN syntax_N ;
  tree_N = mkN tree_N ;
  semantics_N = mkN semantics_N ;
  compiler_N = mkN compiler_N ;
  induction_N = mkN induction_N ;
  proof_N = mkN proof_N ;
  read_VS = mkVS read_VS ;
  finite_AP = mkAP finite_A ;
  formal_AP = mkAP formal_A ;
  library_N = mkN library_N ;
  type_N = mkN type_N ;
  algebraic_AP = mkAP algebraic_A ;
  monad_N = mkN monad_N ;
  transformer_N = mkN transformer_N ;
  specification_N = mkN specification_N ;
  property_N = mkN property_N ;
  construction_N = mkN construction_N ;
  construct_V2 = mkV2 construct_V2 ;
  quick_AP = mkAP quick_A ;
  exception_N = mkN exception_N ;
  cryptography_N = mkN cryptography_N ;
  security_N = mkN security_N ;
  implementation_N = mkN implementation_N ;
  vulnerability_N = mkN vulnerability_N ;
  permutation_N = mkN permutation_N ;
  artificial_intelligence_CN = makeCN artificial_A intelligence_N ;
  cipher_N = mkN cipher_N ;
  cryptanalysis_N = mkN cryptanalysis_N ;
  symmetric_AP = mkAP symmetric_A ;
  computer_science_CN = makeCN computer_N science_N ;
  programming_N = mkN programming_N ;
  function_N = mkN function_N ;
  model_N = mkN model_N ;
  software_development_CN = makeCN software_N development_N ;
  algorithm_N = mkN algorithm_N ;
  application_software_CN = makeCN application_N software_N ;
  data_structure_CN = makeCN data_N structure_N ;
  artificial_AP = mkAP artificial_A ;
  intelligence_N = mkN intelligence_N ;
  automata_theory_CN = makeCN automata_N theory_N ;
  binary_AP = mkAP binary_A ;
  binary_search_algorithm_CN = makeCN binary_A search_N algorithm_N ;
  bit_N = mkN bit_N ;
  bit_rate_CN = makeCN bit_N rate_N ;
  byte_N = mkN byte_N ;
  class_N = mkN class_N ;
  computer_science_CN = makeCN computer_N science_N ;
  cloud_computing_CN = makeCN cloud_N computing_N ;
  library_ bibliotek N = mkk N library_ bibliotek N ;
  coding_theory_CN = makeCN coding_N theory_N ;
  cognitive_science_CN = makeCN cognitive_A science_N ;
  compiler_N = mkN compiler_N ;
  computability_theory_CN = makeCN computability_N theory_N ;
  computational_biology_CN = makeCN computational_A biology_N ;
  computational_chemistry_CN = makeCN computational_A chemistry_N ;
  computational_physics_CN = makeCN computational_A physics_N ;
  computer_architecture_CN = makeCN computer_N architecture_N ;
  computer_data_storage_CN = makeCN computer_N data_N storage_N ;
  computer_graphics_CN = makeCN computer_N graphics_N ;
  computer_network_CN = makeCN computer_N network_N ;
  computer_science_CN = makeCN computer_N science_N ;
  computer_scientist_CN = makeCN computer_N scientist_N ;
  computer_security_CN = makeCN computer_N security_N ;
  concurrency_N = mkN concurrency_N ;
  control_flow_CN = makeCN control_N flow_N ;
  cryptography_N = mkN cryptography_N ;
  cyberbullying_N mobbning N = mkg N cyberbullying_N mobbning N ;
  cyberspace_N = mkN cyberspace_N ;
  data_center_CN = makeCN data_N center_N ;
  database_N = mkN database_N ;
  data_mining_CN = makeCN data_N mining_N ;
  data_type_CN = makeCN data_N type_N ;
  digital_AP = mkAP digital_A ;
  signal_processing_CN = makeCN signal_N processing_N ;
  domain_name_system_CN = makeCN domain_N name_N system_N ;
  download_N = mkN download_N ;
  encryption_N = mkN encryption_N ;
  event_N = mkN event_N ;
  executable_AP = mkAP executable_A ;
  file_N = mkN file_N ;
  exception_handling_CN = makeCN exception_N handling_N ;
  feasibility_study_CN = makeCN feasibility_N study_N ;
  filename_extension_CN = makeCN filename_N extension_N ;
  formal_AP = mkAP formal_A ;
  method_N = mkN method_N ;
  verification_N = mkN verification_N ;
  functional_AP = mkAP functional_A ;
  game_theory_CN = makeCN game_N theory_N ;
  gigabyte_N = mkN gigabyte_N ;
  graph_theory_CN = makeCN graph_N theory_N ;
  hash_function_CN = makeCN hash_N function_N ;
  hash_table_CN = makeCN hash_N table_N ;
  heapsort_N = mkN heapsort_N ;
  human-computer_interation_CN = makeCN human-computer_N interation_N ;
  integrated_development_environment_CN = makeCN integrated_A development_N environment_N ;
  imperative_programming_CN = makeCN imperative_A programming_N ;
  inheritance_N = mkN inheritance_N ;
  insertion_sort_CN = makeCN insertion_N sort_N ;
  ascii_N = mkN ascii_N ;
  array_N = mkN array_N ;
  binary_tree_CN = makeCN binary_A tree_N ;
  bioinformatics_N = mkN bioinformatics_N ;
  boolean_data_type_CN = makeCN boolean_A data_N type_N ;
  crypto_N = mkN crypto_N ;
  computer_vision_CN = makeCN computer_N vision_N ;
  concatenation_N = mkN concatenation_N ;
  intelligent_AP = mkAP intelligent_A ;
  agent_N = mkN agent_N ;
  interface_N = mkN interface_N ;
  invariant_AP = mkAP invariant_A ;
  iteration_N = mkN iteration_N ;
  Java_N = mkN Java_N ;
  programming_language_CN = makeCN programming_N language_N ;
  kernel_N = mkN kernel_N ;
  linear_search_CN = makeCN linear_A search_N ;
  linked_list_CN = makeCN linked_A list_N ;
  logic_programming_CN = makeCN logic_N programming_N ;
  machine_learning_CN = makeCN machine_N learning_N ;
  matrix_N = mkN matrix_N ;
  modem_N = mkN modem_N ;
  number_theory_CN = makeCN number_N theory_N ;
  numerical_AP = mkAP numerical_A ;
  analysis_N = mkN analysis_N ;
  numerical_analysis_CN = makeCN numerical_A analysis_N ;
  operating_system_CN = makeCN operating_A system_N ;
  optical_fiber_CN = makeCN optical_N fiber_N ;
  pair_programming_CN = makeCN pair_N programming_N ;
  peripheral_N = mkN peripheral_N ;
  priority_queue_CN = makeCN priority_N queue_N ;
  quantum_computer_CN = makeCN quantum_N computer_N ;
  queue_N = mkN queue_N ;
  recursion_N = mkN recursion_N ;
  relational_database_CN = makeCN relational_A database_N ;
  requirements_analysis_CN = makeCN requirements_N analysis_N ;
  router_N = mkN router_N ;
  routing_table_CN = makeCN routing_N table_N ;
  selection_sort_CN = makeCN selection_N sort_N ;
  sequence_N = mkN sequence_N ;
  software_N = mkN software_N ;
  software_deployment_CN = makeCN software_N deployment_N ;
  software_development_CN = makeCN software_N development_N ;
  sorting_algorithm_CN = makeCN sorting_N algorithm_N ;
  source_code_CN = makeCN source_N code_N ;
  string_N = mkN string_N ;
  user_agent_CN = makeCN user_N agent_N ;
  user_interface_CN = makeCN user_N interface_N ;
  waterfall_model_CN = makeCN waterfall_N model_N ;
  Wi-Fi_N = mkN Wi-Fi_N ;
  XHTML_N = mkN XHTML_N ;
  mathematical_model_CN = makeCN mathematical_A model_N ;
  generalization_N = mkN generalization_N ;
  concept_N = mkN concept_N ;
  blueprint_N = mkN blueprint_N ;
  customer_N = mkN customer_N ;
  end_user_CN = makeCN end_N user_N ;
  calculation_N = mkN calculation_N ;
  productivity_N = mkN productivity_N ;
  dynamic_programming_CN = makeCN dynamic_A programming_N ;
  computer_interaction_CN = makeCN computer_N interaction_N ;
  development_environment_CN = makeCN development_N environment_N ;
  list_N = mkN list_N ;
  mathematical_AP = mkAP mathematical_A ;
  parallel_computing_CN = makeCN parallel_A computing_N ;
  computer_program_CN = makeCN computer_N program_N ;
  programmer_N = mkN programmer_N ;
  word_processor_CN = makeCN word_N processor_N ;
  spreadsheet_N = mkN spreadsheet_N ;
  accounting_software_CN = makeCN accounting_N software_N ;
  web_browser_CN = makeCN web_N browser_N ;
  media_player_CN = makeCN media_N player_N ;
  flight_simulator_CN = makeCN flight_N simulator_N ;
  use_case_CN = makeCN use_N case_N ;
  class_diagram_CN = makeCN class_N diagram_N ;
  theoretical_AP = mkAP theoretical_A ;
  discreet_AP = mkAP discreet_A ;
  mathematics_N = mkN mathematics_N ;
  discrete_mathematics_CN = makeCN discrete_A mathematics_N ;
  philosophy_N = mkN philosophy_N ;
  probability_distribution_CN = makeCN probability_N distribution_N ;
  time_complexity_CN = makeCN time_N complexity_N ;
  number_N = mkN number_N ;
  set_theory_CN = makeCN set_N theory_N ;
  empty_set_CN = makeCN empty_A set_N ;
  software_tool_CN = makeCN software_N tool_N ;
  biology_N = mkN biology_N ;
  statistics_N = mkN statistics_N ;
  information_N = mkN information_N ;
  communication_N = mkN communication_N ;
  telecommunications_N = mkN telecommunications_N ;
  access_control_CN = makeCN access_N control_N ;
  domain_name_CN = makeCN domain_N name_N ;
  ip-adress_N = mkN ip-adress_N ;
  whitelist_N = mkN whitelist_N ;
  graphics_card_CN = makeCN graphics_N card_N ;
  truth_value_CN = makeCN truth_N value_N ;
  variable_N = mkN variable_N ;
  conjunction_N = mkN conjunction_N ;
  disjunction_N = mkN disjunction_N ;
  negation_N = mkN negation_N ;
  hard_drive_CN = makeCN hard_A drive_N ;
  instruction_N = mkN instruction_N ;
  arithmetic_N = mkN arithmetic_N ;
  control_unit_CN = makeCN control_N unit_N ;
  hardware_N = mkN hardware_N ;
  server_N = mkN server_N ;
  code_N = mkN code_N ;
  information_theory_CN = makeCN information_N theory_N ;
  electronics_N = mkN electronics_N ;
  linguistics_N = mkN linguistics_N ;
  science_N = mkN science_N ;
  memory_N = mkN memory_N ;
  table_N = mkN table_N ;
  file_format_CN = makeCN file_N format_N ;
  computer_engineering_CN = makeCN computer_N engineering_N ;
  video_N = mkN video_N ;
  engineering_N = mkN engineering_N ;
  technology_N = mkN technology_N ;
  power_supply_CN = makeCN power_N supply_N ;
  information_system_CN = makeCN information_N system_N ;
  digital_signal_processor_CN = makeCN digital_A signal_N processor_N ;
  simulation_N = mkN simulation_N ;
  network_N = mkN network_N ;
  web_server_CN = makeCN web_N server_N ;
  programming_paradigm_CN = makeCN programming_N paradigm_N ;
  sensor_N = mkN sensor_N ;
  thread_N = mkN thread_N ;
  graphic_AP = mkAP graphic_A ;
  web_application_CN = makeCN web_N application_N ;
  device_driver_CN = makeCN device_N driver_N ;
  instruction_set_architecture_CN = makeCN instruction_N set_N architecture_N ;
  parser_N = mkN parser_N ;
  execution_N = mkN execution_N ;
  interruption_N = mkN interruption_N ;
  inter-process_communication_CN = makeCN inter-process_A communication_N ;
  operator_N = mkN operator_N ;
  mathematical_AP = mkAP mathematical_A ;
  expression_N = mkN expression_N ;
  environment_N = mkN environment_N ;
  value_N = mkN value_N ;
  file_name_CN = makeCN file_N name_N ;
  proof_N = mkN proof_N ;
  command-line_interpreter_CN = makeCN command-line_N interpreter_N ;
  unique_key_CN = makeCN unique_A key_N ;
  integer_N = mkN integer_N ;
  virtual_AP = mkAP virtual_A ;
  debugger_N = mkN debugger_N ;
  property_N = mkN property_N ;
  touchscreen_N = mkN touchscreen_N ;
  documentation_N = mkN documentation_N ;
  scripting_language_CN = makeCN scripting_N language_N ;
  bug_N = mkN bug_N ;
  formal_AP = mkAP formal_A ;
  LED_N = mkN LED_N ;
  speech_recognition_CN = makeCN speech_N recognition_N ;
  memory_address_CN = makeCN memory_N address_N ;
  computer_engineering_CN = makeCN computer_N engineering_N ;
  operation_N = mkN operation_N ;
  unit_N = mkN unit_N ;
  symbol_N = mkN symbol_N ;
  reference_N = mkN reference_N ;
  personal_computer_CN = makeCN personal_A computer_N ;
  bot_N = mkN bot_N ;
  wireless_AP = mkAP wireless_A ;
  web_page_CN = makeCN web_N page_N ;
  computer_security_model_CN = makeCN computer_N security_N model_N ;
  information_technology_CN = makeCN information_N technology_N ;
  software_development_CN = makeCN software_N development_V ;
  unauthorized_acces_CN = makeCN unauthorized_A acces_N ;
  confidential_information_CN = makeCN confidential_A information_N ;
  holistic_approach_CN = makeCN holistic_A approach_N ;
  ethical_aspect_CN = makeCN ethical_A aspect_N ;
  design_pattern_CN = makeCN design_N pattern_N ;
  mathematical_modelling_CN = makeCN mathematical_N modelling_N ;
  functional_programming_CN = makeCN functional_N programming_V ;
  business_information_system_CN = makeCN business_N information_N system_N ;
  database_administator_CN = makeCN database_N administator_N ;
  recursive_data_type_CN = makeCN recursive_A data_N type_N ;
  graphical_user_interface_CN = makeCN graphical_A user_N interface_N ;
  two-factor_authentication_CN = makeCN two-factor_A authentication_N ;
  mandatory_access_control_CN = makeCN mandatory_A access_N control_V ;
  system_specification_CN = makeCN system_N specification_N ;
  multi-core_processor_CN = makeCN multi-core_A processor_N ;
  domain-specific_language_CN = makeCN domain-specific_A language_N ;
  data_management_CN = makeCN data_N management_N ;
  object-oriented_program_CN = makeCN object-oriented_A program_N ;
  source_code_CN = makeCN source_A code_N ;
  machine_code_CN = makeCN machine_N code_N ;
  computer_system_CN = makeCN computer_N system_N ;
  software_engineer_CN = makeCN software_N engineer_N ;
  software_system_CN = makeCN software_N system_N ;
  game_engine_CN = makeCN game_N engine_N ;
  compiler_construction_CN = makeCN compiler_N construction_N ;
  regular_expression_CN = makeCN regular_A expression_N ;
  code_generator_CN = makeCN code_N generator_N ;
  formal_verification_CN = makeCN formal_A verification_N ;
  differential_equation_CN = makeCN differential_A equation_N ;
  algorithm_design_CN = makeCN algorithm_N design_V ;
  network_security_CN = makeCN network_N security_N ;
  distributed_systems_CN = makeCN distributed_A systems_N ;
  applied_data_science_CN = makeCN applied_A data_N science_N ;
  abstract_data_type_CN = makeCN abstract_A data_N type_N ;
  abstract_method_CN = makeCN abstract_A method_N ;
  agile_software_development_CN = makeCN agile_A software_N development_N ;
  big_data_CN = makeCN big_A data_N ;
  binary_number_CN = makeCN binary_A number_N ;
  binary_search_tree_CN = makeCN binary_A search_V tree_N ;
  security_protocol_CN = makeCN security_N protocol_N ;
  virtual_private_network_CN = makeCN virtual_A private_A network_N ;
  floating_point_number_CN = makeCN floating_A point_N number_N ;
  attack_model_CN = makeCN attack_V model_N ;
  linear_search_CN = makeCN linear_A search_V ;
  Data_Communication_CN = makeCN Data_N Communication_N ;
  Domain_Name_System_CN = makeCN Domain_N Name_N System_N ;
  Routing_Protocol_CN = makeCN Routing_N Protocol_N ;
  Congestion_control_CN = makeCN Congestion_N control_N ;

}
