--# -path=.:alltenses:english

concrete TermsEng of Terms = CatEng **
  open
    MakeTermEng, ParadigmsEng, SyntaxEng

in {

lincat
  Term = Utt ;

lin
  CNSgTerm cn = mkUtt cn ;
  CNPlTerm cn = mkUtt (mkNP aPl_Det cn) ;
  APTerm ap = mkUtt ap ;

-- example lexicon
lin
  generation_N = mkN "generation" ;
  partnership_N = mkN "partnership" ;
  project_N = mkN "project" ;
  semantic_AP = mkAP semantic_A ;
  encode_V2 = makeV encode_V2 ;
  bitrate_VS = mkVS (mkV "bitrate") ;
  protocol_N = mkN "protocol" ;
  coding_theory_CN = makeCN (mkN "coding") theory_N ;
  abstract_N = mkN "abstract" ;
  data_N = mkN "data" ;
  type_N = mkN "type" ;
  graph_N = mkN "graph" ;
  syntax_N = mkN "syntax" ;
  notation_N = mkN "notation" ;
  tree_N = mkN "tree" ;
  window_N = mkN "window" ;
  toolbox_N = mkN "toolbox" ;
  accelerate_V2 = makeV accelerate_V2 ;
  graphic_N = mkN "graphic" ;
  port_N = mkN "port" ;
  access_N = mkN "access" ;
  control_N = mkN "control" ;
  list_N = mkN "list" ;
  method_N = mkN "method" ;
  time_N = mkN "time" ;
  poison_N = mkN "poison" ;
  acknowledge_VS = makeV acknowledge_VS ;
  character_N = mkN "character" ;
  acoustic_N = mkN "acoustic" ;
  coupler_N = mkN "coupler" ;
  acronym_N = mkN "acronym" ;
  with_Prep = mkPrep "with" ;
  letters_N = mkN "letters" ;
  active_AP = mkAP active_A ;
  current_N = mkN "current" ;
  loop_N = mkN "loop" ;
  directory_N = mkN "directory" ;
  hub_N = mkN "hub" ;
  matrix_N = mkN "matrix" ;
  liquid_N = mkN "liquid" ;
  crystal_N = mkN "crystal" ;
  display_N = mkN "display" ;
  monitor_N = mkN "monitor" ;
  server_N = mkN "server" ;
  page_N = mkN "page" ;
  terminator_N = mkN "terminator" ;
  object_N = mkN "object" ;
  actor_N = mkN "actor" ;
  base_V2 = makeV base_V2 ;
  concurrent_AP = mkAP concurrent_A ;
  language_N = mkN "language" ;
  adaptive_AP = mkAP adaptive_A ;
  equalizer_N = mkN "equalizer" ;
  replacement_N = mkN "replacement" ;
  cache_N = mkN "cache" ;
  address_N = mkN "address" ;
  resolution_N = mkN "resolution" ;
  space_N = mkN "space" ;
  layout_N = mkN "layout" ;
  randomization_N = mkN "randomization" ;
  administrative_AP = mkAP administrative_A ;
  domain_N = mkN "domain" ;
  adobe_N = mkN "adobe" ;
  flash_N = mkN "flash" ;
  audio_N = mkN "audio" ;
  code_V2 = makeV code_V2 ;
  environment_N = mkN "environment" ;
  configuration_N = mkN "configuration" ;
  power_N = mkN "power" ;
  interface_N = mkN "interface" ;
  communication_N = mkN "communication" ;
  procedure_N = mkN "procedure" ;
  encryption_N = mkN "encryption" ;
  standard_N = mkN "standard" ;
  linux_N = mkN "linux" ;
  sound_N = mkN "sound" ;
  architecture_N = mkN "architecture" ;
  message_N = mkN "message" ;
  queue_V = mkV "queue" ;
  micro_AP = mkAP micro_A ;
  device_N = mkN "device" ;
  interrupt_V2 = makeV interrupt_V2 ;
  controller_N = mkN "controller" ;
  research_N = mkN "research" ;
  agency_N = mkN "agency" ;
  technology_N = mkN "technology" ;
  attachment_N = mkN "attachment" ;
  algorithmic_AP = mkAP algorithmic_A ;
  state_N = mkN "state" ;
  machine_N = mkN "machine" ;
  allow_VS = makeV allow_VS ;
  cell_N = mkN "cell" ;
  rate_N = mkN "rate" ;
  alternate_V2 = makeV alternate_V2 ;
  national_AP = mkAP national_A ;
  institute_N = mkN "institute" ;
  for_Prep = mkPrep "for" ;
  internet_N = mkN "internet" ;
  number_N = mkN "number" ;
  amoled_N = mkN "amoled" ;
  amplitude_N = mkN "amplitude" ;
  compiler_N = mkN "compiler" ;
  kit_N = mkN "kit" ;
  analog_N = mkN "analog" ;
  digital_AP = mkAP digital_A ;
  converter_N = mkN "converter" ;
  anisotropic_AP = mkAP anisotropic_A ;
  filter_V2 = makeV filter_V2 ;
  escape_N = mkN "escape" ;
  antivirus_N = mkN "antivirus" ;
  apache_N = mkN "apache" ;
  ant_N = mkN "ant" ;
  portable_AP = mkAP portable_A ;
  apple_N = mkN "apple" ;
  desktop_N = mkN "desktop" ;
  bus_N = mkN "bus" ;
  connector_N = mkN "connector" ;
  filing_N = mkN "filing" ;
  lossless_AP = mkAP lossless_A ;
  worldwide_AP = mkAP worldwide_A ;
  developer_N = mkN "developer" ;
  conference_N = mkN "conference" ;
  application_N = mkN "application" ;
  binary_AP = mkAP binary_A ;
  layer_N = mkN "layer" ;
  service_N = mkN "service" ;
  provider_N = mkN "provider" ;
  specific_AP = mkAP specific_A ;
  integrate_V2 = makeV integrate_V2 ;
  circuit_N = mkN "circuit" ;
  border_N = mkN "border" ;
  router_N = mkN "router" ;
  arithmetic_N = mkN "arithmetic" ;
  logic_N = mkN "logic" ;
  holding_N = mkN "holding" ;
  operate_V2 = makeV operate_V2 ;
  system_N = mkN "system" ;
  artificial_AP = mkAP artificial_A ;
  intelligence_N = mkN "intelligence" ;
  neural_AP = mkAP neural_A ;
  network_N = mkN "network" ;
  ascii_N = mkN "ascii" ;
  aspect_N = mkN "aspect" ;
  orient_V2 = makeV orient_V2 ;
  association_N = mkN "association" ;
  machinery_N = mkN "machinery" ;
  asymmetric_AP = mkAP asymmetric_A ;
  subscriber_N = mkN "subscriber" ;
  asynchronous_AP = mkAP asynchronous_A ;
  balance_V2 = makeV balance_V2 ;
  mode_N = mkN "mode" ;
  transfer_N = mkN "transfer" ;
  ethernet_N = mkN "ethernet" ;
  adaptation_N = mkN "adaptation" ;
  attenuation_N = mkN "attenuation" ;
  crosstalk_N = mkN "crosstalk" ;
  ratio_N = mkN "ratio" ;
  modem_N = mkN "modem" ;
  video_N = mkN "video" ;
  interleave_V2 = makeV interleave_V2 ;
  accessibility_N = mkN "accessibility" ;
  guideline_N = mkN "guideline" ;
  automate_V2 = makeV automate_V2 ;
  classification_N = mkN "classification" ;
  entity_N = mkN "entity" ;
  security_N = mkN "security" ;
  enhancement_N = mkN "enhancement" ;
  baud_N = mkN "baud" ;
  detection_N = mkN "detection" ;
  call_N = mkN "call" ;
  distributor_N = mkN "distributor" ;
  available_AP = mkAP available_A ;
  bit_N = mkN "bit" ;
  average_N = mkN "average" ;
  bandwidth_N = mkN "bandwidth" ;
  processor_N = mkN "processor" ;
  basic_AP = mkAP basic_A ;
  multilingual_AP = mkAP multilingual_A ;
  plane_N = mkN "plane" ;
  telecommunication_N = mkN "telecommunication" ;
  infrastructure_N = mkN "infrastructure" ;
  distribution_N = mkN "distribution" ;
  bidirectional_AP = mkAP bidirectional_A ;
  forwarding_N = mkN "forwarding" ;
  directional_AP = mkAP directional_A ;
  text_N = mkN "text" ;
  decimal_N = mkN "decimal" ;
  library_N = mkN "library" ;
  large_AP = mkAP large_A ;
  bind_V2 = makeV bind_V2 ;
  bios_N = mkN "bios" ;
  bipolar_AP = mkAP bipolar_A ;
  junction_N = mkN "junction" ;
  transistor_N = mkN "transistor" ;
  error_N = mkN "error" ;
  block_N = mkN "block" ;
  availability_N = mkN "availability" ;
  map_N = mkN "map" ;
  screen_N = mkN "screen" ;
  death_N = mkN "death" ;
  bluetooth_N = mkN "bluetooth" ;
  boot_V2 = makeV boot_V2 ;
  gateway_N = mkN "gateway" ;
  normal_AP = mkAP normal_A ;
  form_N = mkN "form" ;
  breadth_N = mkN "breadth" ;
  device_N = mkN "device" ;
  bulletin_N = mkN "bulletin" ;
  business_N = mkN "business" ;
  continuity_N = mkN "continuity" ;
  execution_N = mkN "execution" ;
  management_N = mkN "management" ;
  readiness_N = mkN "readiness" ;
  rate_N = mkN "rate" ;
  reference_N = mkN "reference" ;
  rule_N = mkN "rule" ;
  alliance_N = mkN "alliance" ;
  consumer_N = mkN "consumer" ;
  employee_N = mkN "employee" ;
  byte_N = mkN "byte" ;
  order_N = mkN "order" ;
  mark_N = mkN "mark" ;
  fault_N = mkN "fault" ;
  tolerance_N = mkN "tolerance" ;
  capability_N = mkN "capability" ;
  maturity_N = mkN "maturity" ;
  integration_N = mkN "integration" ;
  captcha_N = mkN "captcha" ;
  theorem_N = mkN "theorem" ;
  carriage_N = mkN "carriage" ;
  carrier_N = mkN "carrier" ;
  sense_N = mkN "sense" ;
  multiple_N = mkN "multiple" ;
  collision_N = mkN "collision" ;
  sheet_N = mkN "sheet" ;
  cathode_N = mkN "cathode" ;
  ray_N = mkN "ray" ;
  tube_N = mkN "tube" ;
  cd_N = mkN "cd" ;
  challenge_N = mkN "challenge" ;
  handshake_N = mkN "handshake" ;
  authentication_N = mkN "authentication" ;
  chief_N = mkN "chief" ;
  information_N = mkN "information" ;
  officer_N = mkN "officer" ;
  cisco_N = mkN "cisco" ;
  discovery_N = mkN "discovery" ;
  classless_AP = mkAP classless_A ;
  inter_V2 = makeV inter_V2 ;
  client_N = mkN "client" ;
  close_VS = makeV close_VS ;
  source_N = mkN "source" ;
  metal_N = mkN "metal" ;
  cloud_N = mkN "cloud" ;
  division_N = mkN "division" ;
  colour_N = mkN "colour" ;
  adapter_N = mkN "adapter" ;
  command_N = mkN "command" ;
  line_N = mkN "line" ;
  comma_N = mkN "comma" ;
  separate_V2 = makeV separate_V2 ;
  value_N = mkN "value" ;
  commercial_N = mkN "commercial" ;
  shelf_N = mkN "shelf" ;
  common_N = mkN "common" ;
  request_N = mkN "request" ;
  broker_N = mkN "broker" ;
  public_N = mkN "public" ;
  radio_N = mkN "radio" ;
  communicate_V2 = makeV communicate_V2 ;
  sequential_AP = mkAP sequential_A ;
  disc_N = mkN "disc" ;
  disk_N = mkN "disk" ;
  compatibility_N = mkN "compatibility" ;
  support_N = mkN "support" ;
  module_N = mkN "module" ;
  compatible_AP = mkAP compatible_A ;
  sharing_N = mkN "sharing" ;
  compile_V2 = makeV compile_V2 ;
  function_N = mkN "function" ;
  complex_N = mkN "complex" ;
  instruction_N = mkN "instruction" ;
  set_N = mkN "set" ;
  computer_N = mkN "computer" ;
  computational_AP = mkAP computational_A ;
  fluid_N = mkN "fluid" ;
  dynamics_N = mkN "dynamics" ;
  independent_AP = mkAP independent_A ;
  computation_N = mkN "computation" ;
  compute_V2 = makeV compute_V2 ;
  axial_AP = mkAP axial_A ;
  aid_V2 = makeV aid_V2 ;
  industrial_AP = mkAP industrial_A ;
  manufacture_V2 = makeV manufacture_V2 ;
  quality_N = mkN "quality" ;
  assist_V2 = makeV assist_V2 ;
  translation_N = mkN "translation" ;
  emergency_N = mkN "emergency" ;
  response_N = mkN "response" ;
  team_N = mkN "team" ;
  generate_V2 = makeV generate_V2 ;
  imagery_N = mkN "imagery" ;
  memory_N = mkN "memory" ;
  reservation_N = mkN "reservation" ;
  science_N = mkN "science" ;
  telephony_N = mkN "telephony" ;
  terminal_N = mkN "terminal" ;
  version_N = mkN "version" ;
  database_N = mkN "database" ;
  electronics_N = mkN "electronics" ;
  delivery_N = mkN "delivery" ;
  scramble_VV = makeV scramble_VV ;
  context_N = mkN "context" ;
  free_AP = mkAP free_A ;
  grammar_N = mkN "grammar" ;
  continuous_AP = mkAP continuous_A ;
  protection_N = mkN "protection" ;
  flow_N = mkN "flow" ;
  coordinate_V2 = makeV coordinate_V2 ;
  universal_AP = mkAP universal_A ;
  create_VV = makeV create_VV ;
  read_VS = makeV read_VS ;
  update_N = mkN "update" ;
  delete_V2 = makeV delete_V2 ;
  cross_N = mkN "cross" ;
  platform_N = mkN "platform" ;
  site_N = mkN "site" ;
  forgery_N = mkN "forgery" ;
  cryptography_N = mkN "cryptography" ;
  operation_N = mkN "operation" ;
  relationship_N = mkN "relationship" ;
  cyclic_AP = mkAP cyclic_A ;
  redundancy_N = mkN "redundancy" ;
  check_N = mkN "check" ;
  cylinder_N = mkN "cylinder" ;
  head_N = mkN "head" ;
  sector_N = mkN "sector" ;
  daemon_N = mkN "daemon" ;
  definition_N = mkN "definition" ;
  diagram_N = mkN "diagram" ;
  congestion_N = mkN "congestion" ;
  integrity_N = mkN "integrity" ;
  field_N = mkN "field" ;
  loss_N = mkN "loss" ;
  manipulation_N = mkN "manipulation" ;
  equipment_N = mkN "equipment" ;
  warehouse_N = mkN "warehouse" ;
  arrival_N = mkN "arrival" ;
  packet_N = mkN "packet" ;
  inspection_N = mkN "inspection" ;
  procedure_N = mkN "procedure" ;
  definitive_AP = mkAP definitive_A ;
  media_N = mkN "media" ;
  denial_N = mkN "denial" ;
  attack_N = mkN "attack" ;
  depth_N = mkN "depth" ;
  publish_V2 = makeV publish_V2 ;
  deterministic_AP = mkAP deterministic_A ;
  finite_AP = mkAP finite_A ;
  automaton_N = mkN "automaton" ;
  corporation_N = mkN "corporation" ;
  millennium_N = mkN "millennium" ;
  copyright_N = mkN "copyright" ;
  act_N = mkN "act" ;
  signature_N = mkN "signature" ;
  recorder_N = mkN "recorder" ;
  visual_AP = mkAP visual_A ;
  recovery_N = mkN "recovery" ;
  storage_N = mkN "storage" ;
  rendering_N = mkN "rendering" ;
  manager_N = mkN "manager" ;
  disaster_N = mkN "disaster" ;
  discretionary_AP = mkAP discretionary_A ;
  distribute_V2 = makeV distribute_V2 ;
  document_N = mkN "document" ;
  specification_N = mkN "specification" ;
  identify_V2 = makeV identify_V2 ;
  dot_N = mkN "dot" ;
  pitch_N = mkN "pitch" ;
  double_N = mkN "double" ;
  density_N = mkN "density" ;
  download_V2 = mkV2 (mkV "download") ;
  drag_V2 = makeV drag_V2 ;
  drop_N = mkN "drop" ;
  package_N = mkN "package" ;
  core_N = mkN "core" ;
  region_N = mkN "region" ;
  game_N = mkN "game" ;
  dynamic_AP = mkAP dynamic_A ;
  exchange_N = mkN "exchange" ;
  host_N = mkN "host" ;
  link_V2 = makeV link_V2 ;
  random_AP = mkAP random_A ;
  international_AP = mkAP international_A ;
  learning_N = mkN "learning" ;
  electronically_Adv = mkAdv (mkA "electronically") ;
  store_V2 = makeV store_V2 ;
  electronic_AP = mkAP electronic_A ;
  interchange_N = mkN "interchange" ;
  delay_N = mkN "delay" ;
  calculator_N = mkN "calculator" ;
  frontier_N = mkN "frontier" ;
  foundation_N = mkN "foundation" ;
  identity_N = mkN "identity" ;
  card_N = mkN "card" ;
  mail_N = mkN "mail" ;
  elliptic_AP = mkAP elliptic_A ;
  curve_N = mkN "curve" ;
  elm_N = mkN "elm" ;
  encrypt_V2 = makeV encrypt_V2 ;
  end_N = mkN "end" ;
  day_N = mkN "day" ;
  licence_N = mkN "licence" ;
  agreement_N = mkN "agreement" ;
  enhance_V2 = makeV enhance_V2 ;
  evolution_N = mkN "evolution" ;
  interior_N = mkN "interior" ;
  resource_N = mkN "resource" ;
  estimate_VS = makeV estimate_VS ;
  event_N = mkN "event" ;
  trace_V2 = makeV trace_V2 ;
  format_N = mkN "format" ;
  expand_V2V = makeV expand_V2V ;
  expense_N = mkN "expense" ;
  cost_N = mkN "cost" ;
  explicit_AP = mkAP explicit_A ;
  notification_N = mkN "notification" ;
  industry_N = mkN "industry" ;
  triton_N = mkN "triton" ;
  hint_N = mkN "hint" ;
  markup_N = mkN "markup" ;
  meta_N = mkN "meta" ;
  presence_N = mkN "presence" ;
  tag_N = mkN "tag" ;
  framework_N = mkN "framework" ;
  exterior_N = mkN "exterior" ;
  external_AP = mkAP external_A ;
  sata_N = mkN "sata" ;
  extract_N = mkN "extract" ;
  transform_V2 = makeV transform_V2 ;
  load_N = mkN "load" ;
  extreme_AP = mkAP extreme_A ;
  low_Adv = mkAdv (mkA "low") ;
  frequency_N = mkN "frequency" ;
  fear_N = mkN "fear" ;
  uncertainty_N = mkN "uncertainty" ;
  doubt_N = mkN "doubt" ;
  fedora_N = mkN "fedora" ;
  antenna_N = mkN "antenna" ;
  effect_V2 = makeV effect_V2 ;
  gate_N = mkN "gate" ;
  replaceable_AP = mkAP replaceable_A ;
  allocation_N = mkN "allocation" ;
  hierarchy_N = mkN "hierarchy" ;
  convergence_N = mkN "convergence" ;
  output_N = mkN "output" ;
  instance_N = mkN "instance" ;
  assembly_N = mkN "assembly" ;
  correction_N = mkN "correction" ;
  dictionary_N = mkN "dictionary" ;
  front_N = mkN "front" ;
  side_N = mkN "side" ;
  ssh_N = mkN "ssh" ;
  full_AP = mkAP full_A ;
  future_AP = mkAP future_A ;
  garbage_N = mkN "garbage" ;
  geographic_AP = mkAP geographic_A ;
  geography_N = mkN "geography" ;
  gigabit_N = mkN "gigabit" ;
  gigabyte_N = mkN "gigabyte" ;
  globalization_N = mkN "globalization" ;
  global_AP = mkAP global_A ;
  unique_AP = mkAP unique_A ;
  identifier_N = mkN "identifier" ;
  collection_N = mkN "collection" ;
  documentation_N = mkN "documentation" ;
  privacy_N = mkN "privacy" ;
  guard_N = mkN "guard" ;
  group_N = mkN "group" ;
  recording_N = mkN "recording" ;
  partition_N = mkN "partition" ;
  hard_AP = mkAP hard_A ;
  description_N = mkN "description" ;
  hertz_N = mkN "hertz" ;
  hierarchical_AP = mkAP hierarchical_A ;
  temporal_AP = mkAP temporal_A ;
  performance_N = mkN "performance" ;
  speed_N = mkN "speed" ;
  throughput_N = mkN "throughput" ;
  versatile_AP = mkAP versatile_A ;
  priority_N = mkN "priority" ;
  rapid_AP = mkAP rapid_A ;
  stream_V = mkV "stream" ;
  interaction_N = mkN "interaction" ;
  hybrid_N = mkN "hybrid" ;
  hyperlink_N = mkN "hyperlink" ;
  hypertext_N = mkN "hypertext" ;
  monochrome_N = mkN "monochrome" ;
  input_N = mkN "input" ;
  editor_N = mkN "editor" ;
  facility_N = mkN "facility" ;
  intellectual_AP = mkAP intellectual_A ;
  intelligent_AP = mkAP intelligent_A ;
  interactive_AP = mkAP interactive_A ;
  virtual_AP = mkAP virtual_A ;
  classroom_N = mkN "classroom" ;
  voice_N = mkN "voice" ;
  intermediate_AP = mkAP intermediate_A ;
  commission_N = mkN "commission" ;
  internationalization_N = mkN "internationalization" ;
  localization_N = mkN "localization" ;
  internationalize_V2 = makeV internationalize_V2 ;
  organization_N = mkN "organization" ;
  union_N = mkN "union" ;
  assign_V2V = makeV assign_V2V ;
  authority_N = mkN "authority" ;
  connection_N = mkN "connection" ;
  report_N = mkN "report" ;
  suite_N = mkN "suite" ;
  relay_N = mkN "relay" ;
  chat_N = mkN "chat" ;
  storm_N = mkN "storm" ;
  handler_N = mkN "handler" ;
  interval_N = mkN "interval" ;
  intrusion_N = mkN "intrusion" ;
  countermeasure_N = mkN "countermeasure" ;
  prevention_N = mkN "prevention" ;
  panel_N = mkN "panel" ;
  community_N = mkN "community" ;
  extension_N = mkN "extension" ;
  class_N = mkN "class" ;
  native_N = mkN "native" ;
  edition_N = mkN "edition" ;
  remote_AP = mkAP remote_A ;
  invocation_N = mkN "invocation" ;
  job_N = mkN "job" ;
  entry_N = mkN "entry" ;
  subsystem_N = mkN "subsystem" ;
  test_N = mkN "test" ;
  action_N = mkN "action" ;
  compilation_N = mkN "compilation" ;
  keyboard_N = mkN "keyboard" ;
  kibibyte_N = mkN "kibibyte" ;
  kilobit_N = mkN "kilobit" ;
  kilobyte_N = mkN "kilobyte" ;
  kilohertz_N = mkN "kilohertz" ;
  knowledge_N = mkN "knowledge" ;
  grid_N = mkN "grid" ;
  scale_N = mkN "scale" ;
  recent_AP = mkAP recent_A ;
  significant_AP = mkAP significant_A ;
  diode_N = mkN "diode" ;
  lightweight_AP = mkAP lightweight_A ;
  feed_N = mkN "feed" ;
  aggregation_N = mkN "aggregation" ;
  scratch_N = mkN "scratch" ;
  kernel_N = mkN "kernel" ;
  professional_AP = mkAP professional_A ;
  silicon_N = mkN "silicon" ;
  local_AP = mkAP local_A ;
  logical_AP = mkAP logical_A ;
  volume_N = mkN "volume" ;
  term_N = mkN "term" ;
  insertion_N = mkN "insertion" ;
  voltage_N = mkN "voltage" ;
  magnetic_AP = mkAP magnetic_A ;
  recognition_N = mkN "recognition" ;
  main_AP = mkAP main_A ;
  mandatory_AP = mkAP mandatory_A ;
  role_N = mkN "role" ;
  master_N = mkN "master" ;
  maximum_AP = mkAP maximum_A ;
  transmission_N = mkN "transmission" ;
  medium_N = mkN "medium" ;
  megabit_N = mkN "megabit" ;
  megabyte_N = mkN "megabyte" ;
  megahertz_N = mkN "megahertz" ;
  channel_N = mkN "channel" ;
  microprocessor_N = mkN "microprocessor" ;
  million_N = mkN "million" ;
  minimum_N = mkN "minimum" ;
  ad_N = mkN "ad" ;
  world_N = mkN "world" ;
  congress_N = mkN "congress" ;
  mortality_N = mkN "mortality" ;
  medical_AP = mkAP medical_A ;
  picture_N = mkN "picture" ;
  expert_N = mkN "expert" ;
  factor_N = mkN "factor" ;
  image_N = mkN "image" ;
  label_N = mkN "label" ;
  instrument_N = mkN "instrument" ;
  application_N = mkN "application" ;
  negative_AP = mkAP negative_A ;
  news_N = mkN "news" ;
  appliance_N = mkN "appliance" ;
  internal_AP = mkAP internal_A ;
  uniform_N = mkN "uniform" ;
  spline_N = mkN "spline" ;
  volatile_AP = mkAP volatile_A ;
  laptop_N = mkN "laptop" ;
  child_N = mkN "child" ;
  analytical_AP = mkAP analytical_A ;
  transaction_N = mkN "transaction" ;
  utility_N = mkN "utility" ;
  path_N = mkN "path" ;
  initiative_N = mkN "initiative" ;
  interconnection_N = mkN "interconnection" ;
  acceptance_N = mkN "acceptance" ;
  convention_N = mkN "convention" ;
  organic_AP = mkAP organic_A ;
  original_N = mkN "original" ;
  manufacturer_N = mkN "manufacturer" ;
  orthogonal_AP = mkAP orthogonal_A ;
  password_N = mkN "password" ;
  express_N = mkN "express" ;
  instrumentation_N = mkN "instrumentation" ;
  peer_N = mkN "peer" ;
  peripheral_N = mkN "peripheral" ;
  interconnect_V2 = makeV interconnect_V2 ;
  perl_N = mkN "perl" ;
  regular_AP = mkAP regular_A ;
  expression_N = mkN "expression" ;
  persistent_AP = mkAP persistent_A ;
  assistant_N = mkN "assistant" ;
  php_N = mkN "php" ;
  microcontroller_N = mkN "microcontroller" ;
  pin_N = mkN "pin" ;
  pixel_N = mkN "pixel" ;
  old_AP = mkAP old_A ;
  control_V2 = makeV control_V2 ;
  list_V2V = makeV list_V2V ;
  time_V2 = makeV time_V2 ;
  acoustic_AP = mkAP acoustic_A ;
  current_AP = mkAP current_A ;
  liquid_AP = mkAP liquid_A ;
  display_VS = makeV display_VS ;
  monitor_V2 = makeV monitor_V2 ;
  page_V2 = makeV page_V2 ;
  object_V2 = makeV object_V2 ;
  cache_V2 = makeV cache_V2 ;
  address_V2 = makeV address_V2 ;
  space_V2 = makeV space_V2 ;
  flash_V2 = makeV flash_V2 ;
  power_V2 = makeV power_V2 ;
  standard_AP = mkAP standard_A ;
  sound_V2 = makeV sound_V2 ;
  research_V2 = makeV research_V2 ;
  project_VS = makeV project_VS ;
  state_VS = makeV state_VS ;
  rate_VS = makeV rate_VS ;
  institute_V2 = makeV institute_V2 ;
  number_V2 = makeV number_V2 ;
  escape_VS = makeV escape_VS ;
  border_V2 = makeV border_V2 ;
  transfer_V2 = makeV transfer_V2 ;
  call_V3 = makeV call_V3 ;
  plane_V2 = makeV plane_V2 ;
  file_V2 = makeV file_V2 ;
  block_V2 = makeV block_V2 ;
  map_V2 = makeV map_V2 ;
  order_VV = makeV order_VV ;
  mark_V3 = makeV mark_V3 ;
  fault_V2 = makeV fault_V2 ;
  sense_VS = makeV sense_VS ;
  multiple_AP = mkAP multiple_A ;
  ray_V2 = makeV ray_V2 ;
  challenge_V2 = makeV challenge_V2 ;
  chief_AP = mkAP chief_A ;
  command_V2 = makeV command_V2 ;
  value_V2 = makeV value_V2 ;
  commercial_AP = mkAP commercial_A ;
  common_AP = mkAP common_A ;
  request_VS = makeV request_VS ;
  public_AP = mkAP public_A ;
  support_VV = makeV support_VV ;
  function_V = mkV "function" ;
  complex_AP = mkAP complex_A ;
  set_VV = makeV set_VV ;
  component_AP = mkAP component_A ;
  fluid_AP = mkAP fluid_A ;
  free_V2V = makeV free_V2V ;
  update_V2 = makeV update_V2 ;
  check_V2 = makeV check_V2 ;
  attack_V2 = makeV attack_V2 ;
  act_VA = mkVA act_VA ;
  document_V2 = makeV document_V2 ;
  double_V2 = makeV double_V2 ;
  double_Adv = mkAdv (mkA "double") ;
  drop_V2 = makeV drop_V2 ;
  game_V2 = makeV game_V2 ;
  exchange_V2 = makeV exchange_V2 ;
  learn_VV = makeV learn_VV ;
  interchange_V2 = makeV interchange_V2 ;
  mail_V2 = makeV mail_V2 ;
  curve_V2 = makeV curve_V2 ;
  end_VA = mkVA end_VA ;
  license_V2 = makeV license_V2 ;
  interior_AP = mkAP interior_A ;
  hint_VS = makeV hint_VS ;
  exterior_AP = mkAP exterior_A ;
  extract_V2 = makeV extract_V2 ;
  load_V2 = makeV load_V2 ;
  doubt_VS = makeV doubt_VS ;
  partition_V2 = makeV partition_V2 ;
  hard_Adv = mkAdv (mkA "hard") ;
  monochrome_AP = mkAP monochrome_A ;
  report_VS = makeV report_VS ;
  chat_V2 = makeV chat_V2 ;
  storm_V2 = makeV storm_V2 ;
  native_AP = mkAP native_A ;
  job_V2 = makeV job_V2 ;
  scale_V2 = makeV scale_V2 ;
  scratch_V2 = makeV scratch_V2 ;
  master_V2 = makeV master_V2 ;
  label_V3 = makeV label_V3 ;
  uniform_AP = mkAP uniform_A ;
  original_AP = mkAP original_A ;
  express_V2 = makeV express_V2 ;
  express_Adv = mkAdv (mkA "express") ;
  peer_V = mkV "peer" ;
  peripheral_AP = mkAP peripheral_A ;
  course_N = mkN "course" ;
  prerequisite_N = mkN "prerequisite" ;
  design_N = mkN "design" ;
  principle_N = mkN "principle" ;
  aim_N = mkN "aim" ;
  component_N = mkN "component" ;
  technical_AP = mkAP technical_A ;
  functional_AP = mkAP functional_A ;
  execute_V2 = makeV execute_V2 ;
  fast_Adv = mkAdv (mkA "fast") ;
  fast_AP = mkAP fast_A ;
  efficient_AP = mkAP efficient_A ;
  progress_N = mkN "progress" ;
  engineering_N = mkN "engineering" ;
  convert_V2 = makeV convert_V2 ;
  raw_N = mkN "raw" ;
  software_N = mkN "software" ;
  structure_N = mkN "structure" ;
  parallelism_N = mkN "parallelism" ;
  high_AP = mkAP high_A ;
  outcome_N = mkN "outcome" ;
  completion_N = mkN "completion" ;
  concept_N = mkN "concept" ;
  modern_AP = mkAP modern_A ;
  advance_N = mkN "advance" ;
  field_N = mkN "field" ;
  advance_V2 = makeV advance_V2 ;
  technique_N = mkN "technique" ;
  parallel_N = mkN "parallel" ;
  parallel_AP = mkAP parallel_A ;
  establish_V2 = makeV establish_V2 ;
  assess_V2 = makeV assess_V2 ;
  proficiency_N = mkN "proficiency" ;
  quantitative_AP = mkAP quantitative_A ;
  impact_N = mkN "impact" ;
  architectural_AP = mkAP architectural_A ;
  state_N = mkN "state" ;
  simulation_N = mkN "simulation" ;
  tool_N = mkN "tool" ;
  content_N = mkN "content" ;
  essential_N = mkN "essential" ;
  achieve_V2 = makeV achieve_V2 ;
  base_V2 = makeV base_V2 ;
  analysis_N = mkN "analysis" ;
  assessment_N = mkN "assessment" ;
  consumption_N = mkN "consumption" ;
  part_N = mkN "part" ;
  affect_V2 = makeV affect_V2 ;
  evolution_N = mkN "evolution" ;
  include_VV = makeV include_VV ;
  law_N = mkN "law" ;
  execution_N = mkN "execution" ;
  fundamental_N = mkN "fundamental" ;
  locality_N = mkN "locality" ;
  evaluate_V2 = makeV evaluate_V2 ;
  level_N = mkN "level" ;
  define_V2 = makeV define_V2 ;
  limit_N = mkN "limit" ;
  category_N = mkN "category" ;
  dynamic_N = mkN "dynamic" ;
  static_AP = mkAP static_A ;
  algorithm_N = mkN "algorithm" ;
  branch_N = mkN "branch" ;
  prediction_N = mkN "prediction" ;
  speculation_N = mkN "speculation" ;
  loop_N = mkN "loop" ;
  different_AP = mkAP different_A ;
  bottleneck_N = mkN "bottleneck" ;
  reduce_V2 = makeV reduce_V2 ;
  miss_N = mkN "miss" ;
  penalty_N = mkN "penalty" ;
  hit_N = mkN "hit" ;
  example_N = mkN "example" ;
  free_N = mkN "free" ;
  address_V2 = makeV address_V2 ;
  linear_AP = mkAP linear_A ;
  algebra_N = mkN "algebra" ;
  probability_N = mkN "probability" ;
  theory_N = mkN "theory" ;
  program_V2V = makeV program_V2V ;
  desirable_AP = mkAP desirable_A ;
  image_N = mkN "image" ;
  overview_N = mkN "overview" ;
  practical_AP = mkAP practical_A ;
  measurement_N = mkN "measurement" ;
  develop_V2 = makeV develop_V2 ;
  solve_V2 = makeV solve_V2 ;
  problem_N = mkN "problem" ;
  derive_V2 = makeV derive_V2 ;
  geometry_N = mkN "geometry" ;
  optimization_N = mkN "optimization" ;
  statistics_N = mkN "statistics" ;
  grade_V2 = makeV grade_V2 ;
  camera_N = mkN "camera" ;
  modelling_N = mkN "modelling" ;
  stereo_N = mkN "stereo" ;
  mathematical_AP = mkAP mathematical_A ;
  central_N = mkN "central" ;
  square_N = mkN "square" ;
  apply_VV = makeV apply_VV ;
  terminology_N = mkN "terminology" ;
  structure_V2 = makeV structure_V2 ;
  solution_N = mkN "solution" ;
  geometric_AP = mkAP geometric_A ;
  exercise_N = mkN "exercise" ;
  session_N = mkN "session" ;
  pair_N = mkN "pair" ;
  submission_N = mkN "submission" ;
  result_N = mkN "result" ;
  lecture_N = mkN "lecture" ;
  article_N = mkN "article" ;
  university_N = mkN "university" ;
  element_N = mkN "element" ;
  programming_N = mkN "programming" ;
  model_N = mkN "model" ;
  chip_N = mkN "chip" ;
  share_V2 = makeV share_V2 ;
  thread_N = mkN "thread" ;
  scientific_AP = mkAP scientific_A ;
  literature_N = mkN "literature" ;
  sequence_N = mkN "sequence" ;
  lab_N = mkN "lab" ;
  methodology_N = mkN "methodology" ;
  systematically_Adv = mkAdv (mkA "systematically") ;
  assembly_N = mkN "assembly" ;
  sustainability_N = mkN "sustainability" ;
  compute_V2 = makeV compute_V2 ;
  sustainable_AP = mkAP sustainable_A ;
  electrical_AP = mkAP electrical_A ;
  mechanism_N = mkN "mechanism" ;
  storage_N = mkN "storage" ;
  energy_N = mkN "energy" ;
  operate_V2 = makeV operate_V2 ;
  optimize_V2 = mkV2 (mkV "optimize") ;
  interpret_V2 = makeV interpret_V2 ;
  requirement_N = mkN "requirement" ;
  measure_V2 = makeV measure_V2 ;
  estimate_VS = makeV estimate_VS ;
  save_V2 = makeV save_V2 ;
  generation_N = mkN "generation" ;
  practice_N = mkN "practice" ;
  discrete_AP = mkAP discrete_A ;
  complexity_N = mkN "complexity" ;
  kind_N = mkN "kind" ;
  context_N = mkN "context" ;
  transportation_N = mkN "transportation" ;
  physics_N = mkN "physics" ;
  numerical_AP = mkAP numerical_A ;
  modeling_N = mkN "modeling" ;
  equation_N = mkN "equation" ;
  molecular_AP = mkAP molecular_A ;
  integration_N = mkN "integration" ;
  planning_N = mkN "planning" ;
  hardware_N = mkN "hardware" ;
  property_N = mkN "property" ;
  optimal_AP = mkAP optimal_A ;
  formulate_V2 = makeV formulate_V2 ;
  model_V2 = makeV model_V2 ;
  manageable_AP = mkAP manageable_A ;
  relate_V2 = makeV relate_V2 ;
  generic_AP = mkAP generic_A ;
  additional_AP = mkAP additional_A ;
  heuristic_N = mkN "heuristic" ;
  dual_AP = mkAP dual_A ;
  obtain_V2 = makeV obtain_V2 ;
  program_V2V = makeV program_V2V ;
  integer_N = mkN "integer" ;
  special_AP = mkAP special_A ;
  separate_V2 = makeV separate_V2 ;
  stack_N = mkN "stack" ;
  distribute_V2 = makeV distribute_V2 ;
  service_N = mkN "service" ;
  summarize_V2 = makeV summarize_V2 ;
  introduce_V2 = makeV introduce_V2 ;
  development_N = mkN "development" ;
  setting_N = mkN "setting" ;
  link_N = mkN "link" ;
  limit_V2V = makeV limit_V2V ;
  scalability_N = mkN "scalability" ;
  imperative_AP = mkAP imperative_A ;
  vector_N = mkN "vector" ;
  dimension_N = mkN "dimension" ;
  implement_V2 = makeV implement_V2 ;
  process_N = mkN "process" ;
  functionality_N = mkN "functionality" ;
  strict_AP = mkAP strict_A ;
  bachelor_N = mkN "bachelor" ;
  dimensional_AP = mkAP dimensional_A ;
  rendering_N = mkN "rendering" ;
  shadow_N = mkN "shadow" ;
  mathematics_N = mkN "mathematics" ;
  design_V2V = makeV design_V2V ;
  mechanical_AP = mkAP mechanical_A ;
  safety_N = mkN "safety" ;
  multimedia_N = mkN "multimedia" ;
  abstraction_N = mkN "abstraction" ;
  implement_N = mkN "implement" ;
  synchronization_N = mkN "synchronization" ;
  node_N = mkN "node" ;
  topology_N = mkN "topology" ;
  embed_V2 = makeV embed_V2 ;
  perform_V2 = makeV perform_V2 ;
  behavior_N = mkN "behavior" ;
  run_VS = makeV run_VS ;
  verify_V2 = makeV verify_V2 ;
  set_N = mkN "set" ;
  good_AP = mkAP good_A ;
  during_Prep = mkPrep "during" ;
  task_N = mkN "task" ;
  decompose_V2 = makeV decompose_V2 ;
  general_AP = mkAP general_A ;
  capacity_N = mkN "capacity" ;
  access_N = mkN "access" ;
  response_N = mkN "response" ;
  conjunction_N = mkN "conjunction" ;
  account_N = mkN "account" ;
  maximum_N = mkN "maximum" ;
  low_Adv = mkAdv (mkA "low") ;
  delay_N = mkN "delay" ;
  correctness_N = mkN "correctness" ;
  philosophy_N = mkN "philosophy" ;
  complex_AP = mkAP complex_A ;
  maintain_VS = makeV maintain_VS ;
  semaphore_N = mkN "semaphore" ;
  semantics_N = mkN "semantics" ;
  induction_N = mkN "induction" ;
  proof_N = mkN "proof" ;
  formal_AP = mkAP formal_A ;
  algebraic_AP = mkAP algebraic_A ;
  monad_N = mkN "monad" ;
  transformer_N = mkN "transformer" ;
  property_N = mkN "property" ;
  construction_N = mkN "construction" ;
  construct_V2 = makeV construct_V2 ;
  quick_AP = mkAP quick_A ;
  exception_N = mkN "exception" ;
  implementation_N = mkN "implementation" ;
  vulnerability_N = mkN "vulnerability" ;
  permutation_N = mkN "permutation" ;
  artificial_intelligence_CN = makeCN artificial_A intelligence_N ;
  cipher_N = mkN "cipher" ;
  cryptanalysis_N = mkN "cryptanalysis" ;
  symmetric_AP = mkAP symmetric_A ;
  computer_science_CN = makeCN computer_N science_N ;
  software_development_CN = makeCN software_N development_N ;
  application_software_CN = makeCN application_N software_N ;
  data_structure_CN = makeCN data_N structure_N ;
  automata_theory_CN = makeCN (mkA "automata") theory_N ;
  binary_search_algorithm_CN = makeCN binary_A search_N algorithm_N ;
  bit_rate_CN = makeCN bit_N rate_N ;
  cloud_computing_CN = makeCN cloud_N (mkN "computing") ;
  library_CN = makeCN library_N ;
  cognitive_science_CN = makeCN cognitive_A science_N ;
  computability_theory_CN = makeCN (mkN "computability") theory_N ;
  computational_biology_CN = makeCN computational_A biology_N ;
  computational_chemistry_CN = makeCN computational_A chemistry_N ;
  computational_physics_CN = makeCN computational_A physics_N ;
  computer_architecture_CN = makeCN computer_N architecture_N ;
  computer_data_storage_CN = makeCN computer_N data_N storage_N ;
  computer_graphics_CN = makeCN computer_N graphics_N ;
  computer_network_CN = makeCN computer_N network_N ;
  computer_scientist_CN = makeCN computer_N scientist_N ;
  computer_security_CN = makeCN computer_N security_N ;
  concurrency_N = mkN "concurrency" ;
  control_flow_CN = makeCN control_N flow_N ;
  cyberbullying_N = mkN "cyberbullying" ;
  cyberspace_N = mkN "cyberspace" ;
  data_center_CN = makeCN data_N (mkN "center") ;
  data_mining_CN = makeCN data_N mining_N ;
  data_type_CN = makeCN data_N type_N ;
  signal_processing_CN = makeCN signal_N processing_N ;
  domain_name_system_CN = makeCN domain_N name_N system_N ;
  download_N = mkN "download" ;
  event_N = mkN "event" ;
  executable_AP = mkAP (mkA "executable") ;
  file_N = mkN "file" ;
  exception_handling_CN = makeCN exception_N handling_N ;
  feasibility_study_CN = makeCN feasibility_N study_N ;
  filename_extension_CN = makeCN filename_N extension_N ;
  verification_N = mkN "verification" ;
  game_theory_CN = makeCN game_N theory_N ;
  graph_theory_CN = makeCN graph_N theory_N ;
  hash_function_CN = makeCN hash_N function_N ;
  hash_table_CN = makeCN hash_N table_N ;
  heapsort_N = mkN "heapsort" ;
  --human-computer_interation_CN = makeCN human-computer_N interation_N ;
  integrated_development_environment_CN = makeCN (mkA "integrated") development_N environment_N ;
  imperative_programming_CN = makeCN imperative_A programming_N ;
  inheritance_N = mkN "inheritance" ;
  insertion_sort_CN = makeCN insertion_N sort_N ;
  array_N = mkN "array" ;
  binary_tree_CN = makeCN binary_A tree_N ;
  bioinformatics_N = mkN "bioinformatics" ;
  boolean_data_type_CN = makeCN (mkA "boolean") data_N type_N ;
  crypto_N = mkN "crypto" ;
  computer_vision_CN = makeCN computer_N vision_N ;
  concatenation_N = mkN "concatenation" ;
  agent_N = mkN "agent" ;
  invariant_AP = mkAP invariant_A ;
  iteration_N = mkN "iteration" ;
  Java_N = mkN "Java" ;
  programming_language_CN = makeCN programming_N language_N ;
  linear_search_CN = makeCN linear_A search_N ;
  linked_list_CN = makeCN (mkA "linked") list_N ;
  logic_programming_CN = makeCN logic_N programming_N ;
  machine_learning_CN = makeCN machine_N learning_N ;
  number_theory_CN = makeCN number_N theory_N ;
  numerical_analysis_CN = makeCN numerical_A analysis_N ;
  operating_system_CN = makeCN (mkA "operating") system_N ;
  optical_fiber_CN = makeCN optical_A (mkN "fiber") ;
  pair_programming_CN = makeCN pair_N programming_N ;
  priority_queue_CN = makeCN priority_N queue_N ;
  quantum_computer_CN = makeCN quantum_N computer_N ;
  queue_N = mkN "queue" ;
  recursion_N = mkN "recursion" ;
  relational_database_CN = makeCN relational_A database_N ;
  requirements_analysis_CN = makeCN (mkN "requirements") analysis_N ;
  routing_table_CN = makeCN (mkN "routing") table_N ;
  selection_sort_CN = makeCN selection_N sort_N ;
  sequence_N = mkN "sequence" ;
  software_N = mkN "software" ;
  software_deployment_CN = makeCN software_N deployment_N ;
  --software_development_CN = makeCN software_N development_N ;
  sorting_algorithm_CN = makeCN sorting_N algorithm_N ;
  source_code_CN = makeCN source_N code_N ;
  string_N = mkN "string" ;
  user_agent_CN = makeCN user_N agent_N ;
  user_interface_CN = makeCN user_N interface_N ;
  waterfall_model_CN = makeCN waterfall_N model_N ;
  --Wi-Fi_N = mkN "Wi-Fi" ;
  XHTML_N = mkN "XHTML" ;
  mathematical_model_CN = makeCN mathematical_A model_N ;
  generalization_N = mkN "generalization" ;
  concept_N = mkN "concept" ;
  blueprint_N = mkN "blueprint" ;
  customer_N = mkN "customer" ;
  end_user_CN = makeCN end_N user_N ;
  calculation_N = mkN "calculation" ;
  productivity_N = mkN "productivity" ;
  dynamic_programming_CN = makeCN dynamic_A programming_N ;
  computer_interaction_CN = makeCN computer_N interaction_N ;
  development_environment_CN = makeCN development_N environment_N ;
  computer_program_CN = makeCN computer_N program_N ;
  programmer_N = mkN "programmer" ;
  word_processor_CN = makeCN word_N processor_N ;
  spreadsheet_N = mkN "spreadsheet" ;
  accounting_software_CN = makeCN accounting_N software_N ;
  web_browser_CN = makeCN web_N browser_N ;
  media_player_CN = makeCN media_N player_N ;
  flight_simulator_CN = makeCN flight_N simulator_N ;
  use_case_CN = makeCN use_N case_N ;
  class_diagram_CN = makeCN class_N diagram_N ;
  theoretical_AP = mkAP theoretical_A ;
  discreet_AP = mkAP discreet_A ;
  mathematics_N = mkN "mathematics" ;
  discrete_mathematics_CN = makeCN discrete_A mathematics_N ;
  probability_distribution_CN = makeCN probability_N distribution_N ;
  time_complexity_CN = makeCN time_N complexity_N ;
  number_N = mkN "number" ;
  set_theory_CN = makeCN set_N theory_N ;
  empty_set_CN = makeCN empty_A set_N ;
  software_tool_CN = makeCN software_N tool_N ;
  biology_N = mkN "biology" ;
  telecommunications_N = mkN "telecommunications" ;
  access_control_CN = makeCN access_N control_N ;
  domain_name_CN = makeCN domain_N name_N ;
  --ip-adress_N = mkN "ip-adress" ;
  whitelist_N = mkN "whitelist" ;
  graphics_card_CN = makeCN (mkA "graphics") card_N ;
  truth_value_CN = makeCN truth_N value_N ;
  variable_N = mkN "variable" ;
  disjunction_N = mkN "disjunction" ;
  negation_N = mkN "negation" ;
  hard_drive_CN = makeCN hard_A drive_N ;
  control_unit_CN = makeCN control_N unit_N ;
  hardware_N = mkN "hardware" ;
  code_N = mkN "code" ;
  information_theory_CN = makeCN information_N theory_N ;
  electronics_N = mkN "electronics" ;
  linguistics_N = mkN "linguistics" ;
  table_N = mkN "table" ;
  file_format_CN = makeCN file_N format_N ;
  computer_engineering_CN = makeCN computer_N engineering_N ;
  engineering_N = mkN "engineering" ;
  information_system_CN = makeCN information_N system_N ;
  digital_signal_processor_CN = makeCN digital_A signal_N processor_N ;
  web_server_CN = makeCN web_N server_N ;
  programming_paradigm_CN = makeCN programming_N paradigm_N ;
  sensor_N = mkN "sensor" ;
  graphic_AP = mkAP graphic_A ;
  web_application_CN = makeCN web_N application_N ;
  device_driver_CN = makeCN device_N driver_N ;
  instruction_set_architecture_CN = makeCN instruction_N set_N architecture_N ;
  parser_N = mkN "parser" ;
  interruption_N = mkN "interruption" ;
  --inter-process_communication_CN = makeCN inter-process_A communication_N ;
  operator_N = mkN "operator" ;
  file_name_CN = makeCN file_N name_N ;
  --command-line_interpreter_CN = makeCN command-line_N interpreter_N ;
  unique_key_CN = makeCN unique_A key_N ;
  debugger_N = mkN "debugger" ;
  property_N = mkN "property" ;
  touchscreen_N = mkN "touchscreen" ;
  scripting_language_CN = makeCN (mkN "scripting") language_N ;
  bug_N = mkN "bug" ;
  LED_N = mkN "LED" ;
  speech_recognition_CN = makeCN speech_N recognition_N ;
  memory_address_CN = makeCN memory_N address_N ;
  computer_engineering_CN = makeCN computer_N engineering_N ;
  operation_N = mkN "operation" ;
  unit_N = mkN "unit" ;
  symbol_N = mkN "symbol" ;
  personal_computer_CN = makeCN personal_A computer_N ;
  bot_N = mkN "bot" ;
  wireless_AP = mkAP wireless_A ;
  web_page_CN = makeCN web_N page_N ;
  scanner_N = mkN "scanner" ;
  abstract_AP = mkAP abstract_A ;
  concrete_AP = mkAP concrete_A ;
  accumulator_N = mkN "accumulator" ;
  accuracy_N = mkN "accuracy" ;
  precision_N = mkN "precision" ;
  selection_N = mkN "selection" ;
  activation_N = mkN "activation" ;
  inference_N = mkN "inference" ;
  resolution_N = mkN "resolution" ;
  argument_N = mkN "argument" ;
  associative_AP = mkAP associative_A ;
  automated_AP = mkAP (mkA "automated") ;
  reasoning_N = mkN "reasoning" ;
  automaton_N = mkN "automaton" ;
  robot_N = mkN "robot" ;
  robotics_N = mkN "robotics" ;
  benchmark_N = mkN "benchmark" ;
  branch_V = mkV "branch" ;
  answer_N = mkN "answer" ;
  nested_AP = mkAP (mkA "nested") ;
  statement_N = mkN "statement" ;
  parameter_N = mkN "parameter" ;
  comment_N = mkN "comment" ;
  framework_N = mkN "framework" ;
  --if-loop_N = mkN "if-loop" ;
  --if-statement_N = mkN "if-statement" ;
  --while-loop_N = mkN "while-loop" ;
  --while-statement_N = mkN "while-statement" ;
  allocation_N = mkN "allocation" ;
  search_V2 = makeV search_V2 ;
  build_V2 = makeV build_V2 ;
  engine_N = mkN "engine" ;
  capsule_N = mkN "capsule" ;
  categorical_AP = mkAP categorical_A ;
  classifier_N = mkN "classifier" ;
  clock_V2 = makeV clock_V2 ;
  column_N = mkN "column" ;
  sort_V2 = makeV sort_V2 ;
  computable_AP = mkAP computable_A ;
  console_N = mkN "console" ;
  constant_N = mkN "constant" ;
  constrain_V2 = makeV constrain_V2 ;
  conditional_AP = mkAP conditional_A ;
  constraint_N = mkN "constraint" ;
  container_N = mkN "container" ;
  redundant_AP = mkAP redundant_A ;
  condition_N = mkN "condition" ;
  block_N = mkN "block" ;
  boolean_AP = mkAP (mkA "boolean") ;
  program_N = mkN "program" ;
  sequential_AP = mkAP sequential_A ;
  declaration_N = mkN "declaration" ;
  declare_V = mkV "declare" ;
  initialization_N = mkN "initialization" ;
  initialize_V = mkV "initialize" ;
  index_N = mkN "index" ;
  runtime_N = mkN "runtime" ;
  error_N = mkN "error" ;
  runtime_error_CN = makeCN runtime_N error_N ;
  accelerator_N = mkN "accelerator" ;
  cooling_N = mkN "cooling" ;
  asymptotic_AP = mkAP asymptotic_A ;
  optical_AP = mkAP optical_A ;
  variance_N = mkN "variance" ;
  pattern_N = mkN "pattern" ;
  blacklist_N = mkN "blacklist" ;
  automation_N = mkN "automation" ;
  coherency_N = mkN "coherency" ;
  closure_N = mkN "closure" ;
  histogram_N = mkN "histogram" ;
  combinatorial_AP = mkAP combinatorial_A ;
  comparison_N = mkN "comparison" ;
  compile_V2 = makeV compile_V2 ;
  cybernetics_N = mkN "cybernetics" ;
  conceptual_AP = mkAP conceptual_A ;
  conceptualization_N = mkN "conceptualization" ;
  consistent_AP = mkAP consistent_A ;
  satisfaction_N = mkN "satisfaction" ;
  continual_AP = mkAP continual_A ;
  improvement_N = mkN "improvement" ;
  continuation_N = mkN "continuation" ;
  style_N = mkN "style" ;
  cooperative_AP = mkAP cooperative_A ;
  processing_N = mkN "processing" ;
  stream_N = mkN "stream" ;
  boundary_N = mkN "boundary" ;
  default_N = mkN "default" ;
  dependency_N = mkN "dependency" ;
  differentiable_AP = mkAP differentiable_A ;
  reduction_N = mkN "reduction" ;
  disk_N = mkN "disk" ;
  display_N = mkN "display" ;
  divide_V2 = makeV divide_V2 ;
  conquer_V2 = makeV conquer_V2 ;
  point_N = mkN "point" ;
  creativity_N = mkN "creativity" ;
  effective_AP = mkAP effective_A ;
  descriptive_AP = mkAP descriptive_A ;
  cable_N = mkN "cable" ;
  interference_N = mkN "interference" ;
  switch_N = mkN "switch" ;
  extract_V2 = makeV extract_V2 ;
  transform_V2 = makeV transform_V2 ;
  false_AP = mkAP false_A ;
  feature_N = mkN "feature" ;
  extraction_N = mkN "extraction" ;
  controller_N = mkN "controller" ;
  formula_N = mkN "formula" ;
  frame_N = mkN "frame" ;
  open_AP = mkAP open_A ;
  signature_N = mkN "signature" ;
  generative_AP = mkAP generative_A ;
  genetic_AP = mkAP genetic_A ;
  human_N = mkN "human" ;
  segmentation_N = mkN "segmentation" ;
  immutable_AP = mkAP immutable_A ;
  incremental_AP = mkAP incremental_A ;
  indicator_N = mkN "indicator" ;
  hide_V2 = makeV hide_V2 ;
  query_N = mkN "query" ;
  visualization_N = mkN "visualization" ;
  input_N = mkN "input" ;
  cycle_N = mkN "cycle" ;
  test_V2 = makeV test_V2 ;
  internal_AP = mkAP internal_A ;
  public_AP = mkAP public_A ;
  interpretation_N = mkN "interpretation" ;
  irregular_AP = mkAP irregular_A ;
  issue_N = mkN "issue" ;
  iterative_AP = mkAP iterative_A ;
  primitive_AP = mkAP primitive_A ;
  lazy_AP = mkAP lazy_A ;
  merger_N = mkN "merger" ;
  loader_N = mkN "loader" ;
  implication_N = mkN "implication" ;
  random_AP = mkAP random_A ;
  motion_N = mkN "motion" ;
  entity_N = mkN "entity" ;
  nondeterministic_AP = mkAP (mkA "nondeterministic") ;
  monotonic_AP = mkAP monotonic_A ;
  transformation_N = mkN "transformation" ;
  precondition_N = mkN "precondition" ;
  key_feature_CN = makeCN key_N feature_N ;
  garbage_collection_CN = makeCN garbage_N collection_N ;
  global_variable_CN = makeCN global_A variable_N ;
  virus_N = mkN "virus" ;
  motion_sensor_CN = makeCN motion_N sensor_N ;
  player_N = mkN "player" ;
  recursive_AP = mkAP recursive_A ;
  connection_N = mkN "connection" ;
  register_V2 = makeV register_V2 ;
  scope_N = mkN "scope" ;
  semiconductor_N = mkN "semiconductor" ;
  simulate_V2 = makeV simulate_V2 ;
  singleton_N = mkN "singleton" ;
  maintenance_N = mkN "maintenance" ;
  validation_N = mkN "validation" ;
  editor_N = mkN "editor" ;
  spam_N = mkN "spam" ;
  subset_N = mkN "subset" ;
  technological_AP = mkAP technological_A ;
  translator_N = mkN "translator" ;
  true_N = mkN "true" ;
  user_N = mkN "user" ;
  programmable_AP = mkAP (mkA "programmable") ;
  text_editor_CN = makeCN text_N editor_N ;
  register_N = mkN "register" ;
  hardware_acceleration_CN = makeCN hardware_N acceleration_N ;
  address_space_CN = makeCN address_N space_N ;
  card_reader_CN = makeCN card_N reader_N ;
  cache_N = mkN "cache" ;
  --CD-ROM_N = mkN "CD-ROM" ;
  computer_case_CN = makeCN computer_N case_N ;
  form_factor_CN = makeCN form_N factor_N ;
  core_memory_CN = makeCN core_N memory_N ;
  expansion_bus_CN = makeCN expansion_N bus_N ;
  firewall_N = mkN "firewall" ;
  firmware_N = mkN "firmware" ;
  flash_memory_CN = makeCN (mkA "flash") memory_N ;
  floppy_disk_CN = makeCN floppy_A disk_N ;
  graphics_processing_unit_CN = makeCN (mkA "graphics") processing_N unit_N ;
  hard_disk_drive_CN = makeCN hard_A disk_N drive_N ;
  instruction_N = mkN "instruction" ;
  integrated_circuit_CN = makeCN (mkA "integrated") circuit_N ;
  keyboard_N = mkN "keyboard" ;
  mainframe_computer_CN = makeCN mainframe_N computer_N ;
  memory_card_CN = makeCN memory_N card_N ;
  microcode_N = mkN "microcode" ;
  motherboard_N = mkN "motherboard" ;
  network_interface_controller_CN = makeCN network_N interface_N controller_N ;
  power_supply_CN = makeCN power_N supply_N ;
  printer_N = mkN "printer" ;
  sound_card_CN = makeCN sound_N card_N ;
  tape_drive_CN = makeCN tape_N drive_N ;
  computer_terminal_CN = makeCN computer_N terminal_N ;
  trackpad_N = mkN "trackpad" ;
  video_card_CN = makeCN video_N card_N ;
  webcam_N = mkN "webcam" ;
  enhet_N = mkN "enhet" ;
  fan_N = mkN "fan" ;
  screen_N = mkN "screen" ;
  LED_display_CN = makeCN LED_N display_N ;
  data_storage_device_CN = makeCN data_N storage_N device_N ;
  communications_protocol_CN = makeCN communications_N protocol_N ;
  printed_circuit_board_CN = makeCN (mkA "printed") circuit_N board_N ;
  parallel_computing_CN = makeCN parallel_A (mkN "computing") ;
  graphical_AP = mkAP graphical_A ;
  desktop_computer_CN = makeCN desktop_N computer_N ;
  laser_N = mkN "laser" ;
  electromagnetic_AP = mkAP electromagnetic_A ;
  computer_mouse_CN = makeCN computer_N mouse_N ;
  --static_random-access_memory_CN = makeCN static_A random-access_A memory_N ;
  electromagnetic_wave_CN = makeCN electromagnetic_A wave_N ;
  optical_disc_CN = makeCN optical_A disc_N ;
  computer_security_model_CN = makeCN computer_N security_N model_N ;
  information_technology_CN = makeCN information_N technology_N ;
  --software_development_CN = makeCN software_N development_V ;
  programming_language_CN = makeCN programming_N language_N ;
  unauthorized_access_CN = makeCN unauthorized_A access_N ;
  confidential_information_CN = makeCN confidential_A information_N ;
  holistic_approach_CN = makeCN holistic_A approach_N ;
  ethical_aspect_CN = makeCN ethical_A aspect_N ;
  design_pattern_CN = makeCN design_N pattern_N ;
  mathematical_modelling_CN = makeCN mathematical_A modelling_N ;
  functional_programming_CN = makeCN functional_A programming_N ;
  business_information_system_CN = makeCN business_N information_N system_N ;
  database_administator_CN = makeCN database_N (mkN "administator") ;
  recursive_data_type_CN = makeCN recursive_A data_N type_N ;
  graphical_user_interface_CN = makeCN graphical_A user_N interface_N ;
  --two-factor_authentication_CN = makeCN two-factor_A authentication_N ;
  mandatory_access_control_CN = makeCN mandatory_A access_N control_N ;
  system_specification_CN = makeCN system_N specification_N ;
  --multi-core_processor_CN = makeCN multi-core_A processor_N ;
  --domain-specific_language_CN = makeCN domain-specific_A language_N ;
  data_management_CN = makeCN data_N management_N ;
  --object-oriented_program_CN = makeCN object-oriented_A program_N ;
  --source_code_CN = makeCN source_A code_N ;
  machine_code_CN = makeCN machine_N code_N ;
  computer_system_CN = makeCN computer_N system_N ;
  software_engineer_CN = makeCN software_N engineer_N ;
  software_system_CN = makeCN software_N system_N ;
  game_engine_CN = makeCN game_N engine_N ;
  compiler_construction_CN = makeCN compiler_N construction_N ;
  regular_expression_CN = makeCN regular_A expression_N ;
  code_generator_CN = makeCN code_N generator_N ;
  formal_verification_CN = makeCN formal_A verification_N ;
  differential_equation_CN = makeCN differential_A equation_N ;
  artificial_intelligence_CN = makeCN artificial_A intelligence_N ;
  algorithm_design_CN = makeCN algorithm_N design_N ;
  network_security_CN = makeCN network_N security_N ;
  distributed_systems_CN = makeCN (mkA "distributed") (mkN "systems") ;
  applied_data_science_CN = makeCN (mkA "applied") data_N science_N ;
  abstract_data_type_CN = makeCN abstract_A data_N type_N ;
  abstract_method_CN = makeCN abstract_A method_N ;
  agile_software_development_CN = makeCN agile_A software_N development_N ;
  big_data_CN = makeCN big_A data_N ;
  binary_number_CN = makeCN binary_A number_N ;
  binary_search_tree_CN = makeCN binary_A search_N tree_N ;
  security_protocol_CN = makeCN security_N protocol_N ;
  virtual_private_network_CN = makeCN virtual_A private_A network_N ;
  floating_point_number_CN = makeCN (mkA "floating") point_N number_N ;
  attack_model_CN = makeCN (mkA "attack") model_N ;
  --linear_search_CN = makeCN linear_A search_V ;
  data_communication_CN = makeCN data_N communication_N ;
  domain_name_system_CN = makeCN domain_N name_N system_N ;
  routing_protocol_CN = makeCN (mkN "routing") protocol_N ;
  congestion_control_CN = makeCN congestion_N control_N ;

}
