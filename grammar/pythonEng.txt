Prerequisites

-

Goals

Computer programming is a basic skill needed in both studies and professional life. This course gives the basic skills that the participants can both accomplish programming tasks typical of science and engineering tasks and understand the fundamental principles of computers and programming. 

Learning outcomes

On successful completion of the course the student will be able to: 

Knowledge and understanding
- Express mathematical formulas as programming language expressions and algorithms
- Choose appropriate datatypes and datastructures for different kinds of data
- Structure large programs into manageable and reusable units by the use of concepts such as modules, classes, and functions
- Search and find relevant program libraries and use them in adequate ways
Explain the relations between hardware, operating system, and user programs
Use programming for basic data analysis involving large files

Competence and skills
- Write programs that manipulate numeric and textual data to perform standard programming tasks
- Build interactive programs with both text-based and graphical user interfaces
- Make programs that read, transform, and generate files in the file system 
Use standard libraries and follow best programming practices 
Test programs by methods such as unit, regression, and property-based testing
Use programming tools such as code editors and revision control systems

Judgement and approach
Assess the difficulty and resources needed for typical programming tasks
Analyse code written by others and find errors and possibilities for improvement


Course content

The course is a first introduction to programming by using a general-purpose programming language. It gives a comprehensive knowledge of the language, enabling the student to write code for a wide variety of tasks and to read and reuse code written by other programmers. In parallel to learning the language, the student will be introduced to the basic concepts of computers and programming. These concepts include:

Datatypes and their binary representations in the computer
The relation between source code, compiler, and the machine
The syntactic structure of expressions, statements, functions, classes, modules, etc
The basics of algorithmic design by the use of iteration, recursion, decomposition to functions, and top-down vs. bottom-up
The basics of software design in terms of functions, classes, modules, etc

Organisation
The course consists of lectures and exercise sessions. There is also a number of programming assignments where the skills can be trained in practice.
Literature
Information about literature will be given on the course home-page before the start of the course.
Examination
Compulsory programming assignments, written or oral exam.


Förkunskaper

-

Mål

Dataprogrammering är en grundläggande färdighet som är av nytta i såväl framtida studier som arbetsliv.. Kursen ger de grundläggande färdigheterna så att deltagarna både kan utföra programmeringsuppgifter som är typiska för vetenskapliga och tekniska uppgifter och förstå de grundläggande principerna för datorer och programmering. 

Lärandemål

Efter avslutad kurs ska studenten kunna: 

Kunskap och förståelse
- Uttrycka matematiska formler som uttryck och algoritmer i ett programspråk
- Välja lämpliga datatyper och datastrukturer för olika typer av data
- Strukturera stora program i hanterbara och återanvändbara enheter med hjälp av begrepp som moduler, klasser och funktioner
- Söka och hitta relevanta programbibliotek och använda dem på lämpligt sätt
Förklara förhållandet mellan hårdvara, operativsystem och användarprogram
Använda programmering för grundläggande dataanalys av stora filer

Kompetens och färdigheter
- Skriva program som manipulerar numerisk och textuell data för att utföra vanliga programmeringsuppgifter
- Bygga interaktiva program med både textbaserade och grafiska användargränssnitt
- Skriva program som läser, ändrar och skapar filer i filsystemet 
Använda standardbibliotek och följa god praxis i programmering
Testa program med metoder såsom enhets-, regressions- och egenskapsbaserad testning
Använda programmeringsverktyg såsom textredigerare och versionshanteringssystem

Bedömning och tillvägagångssätt
Utvärdera svårigheter och resurser som krävs för typiska programmeringsuppgifter
Analysera kod skriven av andra och hitta fel och möjligheter till förbättring


Kursinnehåll

Kursen är en första introduktion till programmering med hjälp av ett allmänt programmeringsspråk. Den ger studenten omfattande kunskaper i språket, vilket gör det möjligt för eleven att skriva kod för en mängd olika uppgifter och att läsa och återanvända kod skriven av andra programmerare. Parallellt med att lära sig språket kommer studenten att introduceras till grundläggande begrepp inom datorer och programmering. Dessa begrepp inkluderar:

Datatyper och deras binära representationer i datorns minne
Förhållandet mellan källkod, kompilator och maskin
Den syntaktiska strukturen för uttryck, uttalanden, funktioner, klasser, moduler osv.
Grunderna i algoritmdesign såsom iteration, rekursion, nedbrytning till funktioner och top-down vs. bottom-up.
Grunderna i programvarudesign såsom funktioner, klasser och moduler.

Organisation
Kursen består av föreläsningar och övningar. Det finns också ett antal programmeringsuppgifter för att träna studenternas praktiska färdigheter.
Litteratur
Information om litteratur ges på kursens hemsida innan kursstart.
Examen
Obligatoriska programmeringsuppgifter, skriftlig eller muntlig tentamen.

